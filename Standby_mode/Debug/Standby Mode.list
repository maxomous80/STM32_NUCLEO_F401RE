
Standby Mode.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000035b0  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a8  08003750  08003750  00004750  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080037f8  080037f8  0000505c  2**0
                  CONTENTS
  4 .ARM          00000008  080037f8  080037f8  000047f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003800  08003800  0000505c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003800  08003800  00004800  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003804  08003804  00004804  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  08003808  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001d4  2000005c  08003864  0000505c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000230  08003864  00005230  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000505c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a911  00000000  00000000  0000508c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001c82  00000000  00000000  0000f99d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000958  00000000  00000000  00011620  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000071e  00000000  00000000  00011f78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00015b24  00000000  00000000  00012696  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b4a4  00000000  00000000  000281ba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008afbd  00000000  00000000  0003365e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000be61b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002a80  00000000  00000000  000be660  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000069  00000000  00000000  000c10e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000005c 	.word	0x2000005c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08003738 	.word	0x08003738

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000060 	.word	0x20000060
 80001dc:	08003738 	.word	0x08003738

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b988 	b.w	80005b8 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	468e      	mov	lr, r1
 80002c8:	4604      	mov	r4, r0
 80002ca:	4688      	mov	r8, r1
 80002cc:	2b00      	cmp	r3, #0
 80002ce:	d14a      	bne.n	8000366 <__udivmoddi4+0xa6>
 80002d0:	428a      	cmp	r2, r1
 80002d2:	4617      	mov	r7, r2
 80002d4:	d962      	bls.n	800039c <__udivmoddi4+0xdc>
 80002d6:	fab2 f682 	clz	r6, r2
 80002da:	b14e      	cbz	r6, 80002f0 <__udivmoddi4+0x30>
 80002dc:	f1c6 0320 	rsb	r3, r6, #32
 80002e0:	fa01 f806 	lsl.w	r8, r1, r6
 80002e4:	fa20 f303 	lsr.w	r3, r0, r3
 80002e8:	40b7      	lsls	r7, r6
 80002ea:	ea43 0808 	orr.w	r8, r3, r8
 80002ee:	40b4      	lsls	r4, r6
 80002f0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002f4:	fa1f fc87 	uxth.w	ip, r7
 80002f8:	fbb8 f1fe 	udiv	r1, r8, lr
 80002fc:	0c23      	lsrs	r3, r4, #16
 80002fe:	fb0e 8811 	mls	r8, lr, r1, r8
 8000302:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000306:	fb01 f20c 	mul.w	r2, r1, ip
 800030a:	429a      	cmp	r2, r3
 800030c:	d909      	bls.n	8000322 <__udivmoddi4+0x62>
 800030e:	18fb      	adds	r3, r7, r3
 8000310:	f101 30ff 	add.w	r0, r1, #4294967295
 8000314:	f080 80ea 	bcs.w	80004ec <__udivmoddi4+0x22c>
 8000318:	429a      	cmp	r2, r3
 800031a:	f240 80e7 	bls.w	80004ec <__udivmoddi4+0x22c>
 800031e:	3902      	subs	r1, #2
 8000320:	443b      	add	r3, r7
 8000322:	1a9a      	subs	r2, r3, r2
 8000324:	b2a3      	uxth	r3, r4
 8000326:	fbb2 f0fe 	udiv	r0, r2, lr
 800032a:	fb0e 2210 	mls	r2, lr, r0, r2
 800032e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000332:	fb00 fc0c 	mul.w	ip, r0, ip
 8000336:	459c      	cmp	ip, r3
 8000338:	d909      	bls.n	800034e <__udivmoddi4+0x8e>
 800033a:	18fb      	adds	r3, r7, r3
 800033c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000340:	f080 80d6 	bcs.w	80004f0 <__udivmoddi4+0x230>
 8000344:	459c      	cmp	ip, r3
 8000346:	f240 80d3 	bls.w	80004f0 <__udivmoddi4+0x230>
 800034a:	443b      	add	r3, r7
 800034c:	3802      	subs	r0, #2
 800034e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000352:	eba3 030c 	sub.w	r3, r3, ip
 8000356:	2100      	movs	r1, #0
 8000358:	b11d      	cbz	r5, 8000362 <__udivmoddi4+0xa2>
 800035a:	40f3      	lsrs	r3, r6
 800035c:	2200      	movs	r2, #0
 800035e:	e9c5 3200 	strd	r3, r2, [r5]
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	428b      	cmp	r3, r1
 8000368:	d905      	bls.n	8000376 <__udivmoddi4+0xb6>
 800036a:	b10d      	cbz	r5, 8000370 <__udivmoddi4+0xb0>
 800036c:	e9c5 0100 	strd	r0, r1, [r5]
 8000370:	2100      	movs	r1, #0
 8000372:	4608      	mov	r0, r1
 8000374:	e7f5      	b.n	8000362 <__udivmoddi4+0xa2>
 8000376:	fab3 f183 	clz	r1, r3
 800037a:	2900      	cmp	r1, #0
 800037c:	d146      	bne.n	800040c <__udivmoddi4+0x14c>
 800037e:	4573      	cmp	r3, lr
 8000380:	d302      	bcc.n	8000388 <__udivmoddi4+0xc8>
 8000382:	4282      	cmp	r2, r0
 8000384:	f200 8105 	bhi.w	8000592 <__udivmoddi4+0x2d2>
 8000388:	1a84      	subs	r4, r0, r2
 800038a:	eb6e 0203 	sbc.w	r2, lr, r3
 800038e:	2001      	movs	r0, #1
 8000390:	4690      	mov	r8, r2
 8000392:	2d00      	cmp	r5, #0
 8000394:	d0e5      	beq.n	8000362 <__udivmoddi4+0xa2>
 8000396:	e9c5 4800 	strd	r4, r8, [r5]
 800039a:	e7e2      	b.n	8000362 <__udivmoddi4+0xa2>
 800039c:	2a00      	cmp	r2, #0
 800039e:	f000 8090 	beq.w	80004c2 <__udivmoddi4+0x202>
 80003a2:	fab2 f682 	clz	r6, r2
 80003a6:	2e00      	cmp	r6, #0
 80003a8:	f040 80a4 	bne.w	80004f4 <__udivmoddi4+0x234>
 80003ac:	1a8a      	subs	r2, r1, r2
 80003ae:	0c03      	lsrs	r3, r0, #16
 80003b0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003b4:	b280      	uxth	r0, r0
 80003b6:	b2bc      	uxth	r4, r7
 80003b8:	2101      	movs	r1, #1
 80003ba:	fbb2 fcfe 	udiv	ip, r2, lr
 80003be:	fb0e 221c 	mls	r2, lr, ip, r2
 80003c2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003c6:	fb04 f20c 	mul.w	r2, r4, ip
 80003ca:	429a      	cmp	r2, r3
 80003cc:	d907      	bls.n	80003de <__udivmoddi4+0x11e>
 80003ce:	18fb      	adds	r3, r7, r3
 80003d0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80003d4:	d202      	bcs.n	80003dc <__udivmoddi4+0x11c>
 80003d6:	429a      	cmp	r2, r3
 80003d8:	f200 80e0 	bhi.w	800059c <__udivmoddi4+0x2dc>
 80003dc:	46c4      	mov	ip, r8
 80003de:	1a9b      	subs	r3, r3, r2
 80003e0:	fbb3 f2fe 	udiv	r2, r3, lr
 80003e4:	fb0e 3312 	mls	r3, lr, r2, r3
 80003e8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80003ec:	fb02 f404 	mul.w	r4, r2, r4
 80003f0:	429c      	cmp	r4, r3
 80003f2:	d907      	bls.n	8000404 <__udivmoddi4+0x144>
 80003f4:	18fb      	adds	r3, r7, r3
 80003f6:	f102 30ff 	add.w	r0, r2, #4294967295
 80003fa:	d202      	bcs.n	8000402 <__udivmoddi4+0x142>
 80003fc:	429c      	cmp	r4, r3
 80003fe:	f200 80ca 	bhi.w	8000596 <__udivmoddi4+0x2d6>
 8000402:	4602      	mov	r2, r0
 8000404:	1b1b      	subs	r3, r3, r4
 8000406:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800040a:	e7a5      	b.n	8000358 <__udivmoddi4+0x98>
 800040c:	f1c1 0620 	rsb	r6, r1, #32
 8000410:	408b      	lsls	r3, r1
 8000412:	fa22 f706 	lsr.w	r7, r2, r6
 8000416:	431f      	orrs	r7, r3
 8000418:	fa0e f401 	lsl.w	r4, lr, r1
 800041c:	fa20 f306 	lsr.w	r3, r0, r6
 8000420:	fa2e fe06 	lsr.w	lr, lr, r6
 8000424:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000428:	4323      	orrs	r3, r4
 800042a:	fa00 f801 	lsl.w	r8, r0, r1
 800042e:	fa1f fc87 	uxth.w	ip, r7
 8000432:	fbbe f0f9 	udiv	r0, lr, r9
 8000436:	0c1c      	lsrs	r4, r3, #16
 8000438:	fb09 ee10 	mls	lr, r9, r0, lr
 800043c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000440:	fb00 fe0c 	mul.w	lr, r0, ip
 8000444:	45a6      	cmp	lr, r4
 8000446:	fa02 f201 	lsl.w	r2, r2, r1
 800044a:	d909      	bls.n	8000460 <__udivmoddi4+0x1a0>
 800044c:	193c      	adds	r4, r7, r4
 800044e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000452:	f080 809c 	bcs.w	800058e <__udivmoddi4+0x2ce>
 8000456:	45a6      	cmp	lr, r4
 8000458:	f240 8099 	bls.w	800058e <__udivmoddi4+0x2ce>
 800045c:	3802      	subs	r0, #2
 800045e:	443c      	add	r4, r7
 8000460:	eba4 040e 	sub.w	r4, r4, lr
 8000464:	fa1f fe83 	uxth.w	lr, r3
 8000468:	fbb4 f3f9 	udiv	r3, r4, r9
 800046c:	fb09 4413 	mls	r4, r9, r3, r4
 8000470:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000474:	fb03 fc0c 	mul.w	ip, r3, ip
 8000478:	45a4      	cmp	ip, r4
 800047a:	d908      	bls.n	800048e <__udivmoddi4+0x1ce>
 800047c:	193c      	adds	r4, r7, r4
 800047e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000482:	f080 8082 	bcs.w	800058a <__udivmoddi4+0x2ca>
 8000486:	45a4      	cmp	ip, r4
 8000488:	d97f      	bls.n	800058a <__udivmoddi4+0x2ca>
 800048a:	3b02      	subs	r3, #2
 800048c:	443c      	add	r4, r7
 800048e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000492:	eba4 040c 	sub.w	r4, r4, ip
 8000496:	fba0 ec02 	umull	lr, ip, r0, r2
 800049a:	4564      	cmp	r4, ip
 800049c:	4673      	mov	r3, lr
 800049e:	46e1      	mov	r9, ip
 80004a0:	d362      	bcc.n	8000568 <__udivmoddi4+0x2a8>
 80004a2:	d05f      	beq.n	8000564 <__udivmoddi4+0x2a4>
 80004a4:	b15d      	cbz	r5, 80004be <__udivmoddi4+0x1fe>
 80004a6:	ebb8 0203 	subs.w	r2, r8, r3
 80004aa:	eb64 0409 	sbc.w	r4, r4, r9
 80004ae:	fa04 f606 	lsl.w	r6, r4, r6
 80004b2:	fa22 f301 	lsr.w	r3, r2, r1
 80004b6:	431e      	orrs	r6, r3
 80004b8:	40cc      	lsrs	r4, r1
 80004ba:	e9c5 6400 	strd	r6, r4, [r5]
 80004be:	2100      	movs	r1, #0
 80004c0:	e74f      	b.n	8000362 <__udivmoddi4+0xa2>
 80004c2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004c6:	0c01      	lsrs	r1, r0, #16
 80004c8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004cc:	b280      	uxth	r0, r0
 80004ce:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004d2:	463b      	mov	r3, r7
 80004d4:	4638      	mov	r0, r7
 80004d6:	463c      	mov	r4, r7
 80004d8:	46b8      	mov	r8, r7
 80004da:	46be      	mov	lr, r7
 80004dc:	2620      	movs	r6, #32
 80004de:	fbb1 f1f7 	udiv	r1, r1, r7
 80004e2:	eba2 0208 	sub.w	r2, r2, r8
 80004e6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80004ea:	e766      	b.n	80003ba <__udivmoddi4+0xfa>
 80004ec:	4601      	mov	r1, r0
 80004ee:	e718      	b.n	8000322 <__udivmoddi4+0x62>
 80004f0:	4610      	mov	r0, r2
 80004f2:	e72c      	b.n	800034e <__udivmoddi4+0x8e>
 80004f4:	f1c6 0220 	rsb	r2, r6, #32
 80004f8:	fa2e f302 	lsr.w	r3, lr, r2
 80004fc:	40b7      	lsls	r7, r6
 80004fe:	40b1      	lsls	r1, r6
 8000500:	fa20 f202 	lsr.w	r2, r0, r2
 8000504:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000508:	430a      	orrs	r2, r1
 800050a:	fbb3 f8fe 	udiv	r8, r3, lr
 800050e:	b2bc      	uxth	r4, r7
 8000510:	fb0e 3318 	mls	r3, lr, r8, r3
 8000514:	0c11      	lsrs	r1, r2, #16
 8000516:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800051a:	fb08 f904 	mul.w	r9, r8, r4
 800051e:	40b0      	lsls	r0, r6
 8000520:	4589      	cmp	r9, r1
 8000522:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000526:	b280      	uxth	r0, r0
 8000528:	d93e      	bls.n	80005a8 <__udivmoddi4+0x2e8>
 800052a:	1879      	adds	r1, r7, r1
 800052c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000530:	d201      	bcs.n	8000536 <__udivmoddi4+0x276>
 8000532:	4589      	cmp	r9, r1
 8000534:	d81f      	bhi.n	8000576 <__udivmoddi4+0x2b6>
 8000536:	eba1 0109 	sub.w	r1, r1, r9
 800053a:	fbb1 f9fe 	udiv	r9, r1, lr
 800053e:	fb09 f804 	mul.w	r8, r9, r4
 8000542:	fb0e 1119 	mls	r1, lr, r9, r1
 8000546:	b292      	uxth	r2, r2
 8000548:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800054c:	4542      	cmp	r2, r8
 800054e:	d229      	bcs.n	80005a4 <__udivmoddi4+0x2e4>
 8000550:	18ba      	adds	r2, r7, r2
 8000552:	f109 31ff 	add.w	r1, r9, #4294967295
 8000556:	d2c4      	bcs.n	80004e2 <__udivmoddi4+0x222>
 8000558:	4542      	cmp	r2, r8
 800055a:	d2c2      	bcs.n	80004e2 <__udivmoddi4+0x222>
 800055c:	f1a9 0102 	sub.w	r1, r9, #2
 8000560:	443a      	add	r2, r7
 8000562:	e7be      	b.n	80004e2 <__udivmoddi4+0x222>
 8000564:	45f0      	cmp	r8, lr
 8000566:	d29d      	bcs.n	80004a4 <__udivmoddi4+0x1e4>
 8000568:	ebbe 0302 	subs.w	r3, lr, r2
 800056c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000570:	3801      	subs	r0, #1
 8000572:	46e1      	mov	r9, ip
 8000574:	e796      	b.n	80004a4 <__udivmoddi4+0x1e4>
 8000576:	eba7 0909 	sub.w	r9, r7, r9
 800057a:	4449      	add	r1, r9
 800057c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000580:	fbb1 f9fe 	udiv	r9, r1, lr
 8000584:	fb09 f804 	mul.w	r8, r9, r4
 8000588:	e7db      	b.n	8000542 <__udivmoddi4+0x282>
 800058a:	4673      	mov	r3, lr
 800058c:	e77f      	b.n	800048e <__udivmoddi4+0x1ce>
 800058e:	4650      	mov	r0, sl
 8000590:	e766      	b.n	8000460 <__udivmoddi4+0x1a0>
 8000592:	4608      	mov	r0, r1
 8000594:	e6fd      	b.n	8000392 <__udivmoddi4+0xd2>
 8000596:	443b      	add	r3, r7
 8000598:	3a02      	subs	r2, #2
 800059a:	e733      	b.n	8000404 <__udivmoddi4+0x144>
 800059c:	f1ac 0c02 	sub.w	ip, ip, #2
 80005a0:	443b      	add	r3, r7
 80005a2:	e71c      	b.n	80003de <__udivmoddi4+0x11e>
 80005a4:	4649      	mov	r1, r9
 80005a6:	e79c      	b.n	80004e2 <__udivmoddi4+0x222>
 80005a8:	eba1 0109 	sub.w	r1, r1, r9
 80005ac:	46c4      	mov	ip, r8
 80005ae:	fbb1 f9fe 	udiv	r9, r1, lr
 80005b2:	fb09 f804 	mul.w	r8, r9, r4
 80005b6:	e7c4      	b.n	8000542 <__udivmoddi4+0x282>

080005b8 <__aeabi_idiv0>:
 80005b8:	4770      	bx	lr
 80005ba:	bf00      	nop

080005bc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005bc:	b580      	push	{r7, lr}
 80005be:	b09c      	sub	sp, #112	@ 0x70
 80005c0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005c2:	f000 fb5f 	bl	8000c84 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005c6:	f000 f89d 	bl	8000704 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005ca:	f000 f997 	bl	80008fc <MX_GPIO_Init>
  MX_RTC_Init();
 80005ce:	f000 f907 	bl	80007e0 <MX_RTC_Init>
  MX_USART2_UART_Init();
 80005d2:	f000 f969 	bl	80008a8 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  uint8_t buffertx[100];

  if (__HAL_PWR_GET_FLAG(PWR_FLAG_SB) != RESET)
 80005d6:	4b44      	ldr	r3, [pc, #272]	@ (80006e8 <main+0x12c>)
 80005d8:	685b      	ldr	r3, [r3, #4]
 80005da:	f003 0302 	and.w	r3, r3, #2
 80005de:	2b02      	cmp	r3, #2
 80005e0:	d12d      	bne.n	800063e <main+0x82>
    {
  	  __HAL_PWR_CLEAR_FLAG(PWR_FLAG_SB);  // clear the flag
 80005e2:	4b41      	ldr	r3, [pc, #260]	@ (80006e8 <main+0x12c>)
 80005e4:	681b      	ldr	r3, [r3, #0]
 80005e6:	4a40      	ldr	r2, [pc, #256]	@ (80006e8 <main+0x12c>)
 80005e8:	f043 0308 	orr.w	r3, r3, #8
 80005ec:	6013      	str	r3, [r2, #0]

  	  /** display  the string **/
  	  sprintf(buffertx, "Wakeup from the STANDBY MODE\n\n");
 80005ee:	1d3b      	adds	r3, r7, #4
 80005f0:	493e      	ldr	r1, [pc, #248]	@ (80006ec <main+0x130>)
 80005f2:	4618      	mov	r0, r3
 80005f4:	f002 fc00 	bl	8002df8 <siprintf>
  	  HAL_UART_Transmit(&huart2, buffertx, strlen (buffertx), 1000);
 80005f8:	1d3b      	adds	r3, r7, #4
 80005fa:	4618      	mov	r0, r3
 80005fc:	f7ff fdf0 	bl	80001e0 <strlen>
 8000600:	4603      	mov	r3, r0
 8000602:	b29a      	uxth	r2, r3
 8000604:	1d39      	adds	r1, r7, #4
 8000606:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800060a:	4839      	ldr	r0, [pc, #228]	@ (80006f0 <main+0x134>)
 800060c:	f002 f838 	bl	8002680 <HAL_UART_Transmit>

  	  /** Blink the LED **/
  	  for (int i=0; i<20; i++)
 8000610:	2300      	movs	r3, #0
 8000612:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8000614:	e009      	b.n	800062a <main+0x6e>
  	  {
  		  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8000616:	2120      	movs	r1, #32
 8000618:	4836      	ldr	r0, [pc, #216]	@ (80006f4 <main+0x138>)
 800061a:	f000 fe78 	bl	800130e <HAL_GPIO_TogglePin>
  		  HAL_Delay(200);
 800061e:	20c8      	movs	r0, #200	@ 0xc8
 8000620:	f000 fba2 	bl	8000d68 <HAL_Delay>
  	  for (int i=0; i<20; i++)
 8000624:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8000626:	3301      	adds	r3, #1
 8000628:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800062a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800062c:	2b13      	cmp	r3, #19
 800062e:	ddf2      	ble.n	8000616 <main+0x5a>
  	  }

  	  /** Disable the WWAKEUP PIN **/
  	  HAL_PWR_DisableWakeUpPin(PWR_WAKEUP_PIN1);  // disable PA0
 8000630:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8000634:	f000 fe98 	bl	8001368 <HAL_PWR_DisableWakeUpPin>

  	  /** Deactivate the RTC wakeup  **/
  	  HAL_RTCEx_DeactivateWakeUpTimer(&hrtc);
 8000638:	482f      	ldr	r0, [pc, #188]	@ (80006f8 <main+0x13c>)
 800063a:	f001 ff4b 	bl	80024d4 <HAL_RTCEx_DeactivateWakeUpTimer>
    }


    /** Now enter the standby mode **/
     /* Clear the WU FLAG */
    __HAL_PWR_CLEAR_FLAG(PWR_FLAG_WU);
 800063e:	4b2a      	ldr	r3, [pc, #168]	@ (80006e8 <main+0x12c>)
 8000640:	681b      	ldr	r3, [r3, #0]
 8000642:	4a29      	ldr	r2, [pc, #164]	@ (80006e8 <main+0x12c>)
 8000644:	f043 0304 	orr.w	r3, r3, #4
 8000648:	6013      	str	r3, [r2, #0]

     /* clear the RTC Wake UP (WU) flag */
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);
 800064a:	4b2b      	ldr	r3, [pc, #172]	@ (80006f8 <main+0x13c>)
 800064c:	681b      	ldr	r3, [r3, #0]
 800064e:	68db      	ldr	r3, [r3, #12]
 8000650:	b2da      	uxtb	r2, r3
 8000652:	4b29      	ldr	r3, [pc, #164]	@ (80006f8 <main+0x13c>)
 8000654:	681b      	ldr	r3, [r3, #0]
 8000656:	f462 6290 	orn	r2, r2, #1152	@ 0x480
 800065a:	60da      	str	r2, [r3, #12]

     /* Display the string */
    sprintf(buffertx,"About to enter the STANDBY MODE\n\n");
 800065c:	1d3b      	adds	r3, r7, #4
 800065e:	4927      	ldr	r1, [pc, #156]	@ (80006fc <main+0x140>)
 8000660:	4618      	mov	r0, r3
 8000662:	f002 fbc9 	bl	8002df8 <siprintf>
    HAL_UART_Transmit(&huart2, buffertx, strlen (buffertx), 1000);
 8000666:	1d3b      	adds	r3, r7, #4
 8000668:	4618      	mov	r0, r3
 800066a:	f7ff fdb9 	bl	80001e0 <strlen>
 800066e:	4603      	mov	r3, r0
 8000670:	b29a      	uxth	r2, r3
 8000672:	1d39      	adds	r1, r7, #4
 8000674:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000678:	481d      	ldr	r0, [pc, #116]	@ (80006f0 <main+0x134>)
 800067a:	f002 f801 	bl	8002680 <HAL_UART_Transmit>

     /* Blink the LED */
    for (int i=0; i<5; i++)
 800067e:	2300      	movs	r3, #0
 8000680:	66bb      	str	r3, [r7, #104]	@ 0x68
 8000682:	e00a      	b.n	800069a <main+0xde>
    {
  	  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8000684:	2120      	movs	r1, #32
 8000686:	481b      	ldr	r0, [pc, #108]	@ (80006f4 <main+0x138>)
 8000688:	f000 fe41 	bl	800130e <HAL_GPIO_TogglePin>
  	  HAL_Delay(750);
 800068c:	f240 20ee 	movw	r0, #750	@ 0x2ee
 8000690:	f000 fb6a 	bl	8000d68 <HAL_Delay>
    for (int i=0; i<5; i++)
 8000694:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8000696:	3301      	adds	r3, #1
 8000698:	66bb      	str	r3, [r7, #104]	@ 0x68
 800069a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800069c:	2b04      	cmp	r3, #4
 800069e:	ddf1      	ble.n	8000684 <main+0xc8>
    }

     /* Enable the WAKEUP PIN */
    HAL_PWR_EnableWakeUpPin(PWR_WAKEUP_PIN1);
 80006a0:	f44f 7080 	mov.w	r0, #256	@ 0x100
 80006a4:	f000 fe4e 	bl	8001344 <HAL_PWR_EnableWakeUpPin>
        Exaple: To configure the wake up timer to 5s the WakeUpCounter is set to 0x2710:
        RTC_WAKEUPCLOCK_RTCCLK_DIV = RTCCLK_Div16 = 16
        Wake-up Time Base = 16 /(32KHz) = 0.0005 seconds
        ==> WakeUpCounter = ~10s/0.0005s = 40000 = 0x4E20
      */
    if (HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 0X4E20, RTC_WAKEUPCLOCK_RTCCLK_DIV16) != HAL_OK)
 80006a8:	2200      	movs	r2, #0
 80006aa:	f644 6120 	movw	r1, #20000	@ 0x4e20
 80006ae:	4812      	ldr	r0, [pc, #72]	@ (80006f8 <main+0x13c>)
 80006b0:	f001 fe4e 	bl	8002350 <HAL_RTCEx_SetWakeUpTimer_IT>
 80006b4:	4603      	mov	r3, r0
 80006b6:	2b00      	cmp	r3, #0
 80006b8:	d001      	beq.n	80006be <main+0x102>
    {
      Error_Handler();
 80006ba:	f000 f98d 	bl	80009d8 <Error_Handler>
    }

     /* one last string to be sure */

    sprintf(buffertx,"STANDBY MODE is ON\n\n");
 80006be:	1d3b      	adds	r3, r7, #4
 80006c0:	490f      	ldr	r1, [pc, #60]	@ (8000700 <main+0x144>)
 80006c2:	4618      	mov	r0, r3
 80006c4:	f002 fb98 	bl	8002df8 <siprintf>
    HAL_UART_Transmit(&huart2, buffertx, strlen (buffertx), 1000);
 80006c8:	1d3b      	adds	r3, r7, #4
 80006ca:	4618      	mov	r0, r3
 80006cc:	f7ff fd88 	bl	80001e0 <strlen>
 80006d0:	4603      	mov	r3, r0
 80006d2:	b29a      	uxth	r2, r3
 80006d4:	1d39      	adds	r1, r7, #4
 80006d6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80006da:	4805      	ldr	r0, [pc, #20]	@ (80006f0 <main+0x134>)
 80006dc:	f001 ffd0 	bl	8002680 <HAL_UART_Transmit>

     /* Finally enter the standby mode */
    HAL_PWR_EnterSTANDBYMode();
 80006e0:	f000 fe56 	bl	8001390 <HAL_PWR_EnterSTANDBYMode>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80006e4:	bf00      	nop
 80006e6:	e7fd      	b.n	80006e4 <main+0x128>
 80006e8:	40007000 	.word	0x40007000
 80006ec:	08003750 	.word	0x08003750
 80006f0:	20000098 	.word	0x20000098
 80006f4:	40020000 	.word	0x40020000
 80006f8:	20000078 	.word	0x20000078
 80006fc:	08003770 	.word	0x08003770
 8000700:	08003794 	.word	0x08003794

08000704 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000704:	b580      	push	{r7, lr}
 8000706:	b094      	sub	sp, #80	@ 0x50
 8000708:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800070a:	f107 0320 	add.w	r3, r7, #32
 800070e:	2230      	movs	r2, #48	@ 0x30
 8000710:	2100      	movs	r1, #0
 8000712:	4618      	mov	r0, r3
 8000714:	f002 fb92 	bl	8002e3c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000718:	f107 030c 	add.w	r3, r7, #12
 800071c:	2200      	movs	r2, #0
 800071e:	601a      	str	r2, [r3, #0]
 8000720:	605a      	str	r2, [r3, #4]
 8000722:	609a      	str	r2, [r3, #8]
 8000724:	60da      	str	r2, [r3, #12]
 8000726:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000728:	2300      	movs	r3, #0
 800072a:	60bb      	str	r3, [r7, #8]
 800072c:	4b2a      	ldr	r3, [pc, #168]	@ (80007d8 <SystemClock_Config+0xd4>)
 800072e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000730:	4a29      	ldr	r2, [pc, #164]	@ (80007d8 <SystemClock_Config+0xd4>)
 8000732:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000736:	6413      	str	r3, [r2, #64]	@ 0x40
 8000738:	4b27      	ldr	r3, [pc, #156]	@ (80007d8 <SystemClock_Config+0xd4>)
 800073a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800073c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000740:	60bb      	str	r3, [r7, #8]
 8000742:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000744:	2300      	movs	r3, #0
 8000746:	607b      	str	r3, [r7, #4]
 8000748:	4b24      	ldr	r3, [pc, #144]	@ (80007dc <SystemClock_Config+0xd8>)
 800074a:	681b      	ldr	r3, [r3, #0]
 800074c:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000750:	4a22      	ldr	r2, [pc, #136]	@ (80007dc <SystemClock_Config+0xd8>)
 8000752:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000756:	6013      	str	r3, [r2, #0]
 8000758:	4b20      	ldr	r3, [pc, #128]	@ (80007dc <SystemClock_Config+0xd8>)
 800075a:	681b      	ldr	r3, [r3, #0]
 800075c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000760:	607b      	str	r3, [r7, #4]
 8000762:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8000764:	230a      	movs	r3, #10
 8000766:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000768:	2301      	movs	r3, #1
 800076a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800076c:	2310      	movs	r3, #16
 800076e:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000770:	2301      	movs	r3, #1
 8000772:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000774:	2302      	movs	r3, #2
 8000776:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000778:	2300      	movs	r3, #0
 800077a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 800077c:	2310      	movs	r3, #16
 800077e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000780:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8000784:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000786:	2304      	movs	r3, #4
 8000788:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800078a:	2307      	movs	r3, #7
 800078c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800078e:	f107 0320 	add.w	r3, r7, #32
 8000792:	4618      	mov	r0, r3
 8000794:	f000 fe14 	bl	80013c0 <HAL_RCC_OscConfig>
 8000798:	4603      	mov	r3, r0
 800079a:	2b00      	cmp	r3, #0
 800079c:	d001      	beq.n	80007a2 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 800079e:	f000 f91b 	bl	80009d8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007a2:	230f      	movs	r3, #15
 80007a4:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007a6:	2302      	movs	r3, #2
 80007a8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007aa:	2300      	movs	r3, #0
 80007ac:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80007ae:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80007b2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80007b4:	2300      	movs	r3, #0
 80007b6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80007b8:	f107 030c 	add.w	r3, r7, #12
 80007bc:	2102      	movs	r1, #2
 80007be:	4618      	mov	r0, r3
 80007c0:	f001 f876 	bl	80018b0 <HAL_RCC_ClockConfig>
 80007c4:	4603      	mov	r3, r0
 80007c6:	2b00      	cmp	r3, #0
 80007c8:	d001      	beq.n	80007ce <SystemClock_Config+0xca>
  {
    Error_Handler();
 80007ca:	f000 f905 	bl	80009d8 <Error_Handler>
  }
}
 80007ce:	bf00      	nop
 80007d0:	3750      	adds	r7, #80	@ 0x50
 80007d2:	46bd      	mov	sp, r7
 80007d4:	bd80      	pop	{r7, pc}
 80007d6:	bf00      	nop
 80007d8:	40023800 	.word	0x40023800
 80007dc:	40007000 	.word	0x40007000

080007e0 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 80007e0:	b580      	push	{r7, lr}
 80007e2:	b086      	sub	sp, #24
 80007e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 80007e6:	1d3b      	adds	r3, r7, #4
 80007e8:	2200      	movs	r2, #0
 80007ea:	601a      	str	r2, [r3, #0]
 80007ec:	605a      	str	r2, [r3, #4]
 80007ee:	609a      	str	r2, [r3, #8]
 80007f0:	60da      	str	r2, [r3, #12]
 80007f2:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 80007f4:	2300      	movs	r3, #0
 80007f6:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80007f8:	4b29      	ldr	r3, [pc, #164]	@ (80008a0 <MX_RTC_Init+0xc0>)
 80007fa:	4a2a      	ldr	r2, [pc, #168]	@ (80008a4 <MX_RTC_Init+0xc4>)
 80007fc:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80007fe:	4b28      	ldr	r3, [pc, #160]	@ (80008a0 <MX_RTC_Init+0xc0>)
 8000800:	2200      	movs	r2, #0
 8000802:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000804:	4b26      	ldr	r3, [pc, #152]	@ (80008a0 <MX_RTC_Init+0xc0>)
 8000806:	227f      	movs	r2, #127	@ 0x7f
 8000808:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 800080a:	4b25      	ldr	r3, [pc, #148]	@ (80008a0 <MX_RTC_Init+0xc0>)
 800080c:	22ff      	movs	r2, #255	@ 0xff
 800080e:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000810:	4b23      	ldr	r3, [pc, #140]	@ (80008a0 <MX_RTC_Init+0xc0>)
 8000812:	2200      	movs	r2, #0
 8000814:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000816:	4b22      	ldr	r3, [pc, #136]	@ (80008a0 <MX_RTC_Init+0xc0>)
 8000818:	2200      	movs	r2, #0
 800081a:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800081c:	4b20      	ldr	r3, [pc, #128]	@ (80008a0 <MX_RTC_Init+0xc0>)
 800081e:	2200      	movs	r2, #0
 8000820:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000822:	481f      	ldr	r0, [pc, #124]	@ (80008a0 <MX_RTC_Init+0xc0>)
 8000824:	f001 fb52 	bl	8001ecc <HAL_RTC_Init>
 8000828:	4603      	mov	r3, r0
 800082a:	2b00      	cmp	r3, #0
 800082c:	d001      	beq.n	8000832 <MX_RTC_Init+0x52>
  {
    Error_Handler();
 800082e:	f000 f8d3 	bl	80009d8 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8000832:	2300      	movs	r3, #0
 8000834:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x0;
 8000836:	2300      	movs	r3, #0
 8000838:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 800083a:	2300      	movs	r3, #0
 800083c:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800083e:	2300      	movs	r3, #0
 8000840:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000842:	2300      	movs	r3, #0
 8000844:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8000846:	1d3b      	adds	r3, r7, #4
 8000848:	2201      	movs	r2, #1
 800084a:	4619      	mov	r1, r3
 800084c:	4814      	ldr	r0, [pc, #80]	@ (80008a0 <MX_RTC_Init+0xc0>)
 800084e:	f001 fbc0 	bl	8001fd2 <HAL_RTC_SetTime>
 8000852:	4603      	mov	r3, r0
 8000854:	2b00      	cmp	r3, #0
 8000856:	d001      	beq.n	800085c <MX_RTC_Init+0x7c>
  {
    Error_Handler();
 8000858:	f000 f8be 	bl	80009d8 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 800085c:	2301      	movs	r3, #1
 800085e:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 8000860:	2301      	movs	r3, #1
 8000862:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x1;
 8000864:	2301      	movs	r3, #1
 8000866:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x0;
 8000868:	2300      	movs	r3, #0
 800086a:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 800086c:	463b      	mov	r3, r7
 800086e:	2201      	movs	r2, #1
 8000870:	4619      	mov	r1, r3
 8000872:	480b      	ldr	r0, [pc, #44]	@ (80008a0 <MX_RTC_Init+0xc0>)
 8000874:	f001 fc47 	bl	8002106 <HAL_RTC_SetDate>
 8000878:	4603      	mov	r3, r0
 800087a:	2b00      	cmp	r3, #0
 800087c:	d001      	beq.n	8000882 <MX_RTC_Init+0xa2>
  {
    Error_Handler();
 800087e:	f000 f8ab 	bl	80009d8 <Error_Handler>
  }

  /** Enable the WakeUp
  */
  if (HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 0, RTC_WAKEUPCLOCK_RTCCLK_DIV16) != HAL_OK)
 8000882:	2200      	movs	r2, #0
 8000884:	2100      	movs	r1, #0
 8000886:	4806      	ldr	r0, [pc, #24]	@ (80008a0 <MX_RTC_Init+0xc0>)
 8000888:	f001 fd62 	bl	8002350 <HAL_RTCEx_SetWakeUpTimer_IT>
 800088c:	4603      	mov	r3, r0
 800088e:	2b00      	cmp	r3, #0
 8000890:	d001      	beq.n	8000896 <MX_RTC_Init+0xb6>
  {
    Error_Handler();
 8000892:	f000 f8a1 	bl	80009d8 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000896:	bf00      	nop
 8000898:	3718      	adds	r7, #24
 800089a:	46bd      	mov	sp, r7
 800089c:	bd80      	pop	{r7, pc}
 800089e:	bf00      	nop
 80008a0:	20000078 	.word	0x20000078
 80008a4:	40002800 	.word	0x40002800

080008a8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80008a8:	b580      	push	{r7, lr}
 80008aa:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80008ac:	4b11      	ldr	r3, [pc, #68]	@ (80008f4 <MX_USART2_UART_Init+0x4c>)
 80008ae:	4a12      	ldr	r2, [pc, #72]	@ (80008f8 <MX_USART2_UART_Init+0x50>)
 80008b0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80008b2:	4b10      	ldr	r3, [pc, #64]	@ (80008f4 <MX_USART2_UART_Init+0x4c>)
 80008b4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80008b8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80008ba:	4b0e      	ldr	r3, [pc, #56]	@ (80008f4 <MX_USART2_UART_Init+0x4c>)
 80008bc:	2200      	movs	r2, #0
 80008be:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80008c0:	4b0c      	ldr	r3, [pc, #48]	@ (80008f4 <MX_USART2_UART_Init+0x4c>)
 80008c2:	2200      	movs	r2, #0
 80008c4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80008c6:	4b0b      	ldr	r3, [pc, #44]	@ (80008f4 <MX_USART2_UART_Init+0x4c>)
 80008c8:	2200      	movs	r2, #0
 80008ca:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80008cc:	4b09      	ldr	r3, [pc, #36]	@ (80008f4 <MX_USART2_UART_Init+0x4c>)
 80008ce:	220c      	movs	r2, #12
 80008d0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008d2:	4b08      	ldr	r3, [pc, #32]	@ (80008f4 <MX_USART2_UART_Init+0x4c>)
 80008d4:	2200      	movs	r2, #0
 80008d6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80008d8:	4b06      	ldr	r3, [pc, #24]	@ (80008f4 <MX_USART2_UART_Init+0x4c>)
 80008da:	2200      	movs	r2, #0
 80008dc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80008de:	4805      	ldr	r0, [pc, #20]	@ (80008f4 <MX_USART2_UART_Init+0x4c>)
 80008e0:	f001 fe7e 	bl	80025e0 <HAL_UART_Init>
 80008e4:	4603      	mov	r3, r0
 80008e6:	2b00      	cmp	r3, #0
 80008e8:	d001      	beq.n	80008ee <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80008ea:	f000 f875 	bl	80009d8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80008ee:	bf00      	nop
 80008f0:	bd80      	pop	{r7, pc}
 80008f2:	bf00      	nop
 80008f4:	20000098 	.word	0x20000098
 80008f8:	40004400 	.word	0x40004400

080008fc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008fc:	b580      	push	{r7, lr}
 80008fe:	b08a      	sub	sp, #40	@ 0x28
 8000900:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000902:	f107 0314 	add.w	r3, r7, #20
 8000906:	2200      	movs	r2, #0
 8000908:	601a      	str	r2, [r3, #0]
 800090a:	605a      	str	r2, [r3, #4]
 800090c:	609a      	str	r2, [r3, #8]
 800090e:	60da      	str	r2, [r3, #12]
 8000910:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */
  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000912:	2300      	movs	r3, #0
 8000914:	613b      	str	r3, [r7, #16]
 8000916:	4b2d      	ldr	r3, [pc, #180]	@ (80009cc <MX_GPIO_Init+0xd0>)
 8000918:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800091a:	4a2c      	ldr	r2, [pc, #176]	@ (80009cc <MX_GPIO_Init+0xd0>)
 800091c:	f043 0304 	orr.w	r3, r3, #4
 8000920:	6313      	str	r3, [r2, #48]	@ 0x30
 8000922:	4b2a      	ldr	r3, [pc, #168]	@ (80009cc <MX_GPIO_Init+0xd0>)
 8000924:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000926:	f003 0304 	and.w	r3, r3, #4
 800092a:	613b      	str	r3, [r7, #16]
 800092c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800092e:	2300      	movs	r3, #0
 8000930:	60fb      	str	r3, [r7, #12]
 8000932:	4b26      	ldr	r3, [pc, #152]	@ (80009cc <MX_GPIO_Init+0xd0>)
 8000934:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000936:	4a25      	ldr	r2, [pc, #148]	@ (80009cc <MX_GPIO_Init+0xd0>)
 8000938:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800093c:	6313      	str	r3, [r2, #48]	@ 0x30
 800093e:	4b23      	ldr	r3, [pc, #140]	@ (80009cc <MX_GPIO_Init+0xd0>)
 8000940:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000942:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000946:	60fb      	str	r3, [r7, #12]
 8000948:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800094a:	2300      	movs	r3, #0
 800094c:	60bb      	str	r3, [r7, #8]
 800094e:	4b1f      	ldr	r3, [pc, #124]	@ (80009cc <MX_GPIO_Init+0xd0>)
 8000950:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000952:	4a1e      	ldr	r2, [pc, #120]	@ (80009cc <MX_GPIO_Init+0xd0>)
 8000954:	f043 0301 	orr.w	r3, r3, #1
 8000958:	6313      	str	r3, [r2, #48]	@ 0x30
 800095a:	4b1c      	ldr	r3, [pc, #112]	@ (80009cc <MX_GPIO_Init+0xd0>)
 800095c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800095e:	f003 0301 	and.w	r3, r3, #1
 8000962:	60bb      	str	r3, [r7, #8]
 8000964:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000966:	2300      	movs	r3, #0
 8000968:	607b      	str	r3, [r7, #4]
 800096a:	4b18      	ldr	r3, [pc, #96]	@ (80009cc <MX_GPIO_Init+0xd0>)
 800096c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800096e:	4a17      	ldr	r2, [pc, #92]	@ (80009cc <MX_GPIO_Init+0xd0>)
 8000970:	f043 0302 	orr.w	r3, r3, #2
 8000974:	6313      	str	r3, [r2, #48]	@ 0x30
 8000976:	4b15      	ldr	r3, [pc, #84]	@ (80009cc <MX_GPIO_Init+0xd0>)
 8000978:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800097a:	f003 0302 	and.w	r3, r3, #2
 800097e:	607b      	str	r3, [r7, #4]
 8000980:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000982:	2200      	movs	r2, #0
 8000984:	2120      	movs	r1, #32
 8000986:	4812      	ldr	r0, [pc, #72]	@ (80009d0 <MX_GPIO_Init+0xd4>)
 8000988:	f000 fca8 	bl	80012dc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800098c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000990:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000992:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000996:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000998:	2300      	movs	r3, #0
 800099a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800099c:	f107 0314 	add.w	r3, r7, #20
 80009a0:	4619      	mov	r1, r3
 80009a2:	480c      	ldr	r0, [pc, #48]	@ (80009d4 <MX_GPIO_Init+0xd8>)
 80009a4:	f000 fb16 	bl	8000fd4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80009a8:	2320      	movs	r3, #32
 80009aa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009ac:	2301      	movs	r3, #1
 80009ae:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009b0:	2300      	movs	r3, #0
 80009b2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009b4:	2300      	movs	r3, #0
 80009b6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80009b8:	f107 0314 	add.w	r3, r7, #20
 80009bc:	4619      	mov	r1, r3
 80009be:	4804      	ldr	r0, [pc, #16]	@ (80009d0 <MX_GPIO_Init+0xd4>)
 80009c0:	f000 fb08 	bl	8000fd4 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */
  /* USER CODE END MX_GPIO_Init_2 */
}
 80009c4:	bf00      	nop
 80009c6:	3728      	adds	r7, #40	@ 0x28
 80009c8:	46bd      	mov	sp, r7
 80009ca:	bd80      	pop	{r7, pc}
 80009cc:	40023800 	.word	0x40023800
 80009d0:	40020000 	.word	0x40020000
 80009d4:	40020800 	.word	0x40020800

080009d8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009d8:	b480      	push	{r7}
 80009da:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009dc:	b672      	cpsid	i
}
 80009de:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80009e0:	bf00      	nop
 80009e2:	e7fd      	b.n	80009e0 <Error_Handler+0x8>

080009e4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009e4:	b580      	push	{r7, lr}
 80009e6:	b082      	sub	sp, #8
 80009e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009ea:	2300      	movs	r3, #0
 80009ec:	607b      	str	r3, [r7, #4]
 80009ee:	4b10      	ldr	r3, [pc, #64]	@ (8000a30 <HAL_MspInit+0x4c>)
 80009f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80009f2:	4a0f      	ldr	r2, [pc, #60]	@ (8000a30 <HAL_MspInit+0x4c>)
 80009f4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80009f8:	6453      	str	r3, [r2, #68]	@ 0x44
 80009fa:	4b0d      	ldr	r3, [pc, #52]	@ (8000a30 <HAL_MspInit+0x4c>)
 80009fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80009fe:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000a02:	607b      	str	r3, [r7, #4]
 8000a04:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a06:	2300      	movs	r3, #0
 8000a08:	603b      	str	r3, [r7, #0]
 8000a0a:	4b09      	ldr	r3, [pc, #36]	@ (8000a30 <HAL_MspInit+0x4c>)
 8000a0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a0e:	4a08      	ldr	r2, [pc, #32]	@ (8000a30 <HAL_MspInit+0x4c>)
 8000a10:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000a14:	6413      	str	r3, [r2, #64]	@ 0x40
 8000a16:	4b06      	ldr	r3, [pc, #24]	@ (8000a30 <HAL_MspInit+0x4c>)
 8000a18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a1a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000a1e:	603b      	str	r3, [r7, #0]
 8000a20:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000a22:	2007      	movs	r0, #7
 8000a24:	f000 fa94 	bl	8000f50 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a28:	bf00      	nop
 8000a2a:	3708      	adds	r7, #8
 8000a2c:	46bd      	mov	sp, r7
 8000a2e:	bd80      	pop	{r7, pc}
 8000a30:	40023800 	.word	0x40023800

08000a34 <HAL_RTC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hrtc: RTC handle pointer
  * @retval None
  */
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8000a34:	b580      	push	{r7, lr}
 8000a36:	b088      	sub	sp, #32
 8000a38:	af00      	add	r7, sp, #0
 8000a3a:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000a3c:	f107 030c 	add.w	r3, r7, #12
 8000a40:	2200      	movs	r2, #0
 8000a42:	601a      	str	r2, [r3, #0]
 8000a44:	605a      	str	r2, [r3, #4]
 8000a46:	609a      	str	r2, [r3, #8]
 8000a48:	60da      	str	r2, [r3, #12]
 8000a4a:	611a      	str	r2, [r3, #16]
  if(hrtc->Instance==RTC)
 8000a4c:	687b      	ldr	r3, [r7, #4]
 8000a4e:	681b      	ldr	r3, [r3, #0]
 8000a50:	4a10      	ldr	r2, [pc, #64]	@ (8000a94 <HAL_RTC_MspInit+0x60>)
 8000a52:	4293      	cmp	r3, r2
 8000a54:	d119      	bne.n	8000a8a <HAL_RTC_MspInit+0x56>

    /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8000a56:	2302      	movs	r3, #2
 8000a58:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8000a5a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000a5e:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000a60:	f107 030c 	add.w	r3, r7, #12
 8000a64:	4618      	mov	r0, r3
 8000a66:	f001 f943 	bl	8001cf0 <HAL_RCCEx_PeriphCLKConfig>
 8000a6a:	4603      	mov	r3, r0
 8000a6c:	2b00      	cmp	r3, #0
 8000a6e:	d001      	beq.n	8000a74 <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 8000a70:	f7ff ffb2 	bl	80009d8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000a74:	4b08      	ldr	r3, [pc, #32]	@ (8000a98 <HAL_RTC_MspInit+0x64>)
 8000a76:	2201      	movs	r2, #1
 8000a78:	601a      	str	r2, [r3, #0]
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_WKUP_IRQn, 0, 0);
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	2100      	movs	r1, #0
 8000a7e:	2003      	movs	r0, #3
 8000a80:	f000 fa71 	bl	8000f66 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_WKUP_IRQn);
 8000a84:	2003      	movs	r0, #3
 8000a86:	f000 fa8a 	bl	8000f9e <HAL_NVIC_EnableIRQ>

    /* USER CODE END RTC_MspInit 1 */

  }

}
 8000a8a:	bf00      	nop
 8000a8c:	3720      	adds	r7, #32
 8000a8e:	46bd      	mov	sp, r7
 8000a90:	bd80      	pop	{r7, pc}
 8000a92:	bf00      	nop
 8000a94:	40002800 	.word	0x40002800
 8000a98:	42470e3c 	.word	0x42470e3c

08000a9c <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	b08a      	sub	sp, #40	@ 0x28
 8000aa0:	af00      	add	r7, sp, #0
 8000aa2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000aa4:	f107 0314 	add.w	r3, r7, #20
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	601a      	str	r2, [r3, #0]
 8000aac:	605a      	str	r2, [r3, #4]
 8000aae:	609a      	str	r2, [r3, #8]
 8000ab0:	60da      	str	r2, [r3, #12]
 8000ab2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	681b      	ldr	r3, [r3, #0]
 8000ab8:	4a19      	ldr	r2, [pc, #100]	@ (8000b20 <HAL_UART_MspInit+0x84>)
 8000aba:	4293      	cmp	r3, r2
 8000abc:	d12b      	bne.n	8000b16 <HAL_UART_MspInit+0x7a>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000abe:	2300      	movs	r3, #0
 8000ac0:	613b      	str	r3, [r7, #16]
 8000ac2:	4b18      	ldr	r3, [pc, #96]	@ (8000b24 <HAL_UART_MspInit+0x88>)
 8000ac4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ac6:	4a17      	ldr	r2, [pc, #92]	@ (8000b24 <HAL_UART_MspInit+0x88>)
 8000ac8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000acc:	6413      	str	r3, [r2, #64]	@ 0x40
 8000ace:	4b15      	ldr	r3, [pc, #84]	@ (8000b24 <HAL_UART_MspInit+0x88>)
 8000ad0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ad2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000ad6:	613b      	str	r3, [r7, #16]
 8000ad8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ada:	2300      	movs	r3, #0
 8000adc:	60fb      	str	r3, [r7, #12]
 8000ade:	4b11      	ldr	r3, [pc, #68]	@ (8000b24 <HAL_UART_MspInit+0x88>)
 8000ae0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ae2:	4a10      	ldr	r2, [pc, #64]	@ (8000b24 <HAL_UART_MspInit+0x88>)
 8000ae4:	f043 0301 	orr.w	r3, r3, #1
 8000ae8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000aea:	4b0e      	ldr	r3, [pc, #56]	@ (8000b24 <HAL_UART_MspInit+0x88>)
 8000aec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000aee:	f003 0301 	and.w	r3, r3, #1
 8000af2:	60fb      	str	r3, [r7, #12]
 8000af4:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000af6:	230c      	movs	r3, #12
 8000af8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000afa:	2302      	movs	r3, #2
 8000afc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000afe:	2300      	movs	r3, #0
 8000b00:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b02:	2300      	movs	r3, #0
 8000b04:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000b06:	2307      	movs	r3, #7
 8000b08:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b0a:	f107 0314 	add.w	r3, r7, #20
 8000b0e:	4619      	mov	r1, r3
 8000b10:	4805      	ldr	r0, [pc, #20]	@ (8000b28 <HAL_UART_MspInit+0x8c>)
 8000b12:	f000 fa5f 	bl	8000fd4 <HAL_GPIO_Init>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 8000b16:	bf00      	nop
 8000b18:	3728      	adds	r7, #40	@ 0x28
 8000b1a:	46bd      	mov	sp, r7
 8000b1c:	bd80      	pop	{r7, pc}
 8000b1e:	bf00      	nop
 8000b20:	40004400 	.word	0x40004400
 8000b24:	40023800 	.word	0x40023800
 8000b28:	40020000 	.word	0x40020000

08000b2c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b2c:	b480      	push	{r7}
 8000b2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000b30:	bf00      	nop
 8000b32:	e7fd      	b.n	8000b30 <NMI_Handler+0x4>

08000b34 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b34:	b480      	push	{r7}
 8000b36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b38:	bf00      	nop
 8000b3a:	e7fd      	b.n	8000b38 <HardFault_Handler+0x4>

08000b3c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b3c:	b480      	push	{r7}
 8000b3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b40:	bf00      	nop
 8000b42:	e7fd      	b.n	8000b40 <MemManage_Handler+0x4>

08000b44 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b44:	b480      	push	{r7}
 8000b46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b48:	bf00      	nop
 8000b4a:	e7fd      	b.n	8000b48 <BusFault_Handler+0x4>

08000b4c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b4c:	b480      	push	{r7}
 8000b4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b50:	bf00      	nop
 8000b52:	e7fd      	b.n	8000b50 <UsageFault_Handler+0x4>

08000b54 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b54:	b480      	push	{r7}
 8000b56:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b58:	bf00      	nop
 8000b5a:	46bd      	mov	sp, r7
 8000b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b60:	4770      	bx	lr

08000b62 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b62:	b480      	push	{r7}
 8000b64:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b66:	bf00      	nop
 8000b68:	46bd      	mov	sp, r7
 8000b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b6e:	4770      	bx	lr

08000b70 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b70:	b480      	push	{r7}
 8000b72:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b74:	bf00      	nop
 8000b76:	46bd      	mov	sp, r7
 8000b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b7c:	4770      	bx	lr

08000b7e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b7e:	b580      	push	{r7, lr}
 8000b80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b82:	f000 f8d1 	bl	8000d28 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b86:	bf00      	nop
 8000b88:	bd80      	pop	{r7, pc}
	...

08000b8c <RTC_WKUP_IRQHandler>:

/**
  * @brief This function handles RTC wake-up interrupt through EXTI line 22.
  */
void RTC_WKUP_IRQHandler(void)
{
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_WKUP_IRQn 0 */

  /* USER CODE END RTC_WKUP_IRQn 0 */
  HAL_RTCEx_WakeUpTimerIRQHandler(&hrtc);
 8000b90:	4802      	ldr	r0, [pc, #8]	@ (8000b9c <RTC_WKUP_IRQHandler+0x10>)
 8000b92:	f001 fcf7 	bl	8002584 <HAL_RTCEx_WakeUpTimerIRQHandler>
  /* USER CODE BEGIN RTC_WKUP_IRQn 1 */

  /* USER CODE END RTC_WKUP_IRQn 1 */
}
 8000b96:	bf00      	nop
 8000b98:	bd80      	pop	{r7, pc}
 8000b9a:	bf00      	nop
 8000b9c:	20000078 	.word	0x20000078

08000ba0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	b086      	sub	sp, #24
 8000ba4:	af00      	add	r7, sp, #0
 8000ba6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000ba8:	4a14      	ldr	r2, [pc, #80]	@ (8000bfc <_sbrk+0x5c>)
 8000baa:	4b15      	ldr	r3, [pc, #84]	@ (8000c00 <_sbrk+0x60>)
 8000bac:	1ad3      	subs	r3, r2, r3
 8000bae:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000bb0:	697b      	ldr	r3, [r7, #20]
 8000bb2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000bb4:	4b13      	ldr	r3, [pc, #76]	@ (8000c04 <_sbrk+0x64>)
 8000bb6:	681b      	ldr	r3, [r3, #0]
 8000bb8:	2b00      	cmp	r3, #0
 8000bba:	d102      	bne.n	8000bc2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000bbc:	4b11      	ldr	r3, [pc, #68]	@ (8000c04 <_sbrk+0x64>)
 8000bbe:	4a12      	ldr	r2, [pc, #72]	@ (8000c08 <_sbrk+0x68>)
 8000bc0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000bc2:	4b10      	ldr	r3, [pc, #64]	@ (8000c04 <_sbrk+0x64>)
 8000bc4:	681a      	ldr	r2, [r3, #0]
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	4413      	add	r3, r2
 8000bca:	693a      	ldr	r2, [r7, #16]
 8000bcc:	429a      	cmp	r2, r3
 8000bce:	d207      	bcs.n	8000be0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000bd0:	f002 f93c 	bl	8002e4c <__errno>
 8000bd4:	4603      	mov	r3, r0
 8000bd6:	220c      	movs	r2, #12
 8000bd8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000bda:	f04f 33ff 	mov.w	r3, #4294967295
 8000bde:	e009      	b.n	8000bf4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000be0:	4b08      	ldr	r3, [pc, #32]	@ (8000c04 <_sbrk+0x64>)
 8000be2:	681b      	ldr	r3, [r3, #0]
 8000be4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000be6:	4b07      	ldr	r3, [pc, #28]	@ (8000c04 <_sbrk+0x64>)
 8000be8:	681a      	ldr	r2, [r3, #0]
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	4413      	add	r3, r2
 8000bee:	4a05      	ldr	r2, [pc, #20]	@ (8000c04 <_sbrk+0x64>)
 8000bf0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000bf2:	68fb      	ldr	r3, [r7, #12]
}
 8000bf4:	4618      	mov	r0, r3
 8000bf6:	3718      	adds	r7, #24
 8000bf8:	46bd      	mov	sp, r7
 8000bfa:	bd80      	pop	{r7, pc}
 8000bfc:	20018000 	.word	0x20018000
 8000c00:	00000400 	.word	0x00000400
 8000c04:	200000e0 	.word	0x200000e0
 8000c08:	20000230 	.word	0x20000230

08000c0c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c0c:	b480      	push	{r7}
 8000c0e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000c10:	4b06      	ldr	r3, [pc, #24]	@ (8000c2c <SystemInit+0x20>)
 8000c12:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000c16:	4a05      	ldr	r2, [pc, #20]	@ (8000c2c <SystemInit+0x20>)
 8000c18:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000c1c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c20:	bf00      	nop
 8000c22:	46bd      	mov	sp, r7
 8000c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c28:	4770      	bx	lr
 8000c2a:	bf00      	nop
 8000c2c:	e000ed00 	.word	0xe000ed00

08000c30 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000c30:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000c68 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000c34:	480d      	ldr	r0, [pc, #52]	@ (8000c6c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000c36:	490e      	ldr	r1, [pc, #56]	@ (8000c70 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000c38:	4a0e      	ldr	r2, [pc, #56]	@ (8000c74 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000c3a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c3c:	e002      	b.n	8000c44 <LoopCopyDataInit>

08000c3e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c3e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c40:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c42:	3304      	adds	r3, #4

08000c44 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c44:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c46:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c48:	d3f9      	bcc.n	8000c3e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c4a:	4a0b      	ldr	r2, [pc, #44]	@ (8000c78 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000c4c:	4c0b      	ldr	r4, [pc, #44]	@ (8000c7c <LoopFillZerobss+0x26>)
  movs r3, #0
 8000c4e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c50:	e001      	b.n	8000c56 <LoopFillZerobss>

08000c52 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c52:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c54:	3204      	adds	r2, #4

08000c56 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c56:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c58:	d3fb      	bcc.n	8000c52 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000c5a:	f7ff ffd7 	bl	8000c0c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000c5e:	f002 f8fb 	bl	8002e58 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000c62:	f7ff fcab 	bl	80005bc <main>
  bx  lr    
 8000c66:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000c68:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000c6c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c70:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8000c74:	08003808 	.word	0x08003808
  ldr r2, =_sbss
 8000c78:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8000c7c:	20000230 	.word	0x20000230

08000c80 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000c80:	e7fe      	b.n	8000c80 <ADC_IRQHandler>
	...

08000c84 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c84:	b580      	push	{r7, lr}
 8000c86:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000c88:	4b0e      	ldr	r3, [pc, #56]	@ (8000cc4 <HAL_Init+0x40>)
 8000c8a:	681b      	ldr	r3, [r3, #0]
 8000c8c:	4a0d      	ldr	r2, [pc, #52]	@ (8000cc4 <HAL_Init+0x40>)
 8000c8e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000c92:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000c94:	4b0b      	ldr	r3, [pc, #44]	@ (8000cc4 <HAL_Init+0x40>)
 8000c96:	681b      	ldr	r3, [r3, #0]
 8000c98:	4a0a      	ldr	r2, [pc, #40]	@ (8000cc4 <HAL_Init+0x40>)
 8000c9a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000c9e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ca0:	4b08      	ldr	r3, [pc, #32]	@ (8000cc4 <HAL_Init+0x40>)
 8000ca2:	681b      	ldr	r3, [r3, #0]
 8000ca4:	4a07      	ldr	r2, [pc, #28]	@ (8000cc4 <HAL_Init+0x40>)
 8000ca6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000caa:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000cac:	2003      	movs	r0, #3
 8000cae:	f000 f94f 	bl	8000f50 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000cb2:	2000      	movs	r0, #0
 8000cb4:	f000 f808 	bl	8000cc8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000cb8:	f7ff fe94 	bl	80009e4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000cbc:	2300      	movs	r3, #0
}
 8000cbe:	4618      	mov	r0, r3
 8000cc0:	bd80      	pop	{r7, pc}
 8000cc2:	bf00      	nop
 8000cc4:	40023c00 	.word	0x40023c00

08000cc8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	b082      	sub	sp, #8
 8000ccc:	af00      	add	r7, sp, #0
 8000cce:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000cd0:	4b12      	ldr	r3, [pc, #72]	@ (8000d1c <HAL_InitTick+0x54>)
 8000cd2:	681a      	ldr	r2, [r3, #0]
 8000cd4:	4b12      	ldr	r3, [pc, #72]	@ (8000d20 <HAL_InitTick+0x58>)
 8000cd6:	781b      	ldrb	r3, [r3, #0]
 8000cd8:	4619      	mov	r1, r3
 8000cda:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000cde:	fbb3 f3f1 	udiv	r3, r3, r1
 8000ce2:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ce6:	4618      	mov	r0, r3
 8000ce8:	f000 f967 	bl	8000fba <HAL_SYSTICK_Config>
 8000cec:	4603      	mov	r3, r0
 8000cee:	2b00      	cmp	r3, #0
 8000cf0:	d001      	beq.n	8000cf6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000cf2:	2301      	movs	r3, #1
 8000cf4:	e00e      	b.n	8000d14 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	2b0f      	cmp	r3, #15
 8000cfa:	d80a      	bhi.n	8000d12 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	6879      	ldr	r1, [r7, #4]
 8000d00:	f04f 30ff 	mov.w	r0, #4294967295
 8000d04:	f000 f92f 	bl	8000f66 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000d08:	4a06      	ldr	r2, [pc, #24]	@ (8000d24 <HAL_InitTick+0x5c>)
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000d0e:	2300      	movs	r3, #0
 8000d10:	e000      	b.n	8000d14 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000d12:	2301      	movs	r3, #1
}
 8000d14:	4618      	mov	r0, r3
 8000d16:	3708      	adds	r7, #8
 8000d18:	46bd      	mov	sp, r7
 8000d1a:	bd80      	pop	{r7, pc}
 8000d1c:	20000000 	.word	0x20000000
 8000d20:	20000008 	.word	0x20000008
 8000d24:	20000004 	.word	0x20000004

08000d28 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d28:	b480      	push	{r7}
 8000d2a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d2c:	4b06      	ldr	r3, [pc, #24]	@ (8000d48 <HAL_IncTick+0x20>)
 8000d2e:	781b      	ldrb	r3, [r3, #0]
 8000d30:	461a      	mov	r2, r3
 8000d32:	4b06      	ldr	r3, [pc, #24]	@ (8000d4c <HAL_IncTick+0x24>)
 8000d34:	681b      	ldr	r3, [r3, #0]
 8000d36:	4413      	add	r3, r2
 8000d38:	4a04      	ldr	r2, [pc, #16]	@ (8000d4c <HAL_IncTick+0x24>)
 8000d3a:	6013      	str	r3, [r2, #0]
}
 8000d3c:	bf00      	nop
 8000d3e:	46bd      	mov	sp, r7
 8000d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d44:	4770      	bx	lr
 8000d46:	bf00      	nop
 8000d48:	20000008 	.word	0x20000008
 8000d4c:	200000e4 	.word	0x200000e4

08000d50 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d50:	b480      	push	{r7}
 8000d52:	af00      	add	r7, sp, #0
  return uwTick;
 8000d54:	4b03      	ldr	r3, [pc, #12]	@ (8000d64 <HAL_GetTick+0x14>)
 8000d56:	681b      	ldr	r3, [r3, #0]
}
 8000d58:	4618      	mov	r0, r3
 8000d5a:	46bd      	mov	sp, r7
 8000d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d60:	4770      	bx	lr
 8000d62:	bf00      	nop
 8000d64:	200000e4 	.word	0x200000e4

08000d68 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	b084      	sub	sp, #16
 8000d6c:	af00      	add	r7, sp, #0
 8000d6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000d70:	f7ff ffee 	bl	8000d50 <HAL_GetTick>
 8000d74:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000d7a:	68fb      	ldr	r3, [r7, #12]
 8000d7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000d80:	d005      	beq.n	8000d8e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000d82:	4b0a      	ldr	r3, [pc, #40]	@ (8000dac <HAL_Delay+0x44>)
 8000d84:	781b      	ldrb	r3, [r3, #0]
 8000d86:	461a      	mov	r2, r3
 8000d88:	68fb      	ldr	r3, [r7, #12]
 8000d8a:	4413      	add	r3, r2
 8000d8c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000d8e:	bf00      	nop
 8000d90:	f7ff ffde 	bl	8000d50 <HAL_GetTick>
 8000d94:	4602      	mov	r2, r0
 8000d96:	68bb      	ldr	r3, [r7, #8]
 8000d98:	1ad3      	subs	r3, r2, r3
 8000d9a:	68fa      	ldr	r2, [r7, #12]
 8000d9c:	429a      	cmp	r2, r3
 8000d9e:	d8f7      	bhi.n	8000d90 <HAL_Delay+0x28>
  {
  }
}
 8000da0:	bf00      	nop
 8000da2:	bf00      	nop
 8000da4:	3710      	adds	r7, #16
 8000da6:	46bd      	mov	sp, r7
 8000da8:	bd80      	pop	{r7, pc}
 8000daa:	bf00      	nop
 8000dac:	20000008 	.word	0x20000008

08000db0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000db0:	b480      	push	{r7}
 8000db2:	b085      	sub	sp, #20
 8000db4:	af00      	add	r7, sp, #0
 8000db6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	f003 0307 	and.w	r3, r3, #7
 8000dbe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000dc0:	4b0c      	ldr	r3, [pc, #48]	@ (8000df4 <__NVIC_SetPriorityGrouping+0x44>)
 8000dc2:	68db      	ldr	r3, [r3, #12]
 8000dc4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000dc6:	68ba      	ldr	r2, [r7, #8]
 8000dc8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000dcc:	4013      	ands	r3, r2
 8000dce:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000dd0:	68fb      	ldr	r3, [r7, #12]
 8000dd2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000dd4:	68bb      	ldr	r3, [r7, #8]
 8000dd6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000dd8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000ddc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000de0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000de2:	4a04      	ldr	r2, [pc, #16]	@ (8000df4 <__NVIC_SetPriorityGrouping+0x44>)
 8000de4:	68bb      	ldr	r3, [r7, #8]
 8000de6:	60d3      	str	r3, [r2, #12]
}
 8000de8:	bf00      	nop
 8000dea:	3714      	adds	r7, #20
 8000dec:	46bd      	mov	sp, r7
 8000dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df2:	4770      	bx	lr
 8000df4:	e000ed00 	.word	0xe000ed00

08000df8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000df8:	b480      	push	{r7}
 8000dfa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000dfc:	4b04      	ldr	r3, [pc, #16]	@ (8000e10 <__NVIC_GetPriorityGrouping+0x18>)
 8000dfe:	68db      	ldr	r3, [r3, #12]
 8000e00:	0a1b      	lsrs	r3, r3, #8
 8000e02:	f003 0307 	and.w	r3, r3, #7
}
 8000e06:	4618      	mov	r0, r3
 8000e08:	46bd      	mov	sp, r7
 8000e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e0e:	4770      	bx	lr
 8000e10:	e000ed00 	.word	0xe000ed00

08000e14 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e14:	b480      	push	{r7}
 8000e16:	b083      	sub	sp, #12
 8000e18:	af00      	add	r7, sp, #0
 8000e1a:	4603      	mov	r3, r0
 8000e1c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e22:	2b00      	cmp	r3, #0
 8000e24:	db0b      	blt.n	8000e3e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000e26:	79fb      	ldrb	r3, [r7, #7]
 8000e28:	f003 021f 	and.w	r2, r3, #31
 8000e2c:	4907      	ldr	r1, [pc, #28]	@ (8000e4c <__NVIC_EnableIRQ+0x38>)
 8000e2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e32:	095b      	lsrs	r3, r3, #5
 8000e34:	2001      	movs	r0, #1
 8000e36:	fa00 f202 	lsl.w	r2, r0, r2
 8000e3a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000e3e:	bf00      	nop
 8000e40:	370c      	adds	r7, #12
 8000e42:	46bd      	mov	sp, r7
 8000e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e48:	4770      	bx	lr
 8000e4a:	bf00      	nop
 8000e4c:	e000e100 	.word	0xe000e100

08000e50 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e50:	b480      	push	{r7}
 8000e52:	b083      	sub	sp, #12
 8000e54:	af00      	add	r7, sp, #0
 8000e56:	4603      	mov	r3, r0
 8000e58:	6039      	str	r1, [r7, #0]
 8000e5a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e5c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e60:	2b00      	cmp	r3, #0
 8000e62:	db0a      	blt.n	8000e7a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e64:	683b      	ldr	r3, [r7, #0]
 8000e66:	b2da      	uxtb	r2, r3
 8000e68:	490c      	ldr	r1, [pc, #48]	@ (8000e9c <__NVIC_SetPriority+0x4c>)
 8000e6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e6e:	0112      	lsls	r2, r2, #4
 8000e70:	b2d2      	uxtb	r2, r2
 8000e72:	440b      	add	r3, r1
 8000e74:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e78:	e00a      	b.n	8000e90 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e7a:	683b      	ldr	r3, [r7, #0]
 8000e7c:	b2da      	uxtb	r2, r3
 8000e7e:	4908      	ldr	r1, [pc, #32]	@ (8000ea0 <__NVIC_SetPriority+0x50>)
 8000e80:	79fb      	ldrb	r3, [r7, #7]
 8000e82:	f003 030f 	and.w	r3, r3, #15
 8000e86:	3b04      	subs	r3, #4
 8000e88:	0112      	lsls	r2, r2, #4
 8000e8a:	b2d2      	uxtb	r2, r2
 8000e8c:	440b      	add	r3, r1
 8000e8e:	761a      	strb	r2, [r3, #24]
}
 8000e90:	bf00      	nop
 8000e92:	370c      	adds	r7, #12
 8000e94:	46bd      	mov	sp, r7
 8000e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e9a:	4770      	bx	lr
 8000e9c:	e000e100 	.word	0xe000e100
 8000ea0:	e000ed00 	.word	0xe000ed00

08000ea4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ea4:	b480      	push	{r7}
 8000ea6:	b089      	sub	sp, #36	@ 0x24
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	60f8      	str	r0, [r7, #12]
 8000eac:	60b9      	str	r1, [r7, #8]
 8000eae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000eb0:	68fb      	ldr	r3, [r7, #12]
 8000eb2:	f003 0307 	and.w	r3, r3, #7
 8000eb6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000eb8:	69fb      	ldr	r3, [r7, #28]
 8000eba:	f1c3 0307 	rsb	r3, r3, #7
 8000ebe:	2b04      	cmp	r3, #4
 8000ec0:	bf28      	it	cs
 8000ec2:	2304      	movcs	r3, #4
 8000ec4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000ec6:	69fb      	ldr	r3, [r7, #28]
 8000ec8:	3304      	adds	r3, #4
 8000eca:	2b06      	cmp	r3, #6
 8000ecc:	d902      	bls.n	8000ed4 <NVIC_EncodePriority+0x30>
 8000ece:	69fb      	ldr	r3, [r7, #28]
 8000ed0:	3b03      	subs	r3, #3
 8000ed2:	e000      	b.n	8000ed6 <NVIC_EncodePriority+0x32>
 8000ed4:	2300      	movs	r3, #0
 8000ed6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ed8:	f04f 32ff 	mov.w	r2, #4294967295
 8000edc:	69bb      	ldr	r3, [r7, #24]
 8000ede:	fa02 f303 	lsl.w	r3, r2, r3
 8000ee2:	43da      	mvns	r2, r3
 8000ee4:	68bb      	ldr	r3, [r7, #8]
 8000ee6:	401a      	ands	r2, r3
 8000ee8:	697b      	ldr	r3, [r7, #20]
 8000eea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000eec:	f04f 31ff 	mov.w	r1, #4294967295
 8000ef0:	697b      	ldr	r3, [r7, #20]
 8000ef2:	fa01 f303 	lsl.w	r3, r1, r3
 8000ef6:	43d9      	mvns	r1, r3
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000efc:	4313      	orrs	r3, r2
         );
}
 8000efe:	4618      	mov	r0, r3
 8000f00:	3724      	adds	r7, #36	@ 0x24
 8000f02:	46bd      	mov	sp, r7
 8000f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f08:	4770      	bx	lr
	...

08000f0c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	b082      	sub	sp, #8
 8000f10:	af00      	add	r7, sp, #0
 8000f12:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	3b01      	subs	r3, #1
 8000f18:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000f1c:	d301      	bcc.n	8000f22 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000f1e:	2301      	movs	r3, #1
 8000f20:	e00f      	b.n	8000f42 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f22:	4a0a      	ldr	r2, [pc, #40]	@ (8000f4c <SysTick_Config+0x40>)
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	3b01      	subs	r3, #1
 8000f28:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000f2a:	210f      	movs	r1, #15
 8000f2c:	f04f 30ff 	mov.w	r0, #4294967295
 8000f30:	f7ff ff8e 	bl	8000e50 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000f34:	4b05      	ldr	r3, [pc, #20]	@ (8000f4c <SysTick_Config+0x40>)
 8000f36:	2200      	movs	r2, #0
 8000f38:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000f3a:	4b04      	ldr	r3, [pc, #16]	@ (8000f4c <SysTick_Config+0x40>)
 8000f3c:	2207      	movs	r2, #7
 8000f3e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000f40:	2300      	movs	r3, #0
}
 8000f42:	4618      	mov	r0, r3
 8000f44:	3708      	adds	r7, #8
 8000f46:	46bd      	mov	sp, r7
 8000f48:	bd80      	pop	{r7, pc}
 8000f4a:	bf00      	nop
 8000f4c:	e000e010 	.word	0xe000e010

08000f50 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f50:	b580      	push	{r7, lr}
 8000f52:	b082      	sub	sp, #8
 8000f54:	af00      	add	r7, sp, #0
 8000f56:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f58:	6878      	ldr	r0, [r7, #4]
 8000f5a:	f7ff ff29 	bl	8000db0 <__NVIC_SetPriorityGrouping>
}
 8000f5e:	bf00      	nop
 8000f60:	3708      	adds	r7, #8
 8000f62:	46bd      	mov	sp, r7
 8000f64:	bd80      	pop	{r7, pc}

08000f66 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000f66:	b580      	push	{r7, lr}
 8000f68:	b086      	sub	sp, #24
 8000f6a:	af00      	add	r7, sp, #0
 8000f6c:	4603      	mov	r3, r0
 8000f6e:	60b9      	str	r1, [r7, #8]
 8000f70:	607a      	str	r2, [r7, #4]
 8000f72:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000f74:	2300      	movs	r3, #0
 8000f76:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000f78:	f7ff ff3e 	bl	8000df8 <__NVIC_GetPriorityGrouping>
 8000f7c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f7e:	687a      	ldr	r2, [r7, #4]
 8000f80:	68b9      	ldr	r1, [r7, #8]
 8000f82:	6978      	ldr	r0, [r7, #20]
 8000f84:	f7ff ff8e 	bl	8000ea4 <NVIC_EncodePriority>
 8000f88:	4602      	mov	r2, r0
 8000f8a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f8e:	4611      	mov	r1, r2
 8000f90:	4618      	mov	r0, r3
 8000f92:	f7ff ff5d 	bl	8000e50 <__NVIC_SetPriority>
}
 8000f96:	bf00      	nop
 8000f98:	3718      	adds	r7, #24
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	bd80      	pop	{r7, pc}

08000f9e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f9e:	b580      	push	{r7, lr}
 8000fa0:	b082      	sub	sp, #8
 8000fa2:	af00      	add	r7, sp, #0
 8000fa4:	4603      	mov	r3, r0
 8000fa6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000fa8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fac:	4618      	mov	r0, r3
 8000fae:	f7ff ff31 	bl	8000e14 <__NVIC_EnableIRQ>
}
 8000fb2:	bf00      	nop
 8000fb4:	3708      	adds	r7, #8
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	bd80      	pop	{r7, pc}

08000fba <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000fba:	b580      	push	{r7, lr}
 8000fbc:	b082      	sub	sp, #8
 8000fbe:	af00      	add	r7, sp, #0
 8000fc0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000fc2:	6878      	ldr	r0, [r7, #4]
 8000fc4:	f7ff ffa2 	bl	8000f0c <SysTick_Config>
 8000fc8:	4603      	mov	r3, r0
}
 8000fca:	4618      	mov	r0, r3
 8000fcc:	3708      	adds	r7, #8
 8000fce:	46bd      	mov	sp, r7
 8000fd0:	bd80      	pop	{r7, pc}
	...

08000fd4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000fd4:	b480      	push	{r7}
 8000fd6:	b089      	sub	sp, #36	@ 0x24
 8000fd8:	af00      	add	r7, sp, #0
 8000fda:	6078      	str	r0, [r7, #4]
 8000fdc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000fde:	2300      	movs	r3, #0
 8000fe0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000fea:	2300      	movs	r3, #0
 8000fec:	61fb      	str	r3, [r7, #28]
 8000fee:	e159      	b.n	80012a4 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000ff0:	2201      	movs	r2, #1
 8000ff2:	69fb      	ldr	r3, [r7, #28]
 8000ff4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ff8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000ffa:	683b      	ldr	r3, [r7, #0]
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	697a      	ldr	r2, [r7, #20]
 8001000:	4013      	ands	r3, r2
 8001002:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001004:	693a      	ldr	r2, [r7, #16]
 8001006:	697b      	ldr	r3, [r7, #20]
 8001008:	429a      	cmp	r2, r3
 800100a:	f040 8148 	bne.w	800129e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800100e:	683b      	ldr	r3, [r7, #0]
 8001010:	685b      	ldr	r3, [r3, #4]
 8001012:	f003 0303 	and.w	r3, r3, #3
 8001016:	2b01      	cmp	r3, #1
 8001018:	d005      	beq.n	8001026 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800101a:	683b      	ldr	r3, [r7, #0]
 800101c:	685b      	ldr	r3, [r3, #4]
 800101e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001022:	2b02      	cmp	r3, #2
 8001024:	d130      	bne.n	8001088 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	689b      	ldr	r3, [r3, #8]
 800102a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800102c:	69fb      	ldr	r3, [r7, #28]
 800102e:	005b      	lsls	r3, r3, #1
 8001030:	2203      	movs	r2, #3
 8001032:	fa02 f303 	lsl.w	r3, r2, r3
 8001036:	43db      	mvns	r3, r3
 8001038:	69ba      	ldr	r2, [r7, #24]
 800103a:	4013      	ands	r3, r2
 800103c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800103e:	683b      	ldr	r3, [r7, #0]
 8001040:	68da      	ldr	r2, [r3, #12]
 8001042:	69fb      	ldr	r3, [r7, #28]
 8001044:	005b      	lsls	r3, r3, #1
 8001046:	fa02 f303 	lsl.w	r3, r2, r3
 800104a:	69ba      	ldr	r2, [r7, #24]
 800104c:	4313      	orrs	r3, r2
 800104e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	69ba      	ldr	r2, [r7, #24]
 8001054:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	685b      	ldr	r3, [r3, #4]
 800105a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800105c:	2201      	movs	r2, #1
 800105e:	69fb      	ldr	r3, [r7, #28]
 8001060:	fa02 f303 	lsl.w	r3, r2, r3
 8001064:	43db      	mvns	r3, r3
 8001066:	69ba      	ldr	r2, [r7, #24]
 8001068:	4013      	ands	r3, r2
 800106a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800106c:	683b      	ldr	r3, [r7, #0]
 800106e:	685b      	ldr	r3, [r3, #4]
 8001070:	091b      	lsrs	r3, r3, #4
 8001072:	f003 0201 	and.w	r2, r3, #1
 8001076:	69fb      	ldr	r3, [r7, #28]
 8001078:	fa02 f303 	lsl.w	r3, r2, r3
 800107c:	69ba      	ldr	r2, [r7, #24]
 800107e:	4313      	orrs	r3, r2
 8001080:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	69ba      	ldr	r2, [r7, #24]
 8001086:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001088:	683b      	ldr	r3, [r7, #0]
 800108a:	685b      	ldr	r3, [r3, #4]
 800108c:	f003 0303 	and.w	r3, r3, #3
 8001090:	2b03      	cmp	r3, #3
 8001092:	d017      	beq.n	80010c4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	68db      	ldr	r3, [r3, #12]
 8001098:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800109a:	69fb      	ldr	r3, [r7, #28]
 800109c:	005b      	lsls	r3, r3, #1
 800109e:	2203      	movs	r2, #3
 80010a0:	fa02 f303 	lsl.w	r3, r2, r3
 80010a4:	43db      	mvns	r3, r3
 80010a6:	69ba      	ldr	r2, [r7, #24]
 80010a8:	4013      	ands	r3, r2
 80010aa:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80010ac:	683b      	ldr	r3, [r7, #0]
 80010ae:	689a      	ldr	r2, [r3, #8]
 80010b0:	69fb      	ldr	r3, [r7, #28]
 80010b2:	005b      	lsls	r3, r3, #1
 80010b4:	fa02 f303 	lsl.w	r3, r2, r3
 80010b8:	69ba      	ldr	r2, [r7, #24]
 80010ba:	4313      	orrs	r3, r2
 80010bc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	69ba      	ldr	r2, [r7, #24]
 80010c2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80010c4:	683b      	ldr	r3, [r7, #0]
 80010c6:	685b      	ldr	r3, [r3, #4]
 80010c8:	f003 0303 	and.w	r3, r3, #3
 80010cc:	2b02      	cmp	r3, #2
 80010ce:	d123      	bne.n	8001118 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80010d0:	69fb      	ldr	r3, [r7, #28]
 80010d2:	08da      	lsrs	r2, r3, #3
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	3208      	adds	r2, #8
 80010d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80010dc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80010de:	69fb      	ldr	r3, [r7, #28]
 80010e0:	f003 0307 	and.w	r3, r3, #7
 80010e4:	009b      	lsls	r3, r3, #2
 80010e6:	220f      	movs	r2, #15
 80010e8:	fa02 f303 	lsl.w	r3, r2, r3
 80010ec:	43db      	mvns	r3, r3
 80010ee:	69ba      	ldr	r2, [r7, #24]
 80010f0:	4013      	ands	r3, r2
 80010f2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80010f4:	683b      	ldr	r3, [r7, #0]
 80010f6:	691a      	ldr	r2, [r3, #16]
 80010f8:	69fb      	ldr	r3, [r7, #28]
 80010fa:	f003 0307 	and.w	r3, r3, #7
 80010fe:	009b      	lsls	r3, r3, #2
 8001100:	fa02 f303 	lsl.w	r3, r2, r3
 8001104:	69ba      	ldr	r2, [r7, #24]
 8001106:	4313      	orrs	r3, r2
 8001108:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800110a:	69fb      	ldr	r3, [r7, #28]
 800110c:	08da      	lsrs	r2, r3, #3
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	3208      	adds	r2, #8
 8001112:	69b9      	ldr	r1, [r7, #24]
 8001114:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800111e:	69fb      	ldr	r3, [r7, #28]
 8001120:	005b      	lsls	r3, r3, #1
 8001122:	2203      	movs	r2, #3
 8001124:	fa02 f303 	lsl.w	r3, r2, r3
 8001128:	43db      	mvns	r3, r3
 800112a:	69ba      	ldr	r2, [r7, #24]
 800112c:	4013      	ands	r3, r2
 800112e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001130:	683b      	ldr	r3, [r7, #0]
 8001132:	685b      	ldr	r3, [r3, #4]
 8001134:	f003 0203 	and.w	r2, r3, #3
 8001138:	69fb      	ldr	r3, [r7, #28]
 800113a:	005b      	lsls	r3, r3, #1
 800113c:	fa02 f303 	lsl.w	r3, r2, r3
 8001140:	69ba      	ldr	r2, [r7, #24]
 8001142:	4313      	orrs	r3, r2
 8001144:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	69ba      	ldr	r2, [r7, #24]
 800114a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800114c:	683b      	ldr	r3, [r7, #0]
 800114e:	685b      	ldr	r3, [r3, #4]
 8001150:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001154:	2b00      	cmp	r3, #0
 8001156:	f000 80a2 	beq.w	800129e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800115a:	2300      	movs	r3, #0
 800115c:	60fb      	str	r3, [r7, #12]
 800115e:	4b57      	ldr	r3, [pc, #348]	@ (80012bc <HAL_GPIO_Init+0x2e8>)
 8001160:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001162:	4a56      	ldr	r2, [pc, #344]	@ (80012bc <HAL_GPIO_Init+0x2e8>)
 8001164:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001168:	6453      	str	r3, [r2, #68]	@ 0x44
 800116a:	4b54      	ldr	r3, [pc, #336]	@ (80012bc <HAL_GPIO_Init+0x2e8>)
 800116c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800116e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001172:	60fb      	str	r3, [r7, #12]
 8001174:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001176:	4a52      	ldr	r2, [pc, #328]	@ (80012c0 <HAL_GPIO_Init+0x2ec>)
 8001178:	69fb      	ldr	r3, [r7, #28]
 800117a:	089b      	lsrs	r3, r3, #2
 800117c:	3302      	adds	r3, #2
 800117e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001182:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001184:	69fb      	ldr	r3, [r7, #28]
 8001186:	f003 0303 	and.w	r3, r3, #3
 800118a:	009b      	lsls	r3, r3, #2
 800118c:	220f      	movs	r2, #15
 800118e:	fa02 f303 	lsl.w	r3, r2, r3
 8001192:	43db      	mvns	r3, r3
 8001194:	69ba      	ldr	r2, [r7, #24]
 8001196:	4013      	ands	r3, r2
 8001198:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	4a49      	ldr	r2, [pc, #292]	@ (80012c4 <HAL_GPIO_Init+0x2f0>)
 800119e:	4293      	cmp	r3, r2
 80011a0:	d019      	beq.n	80011d6 <HAL_GPIO_Init+0x202>
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	4a48      	ldr	r2, [pc, #288]	@ (80012c8 <HAL_GPIO_Init+0x2f4>)
 80011a6:	4293      	cmp	r3, r2
 80011a8:	d013      	beq.n	80011d2 <HAL_GPIO_Init+0x1fe>
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	4a47      	ldr	r2, [pc, #284]	@ (80012cc <HAL_GPIO_Init+0x2f8>)
 80011ae:	4293      	cmp	r3, r2
 80011b0:	d00d      	beq.n	80011ce <HAL_GPIO_Init+0x1fa>
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	4a46      	ldr	r2, [pc, #280]	@ (80012d0 <HAL_GPIO_Init+0x2fc>)
 80011b6:	4293      	cmp	r3, r2
 80011b8:	d007      	beq.n	80011ca <HAL_GPIO_Init+0x1f6>
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	4a45      	ldr	r2, [pc, #276]	@ (80012d4 <HAL_GPIO_Init+0x300>)
 80011be:	4293      	cmp	r3, r2
 80011c0:	d101      	bne.n	80011c6 <HAL_GPIO_Init+0x1f2>
 80011c2:	2304      	movs	r3, #4
 80011c4:	e008      	b.n	80011d8 <HAL_GPIO_Init+0x204>
 80011c6:	2307      	movs	r3, #7
 80011c8:	e006      	b.n	80011d8 <HAL_GPIO_Init+0x204>
 80011ca:	2303      	movs	r3, #3
 80011cc:	e004      	b.n	80011d8 <HAL_GPIO_Init+0x204>
 80011ce:	2302      	movs	r3, #2
 80011d0:	e002      	b.n	80011d8 <HAL_GPIO_Init+0x204>
 80011d2:	2301      	movs	r3, #1
 80011d4:	e000      	b.n	80011d8 <HAL_GPIO_Init+0x204>
 80011d6:	2300      	movs	r3, #0
 80011d8:	69fa      	ldr	r2, [r7, #28]
 80011da:	f002 0203 	and.w	r2, r2, #3
 80011de:	0092      	lsls	r2, r2, #2
 80011e0:	4093      	lsls	r3, r2
 80011e2:	69ba      	ldr	r2, [r7, #24]
 80011e4:	4313      	orrs	r3, r2
 80011e6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80011e8:	4935      	ldr	r1, [pc, #212]	@ (80012c0 <HAL_GPIO_Init+0x2ec>)
 80011ea:	69fb      	ldr	r3, [r7, #28]
 80011ec:	089b      	lsrs	r3, r3, #2
 80011ee:	3302      	adds	r3, #2
 80011f0:	69ba      	ldr	r2, [r7, #24]
 80011f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80011f6:	4b38      	ldr	r3, [pc, #224]	@ (80012d8 <HAL_GPIO_Init+0x304>)
 80011f8:	689b      	ldr	r3, [r3, #8]
 80011fa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011fc:	693b      	ldr	r3, [r7, #16]
 80011fe:	43db      	mvns	r3, r3
 8001200:	69ba      	ldr	r2, [r7, #24]
 8001202:	4013      	ands	r3, r2
 8001204:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001206:	683b      	ldr	r3, [r7, #0]
 8001208:	685b      	ldr	r3, [r3, #4]
 800120a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800120e:	2b00      	cmp	r3, #0
 8001210:	d003      	beq.n	800121a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001212:	69ba      	ldr	r2, [r7, #24]
 8001214:	693b      	ldr	r3, [r7, #16]
 8001216:	4313      	orrs	r3, r2
 8001218:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800121a:	4a2f      	ldr	r2, [pc, #188]	@ (80012d8 <HAL_GPIO_Init+0x304>)
 800121c:	69bb      	ldr	r3, [r7, #24]
 800121e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001220:	4b2d      	ldr	r3, [pc, #180]	@ (80012d8 <HAL_GPIO_Init+0x304>)
 8001222:	68db      	ldr	r3, [r3, #12]
 8001224:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001226:	693b      	ldr	r3, [r7, #16]
 8001228:	43db      	mvns	r3, r3
 800122a:	69ba      	ldr	r2, [r7, #24]
 800122c:	4013      	ands	r3, r2
 800122e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001230:	683b      	ldr	r3, [r7, #0]
 8001232:	685b      	ldr	r3, [r3, #4]
 8001234:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001238:	2b00      	cmp	r3, #0
 800123a:	d003      	beq.n	8001244 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800123c:	69ba      	ldr	r2, [r7, #24]
 800123e:	693b      	ldr	r3, [r7, #16]
 8001240:	4313      	orrs	r3, r2
 8001242:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001244:	4a24      	ldr	r2, [pc, #144]	@ (80012d8 <HAL_GPIO_Init+0x304>)
 8001246:	69bb      	ldr	r3, [r7, #24]
 8001248:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800124a:	4b23      	ldr	r3, [pc, #140]	@ (80012d8 <HAL_GPIO_Init+0x304>)
 800124c:	685b      	ldr	r3, [r3, #4]
 800124e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001250:	693b      	ldr	r3, [r7, #16]
 8001252:	43db      	mvns	r3, r3
 8001254:	69ba      	ldr	r2, [r7, #24]
 8001256:	4013      	ands	r3, r2
 8001258:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800125a:	683b      	ldr	r3, [r7, #0]
 800125c:	685b      	ldr	r3, [r3, #4]
 800125e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001262:	2b00      	cmp	r3, #0
 8001264:	d003      	beq.n	800126e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001266:	69ba      	ldr	r2, [r7, #24]
 8001268:	693b      	ldr	r3, [r7, #16]
 800126a:	4313      	orrs	r3, r2
 800126c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800126e:	4a1a      	ldr	r2, [pc, #104]	@ (80012d8 <HAL_GPIO_Init+0x304>)
 8001270:	69bb      	ldr	r3, [r7, #24]
 8001272:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001274:	4b18      	ldr	r3, [pc, #96]	@ (80012d8 <HAL_GPIO_Init+0x304>)
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800127a:	693b      	ldr	r3, [r7, #16]
 800127c:	43db      	mvns	r3, r3
 800127e:	69ba      	ldr	r2, [r7, #24]
 8001280:	4013      	ands	r3, r2
 8001282:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001284:	683b      	ldr	r3, [r7, #0]
 8001286:	685b      	ldr	r3, [r3, #4]
 8001288:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800128c:	2b00      	cmp	r3, #0
 800128e:	d003      	beq.n	8001298 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001290:	69ba      	ldr	r2, [r7, #24]
 8001292:	693b      	ldr	r3, [r7, #16]
 8001294:	4313      	orrs	r3, r2
 8001296:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001298:	4a0f      	ldr	r2, [pc, #60]	@ (80012d8 <HAL_GPIO_Init+0x304>)
 800129a:	69bb      	ldr	r3, [r7, #24]
 800129c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800129e:	69fb      	ldr	r3, [r7, #28]
 80012a0:	3301      	adds	r3, #1
 80012a2:	61fb      	str	r3, [r7, #28]
 80012a4:	69fb      	ldr	r3, [r7, #28]
 80012a6:	2b0f      	cmp	r3, #15
 80012a8:	f67f aea2 	bls.w	8000ff0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80012ac:	bf00      	nop
 80012ae:	bf00      	nop
 80012b0:	3724      	adds	r7, #36	@ 0x24
 80012b2:	46bd      	mov	sp, r7
 80012b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b8:	4770      	bx	lr
 80012ba:	bf00      	nop
 80012bc:	40023800 	.word	0x40023800
 80012c0:	40013800 	.word	0x40013800
 80012c4:	40020000 	.word	0x40020000
 80012c8:	40020400 	.word	0x40020400
 80012cc:	40020800 	.word	0x40020800
 80012d0:	40020c00 	.word	0x40020c00
 80012d4:	40021000 	.word	0x40021000
 80012d8:	40013c00 	.word	0x40013c00

080012dc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80012dc:	b480      	push	{r7}
 80012de:	b083      	sub	sp, #12
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	6078      	str	r0, [r7, #4]
 80012e4:	460b      	mov	r3, r1
 80012e6:	807b      	strh	r3, [r7, #2]
 80012e8:	4613      	mov	r3, r2
 80012ea:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80012ec:	787b      	ldrb	r3, [r7, #1]
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d003      	beq.n	80012fa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80012f2:	887a      	ldrh	r2, [r7, #2]
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80012f8:	e003      	b.n	8001302 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80012fa:	887b      	ldrh	r3, [r7, #2]
 80012fc:	041a      	lsls	r2, r3, #16
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	619a      	str	r2, [r3, #24]
}
 8001302:	bf00      	nop
 8001304:	370c      	adds	r7, #12
 8001306:	46bd      	mov	sp, r7
 8001308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800130c:	4770      	bx	lr

0800130e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800130e:	b480      	push	{r7}
 8001310:	b085      	sub	sp, #20
 8001312:	af00      	add	r7, sp, #0
 8001314:	6078      	str	r0, [r7, #4]
 8001316:	460b      	mov	r3, r1
 8001318:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	695b      	ldr	r3, [r3, #20]
 800131e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001320:	887a      	ldrh	r2, [r7, #2]
 8001322:	68fb      	ldr	r3, [r7, #12]
 8001324:	4013      	ands	r3, r2
 8001326:	041a      	lsls	r2, r3, #16
 8001328:	68fb      	ldr	r3, [r7, #12]
 800132a:	43d9      	mvns	r1, r3
 800132c:	887b      	ldrh	r3, [r7, #2]
 800132e:	400b      	ands	r3, r1
 8001330:	431a      	orrs	r2, r3
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	619a      	str	r2, [r3, #24]
}
 8001336:	bf00      	nop
 8001338:	3714      	adds	r7, #20
 800133a:	46bd      	mov	sp, r7
 800133c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001340:	4770      	bx	lr
	...

08001344 <HAL_PWR_EnableWakeUpPin>:
  *           @arg PWR_WAKEUP_PIN2 available only on STM32F410xx/STM32F446xx/STM32F412xx/STM32F413xx/STM32F423xx devices
  *           @arg PWR_WAKEUP_PIN3 available only on STM32F410xx/STM32F412xx/STM32F413xx/STM32F423xx devices
  * @retval None
  */
void HAL_PWR_EnableWakeUpPin(uint32_t WakeUpPinx)
{
 8001344:	b480      	push	{r7}
 8001346:	b083      	sub	sp, #12
 8001348:	af00      	add	r7, sp, #0
 800134a:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_PWR_WAKEUP_PIN(WakeUpPinx));

  /* Enable the wake up pin */
  SET_BIT(PWR->CSR, WakeUpPinx);
 800134c:	4b05      	ldr	r3, [pc, #20]	@ (8001364 <HAL_PWR_EnableWakeUpPin+0x20>)
 800134e:	685a      	ldr	r2, [r3, #4]
 8001350:	4904      	ldr	r1, [pc, #16]	@ (8001364 <HAL_PWR_EnableWakeUpPin+0x20>)
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	4313      	orrs	r3, r2
 8001356:	604b      	str	r3, [r1, #4]
}
 8001358:	bf00      	nop
 800135a:	370c      	adds	r7, #12
 800135c:	46bd      	mov	sp, r7
 800135e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001362:	4770      	bx	lr
 8001364:	40007000 	.word	0x40007000

08001368 <HAL_PWR_DisableWakeUpPin>:
  *           @arg PWR_WAKEUP_PIN2 available only on STM32F410xx/STM32F446xx/STM32F412xx/STM32F413xx/STM32F423xx devices
  *           @arg PWR_WAKEUP_PIN3 available only on STM32F410xx/STM32F412xx/STM32F413xx/STM32F423xx devices
  * @retval None
  */
void HAL_PWR_DisableWakeUpPin(uint32_t WakeUpPinx)
{
 8001368:	b480      	push	{r7}
 800136a:	b083      	sub	sp, #12
 800136c:	af00      	add	r7, sp, #0
 800136e:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_PWR_WAKEUP_PIN(WakeUpPinx));  

  /* Disable the wake up pin */
  CLEAR_BIT(PWR->CSR, WakeUpPinx);
 8001370:	4b06      	ldr	r3, [pc, #24]	@ (800138c <HAL_PWR_DisableWakeUpPin+0x24>)
 8001372:	685a      	ldr	r2, [r3, #4]
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	43db      	mvns	r3, r3
 8001378:	4904      	ldr	r1, [pc, #16]	@ (800138c <HAL_PWR_DisableWakeUpPin+0x24>)
 800137a:	4013      	ands	r3, r2
 800137c:	604b      	str	r3, [r1, #4]
}
 800137e:	bf00      	nop
 8001380:	370c      	adds	r7, #12
 8001382:	46bd      	mov	sp, r7
 8001384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001388:	4770      	bx	lr
 800138a:	bf00      	nop
 800138c:	40007000 	.word	0x40007000

08001390 <HAL_PWR_EnterSTANDBYMode>:
  *          - RTC_AF2 pin (PI8) if configured for tamper or time-stamp.  
  *          - WKUP pin 1 (PA0) if enabled.       
  * @retval None
  */
void HAL_PWR_EnterSTANDBYMode(void)
{
 8001390:	b480      	push	{r7}
 8001392:	af00      	add	r7, sp, #0
  /* Select Standby mode */
  SET_BIT(PWR->CR, PWR_CR_PDDS);
 8001394:	4b08      	ldr	r3, [pc, #32]	@ (80013b8 <HAL_PWR_EnterSTANDBYMode+0x28>)
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	4a07      	ldr	r2, [pc, #28]	@ (80013b8 <HAL_PWR_EnterSTANDBYMode+0x28>)
 800139a:	f043 0302 	orr.w	r3, r3, #2
 800139e:	6013      	str	r3, [r2, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 80013a0:	4b06      	ldr	r3, [pc, #24]	@ (80013bc <HAL_PWR_EnterSTANDBYMode+0x2c>)
 80013a2:	691b      	ldr	r3, [r3, #16]
 80013a4:	4a05      	ldr	r2, [pc, #20]	@ (80013bc <HAL_PWR_EnterSTANDBYMode+0x2c>)
 80013a6:	f043 0304 	orr.w	r3, r3, #4
 80013aa:	6113      	str	r3, [r2, #16]
  /* This option is used to ensure that store operations are completed */
#if defined ( __CC_ARM)
  __force_stores();
#endif
  /* Request Wait For Interrupt */
  __WFI();
 80013ac:	bf30      	wfi
}
 80013ae:	bf00      	nop
 80013b0:	46bd      	mov	sp, r7
 80013b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b6:	4770      	bx	lr
 80013b8:	40007000 	.word	0x40007000
 80013bc:	e000ed00 	.word	0xe000ed00

080013c0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80013c0:	b580      	push	{r7, lr}
 80013c2:	b086      	sub	sp, #24
 80013c4:	af00      	add	r7, sp, #0
 80013c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d101      	bne.n	80013d2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80013ce:	2301      	movs	r3, #1
 80013d0:	e267      	b.n	80018a2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	f003 0301 	and.w	r3, r3, #1
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d075      	beq.n	80014ca <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80013de:	4b88      	ldr	r3, [pc, #544]	@ (8001600 <HAL_RCC_OscConfig+0x240>)
 80013e0:	689b      	ldr	r3, [r3, #8]
 80013e2:	f003 030c 	and.w	r3, r3, #12
 80013e6:	2b04      	cmp	r3, #4
 80013e8:	d00c      	beq.n	8001404 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80013ea:	4b85      	ldr	r3, [pc, #532]	@ (8001600 <HAL_RCC_OscConfig+0x240>)
 80013ec:	689b      	ldr	r3, [r3, #8]
 80013ee:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80013f2:	2b08      	cmp	r3, #8
 80013f4:	d112      	bne.n	800141c <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80013f6:	4b82      	ldr	r3, [pc, #520]	@ (8001600 <HAL_RCC_OscConfig+0x240>)
 80013f8:	685b      	ldr	r3, [r3, #4]
 80013fa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80013fe:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001402:	d10b      	bne.n	800141c <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001404:	4b7e      	ldr	r3, [pc, #504]	@ (8001600 <HAL_RCC_OscConfig+0x240>)
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800140c:	2b00      	cmp	r3, #0
 800140e:	d05b      	beq.n	80014c8 <HAL_RCC_OscConfig+0x108>
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	685b      	ldr	r3, [r3, #4]
 8001414:	2b00      	cmp	r3, #0
 8001416:	d157      	bne.n	80014c8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001418:	2301      	movs	r3, #1
 800141a:	e242      	b.n	80018a2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	685b      	ldr	r3, [r3, #4]
 8001420:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001424:	d106      	bne.n	8001434 <HAL_RCC_OscConfig+0x74>
 8001426:	4b76      	ldr	r3, [pc, #472]	@ (8001600 <HAL_RCC_OscConfig+0x240>)
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	4a75      	ldr	r2, [pc, #468]	@ (8001600 <HAL_RCC_OscConfig+0x240>)
 800142c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001430:	6013      	str	r3, [r2, #0]
 8001432:	e01d      	b.n	8001470 <HAL_RCC_OscConfig+0xb0>
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	685b      	ldr	r3, [r3, #4]
 8001438:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800143c:	d10c      	bne.n	8001458 <HAL_RCC_OscConfig+0x98>
 800143e:	4b70      	ldr	r3, [pc, #448]	@ (8001600 <HAL_RCC_OscConfig+0x240>)
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	4a6f      	ldr	r2, [pc, #444]	@ (8001600 <HAL_RCC_OscConfig+0x240>)
 8001444:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001448:	6013      	str	r3, [r2, #0]
 800144a:	4b6d      	ldr	r3, [pc, #436]	@ (8001600 <HAL_RCC_OscConfig+0x240>)
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	4a6c      	ldr	r2, [pc, #432]	@ (8001600 <HAL_RCC_OscConfig+0x240>)
 8001450:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001454:	6013      	str	r3, [r2, #0]
 8001456:	e00b      	b.n	8001470 <HAL_RCC_OscConfig+0xb0>
 8001458:	4b69      	ldr	r3, [pc, #420]	@ (8001600 <HAL_RCC_OscConfig+0x240>)
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	4a68      	ldr	r2, [pc, #416]	@ (8001600 <HAL_RCC_OscConfig+0x240>)
 800145e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001462:	6013      	str	r3, [r2, #0]
 8001464:	4b66      	ldr	r3, [pc, #408]	@ (8001600 <HAL_RCC_OscConfig+0x240>)
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	4a65      	ldr	r2, [pc, #404]	@ (8001600 <HAL_RCC_OscConfig+0x240>)
 800146a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800146e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	685b      	ldr	r3, [r3, #4]
 8001474:	2b00      	cmp	r3, #0
 8001476:	d013      	beq.n	80014a0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001478:	f7ff fc6a 	bl	8000d50 <HAL_GetTick>
 800147c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800147e:	e008      	b.n	8001492 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001480:	f7ff fc66 	bl	8000d50 <HAL_GetTick>
 8001484:	4602      	mov	r2, r0
 8001486:	693b      	ldr	r3, [r7, #16]
 8001488:	1ad3      	subs	r3, r2, r3
 800148a:	2b64      	cmp	r3, #100	@ 0x64
 800148c:	d901      	bls.n	8001492 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800148e:	2303      	movs	r3, #3
 8001490:	e207      	b.n	80018a2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001492:	4b5b      	ldr	r3, [pc, #364]	@ (8001600 <HAL_RCC_OscConfig+0x240>)
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800149a:	2b00      	cmp	r3, #0
 800149c:	d0f0      	beq.n	8001480 <HAL_RCC_OscConfig+0xc0>
 800149e:	e014      	b.n	80014ca <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014a0:	f7ff fc56 	bl	8000d50 <HAL_GetTick>
 80014a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80014a6:	e008      	b.n	80014ba <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80014a8:	f7ff fc52 	bl	8000d50 <HAL_GetTick>
 80014ac:	4602      	mov	r2, r0
 80014ae:	693b      	ldr	r3, [r7, #16]
 80014b0:	1ad3      	subs	r3, r2, r3
 80014b2:	2b64      	cmp	r3, #100	@ 0x64
 80014b4:	d901      	bls.n	80014ba <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80014b6:	2303      	movs	r3, #3
 80014b8:	e1f3      	b.n	80018a2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80014ba:	4b51      	ldr	r3, [pc, #324]	@ (8001600 <HAL_RCC_OscConfig+0x240>)
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d1f0      	bne.n	80014a8 <HAL_RCC_OscConfig+0xe8>
 80014c6:	e000      	b.n	80014ca <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80014c8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	f003 0302 	and.w	r3, r3, #2
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d063      	beq.n	800159e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80014d6:	4b4a      	ldr	r3, [pc, #296]	@ (8001600 <HAL_RCC_OscConfig+0x240>)
 80014d8:	689b      	ldr	r3, [r3, #8]
 80014da:	f003 030c 	and.w	r3, r3, #12
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d00b      	beq.n	80014fa <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80014e2:	4b47      	ldr	r3, [pc, #284]	@ (8001600 <HAL_RCC_OscConfig+0x240>)
 80014e4:	689b      	ldr	r3, [r3, #8]
 80014e6:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80014ea:	2b08      	cmp	r3, #8
 80014ec:	d11c      	bne.n	8001528 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80014ee:	4b44      	ldr	r3, [pc, #272]	@ (8001600 <HAL_RCC_OscConfig+0x240>)
 80014f0:	685b      	ldr	r3, [r3, #4]
 80014f2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d116      	bne.n	8001528 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80014fa:	4b41      	ldr	r3, [pc, #260]	@ (8001600 <HAL_RCC_OscConfig+0x240>)
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	f003 0302 	and.w	r3, r3, #2
 8001502:	2b00      	cmp	r3, #0
 8001504:	d005      	beq.n	8001512 <HAL_RCC_OscConfig+0x152>
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	68db      	ldr	r3, [r3, #12]
 800150a:	2b01      	cmp	r3, #1
 800150c:	d001      	beq.n	8001512 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800150e:	2301      	movs	r3, #1
 8001510:	e1c7      	b.n	80018a2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001512:	4b3b      	ldr	r3, [pc, #236]	@ (8001600 <HAL_RCC_OscConfig+0x240>)
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	691b      	ldr	r3, [r3, #16]
 800151e:	00db      	lsls	r3, r3, #3
 8001520:	4937      	ldr	r1, [pc, #220]	@ (8001600 <HAL_RCC_OscConfig+0x240>)
 8001522:	4313      	orrs	r3, r2
 8001524:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001526:	e03a      	b.n	800159e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	68db      	ldr	r3, [r3, #12]
 800152c:	2b00      	cmp	r3, #0
 800152e:	d020      	beq.n	8001572 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001530:	4b34      	ldr	r3, [pc, #208]	@ (8001604 <HAL_RCC_OscConfig+0x244>)
 8001532:	2201      	movs	r2, #1
 8001534:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001536:	f7ff fc0b 	bl	8000d50 <HAL_GetTick>
 800153a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800153c:	e008      	b.n	8001550 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800153e:	f7ff fc07 	bl	8000d50 <HAL_GetTick>
 8001542:	4602      	mov	r2, r0
 8001544:	693b      	ldr	r3, [r7, #16]
 8001546:	1ad3      	subs	r3, r2, r3
 8001548:	2b02      	cmp	r3, #2
 800154a:	d901      	bls.n	8001550 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800154c:	2303      	movs	r3, #3
 800154e:	e1a8      	b.n	80018a2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001550:	4b2b      	ldr	r3, [pc, #172]	@ (8001600 <HAL_RCC_OscConfig+0x240>)
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	f003 0302 	and.w	r3, r3, #2
 8001558:	2b00      	cmp	r3, #0
 800155a:	d0f0      	beq.n	800153e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800155c:	4b28      	ldr	r3, [pc, #160]	@ (8001600 <HAL_RCC_OscConfig+0x240>)
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	691b      	ldr	r3, [r3, #16]
 8001568:	00db      	lsls	r3, r3, #3
 800156a:	4925      	ldr	r1, [pc, #148]	@ (8001600 <HAL_RCC_OscConfig+0x240>)
 800156c:	4313      	orrs	r3, r2
 800156e:	600b      	str	r3, [r1, #0]
 8001570:	e015      	b.n	800159e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001572:	4b24      	ldr	r3, [pc, #144]	@ (8001604 <HAL_RCC_OscConfig+0x244>)
 8001574:	2200      	movs	r2, #0
 8001576:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001578:	f7ff fbea 	bl	8000d50 <HAL_GetTick>
 800157c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800157e:	e008      	b.n	8001592 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001580:	f7ff fbe6 	bl	8000d50 <HAL_GetTick>
 8001584:	4602      	mov	r2, r0
 8001586:	693b      	ldr	r3, [r7, #16]
 8001588:	1ad3      	subs	r3, r2, r3
 800158a:	2b02      	cmp	r3, #2
 800158c:	d901      	bls.n	8001592 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800158e:	2303      	movs	r3, #3
 8001590:	e187      	b.n	80018a2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001592:	4b1b      	ldr	r3, [pc, #108]	@ (8001600 <HAL_RCC_OscConfig+0x240>)
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	f003 0302 	and.w	r3, r3, #2
 800159a:	2b00      	cmp	r3, #0
 800159c:	d1f0      	bne.n	8001580 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	f003 0308 	and.w	r3, r3, #8
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d036      	beq.n	8001618 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	695b      	ldr	r3, [r3, #20]
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d016      	beq.n	80015e0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80015b2:	4b15      	ldr	r3, [pc, #84]	@ (8001608 <HAL_RCC_OscConfig+0x248>)
 80015b4:	2201      	movs	r2, #1
 80015b6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80015b8:	f7ff fbca 	bl	8000d50 <HAL_GetTick>
 80015bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80015be:	e008      	b.n	80015d2 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80015c0:	f7ff fbc6 	bl	8000d50 <HAL_GetTick>
 80015c4:	4602      	mov	r2, r0
 80015c6:	693b      	ldr	r3, [r7, #16]
 80015c8:	1ad3      	subs	r3, r2, r3
 80015ca:	2b02      	cmp	r3, #2
 80015cc:	d901      	bls.n	80015d2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80015ce:	2303      	movs	r3, #3
 80015d0:	e167      	b.n	80018a2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80015d2:	4b0b      	ldr	r3, [pc, #44]	@ (8001600 <HAL_RCC_OscConfig+0x240>)
 80015d4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80015d6:	f003 0302 	and.w	r3, r3, #2
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d0f0      	beq.n	80015c0 <HAL_RCC_OscConfig+0x200>
 80015de:	e01b      	b.n	8001618 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80015e0:	4b09      	ldr	r3, [pc, #36]	@ (8001608 <HAL_RCC_OscConfig+0x248>)
 80015e2:	2200      	movs	r2, #0
 80015e4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80015e6:	f7ff fbb3 	bl	8000d50 <HAL_GetTick>
 80015ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80015ec:	e00e      	b.n	800160c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80015ee:	f7ff fbaf 	bl	8000d50 <HAL_GetTick>
 80015f2:	4602      	mov	r2, r0
 80015f4:	693b      	ldr	r3, [r7, #16]
 80015f6:	1ad3      	subs	r3, r2, r3
 80015f8:	2b02      	cmp	r3, #2
 80015fa:	d907      	bls.n	800160c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80015fc:	2303      	movs	r3, #3
 80015fe:	e150      	b.n	80018a2 <HAL_RCC_OscConfig+0x4e2>
 8001600:	40023800 	.word	0x40023800
 8001604:	42470000 	.word	0x42470000
 8001608:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800160c:	4b88      	ldr	r3, [pc, #544]	@ (8001830 <HAL_RCC_OscConfig+0x470>)
 800160e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001610:	f003 0302 	and.w	r3, r3, #2
 8001614:	2b00      	cmp	r3, #0
 8001616:	d1ea      	bne.n	80015ee <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	f003 0304 	and.w	r3, r3, #4
 8001620:	2b00      	cmp	r3, #0
 8001622:	f000 8097 	beq.w	8001754 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001626:	2300      	movs	r3, #0
 8001628:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800162a:	4b81      	ldr	r3, [pc, #516]	@ (8001830 <HAL_RCC_OscConfig+0x470>)
 800162c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800162e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001632:	2b00      	cmp	r3, #0
 8001634:	d10f      	bne.n	8001656 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001636:	2300      	movs	r3, #0
 8001638:	60bb      	str	r3, [r7, #8]
 800163a:	4b7d      	ldr	r3, [pc, #500]	@ (8001830 <HAL_RCC_OscConfig+0x470>)
 800163c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800163e:	4a7c      	ldr	r2, [pc, #496]	@ (8001830 <HAL_RCC_OscConfig+0x470>)
 8001640:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001644:	6413      	str	r3, [r2, #64]	@ 0x40
 8001646:	4b7a      	ldr	r3, [pc, #488]	@ (8001830 <HAL_RCC_OscConfig+0x470>)
 8001648:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800164a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800164e:	60bb      	str	r3, [r7, #8]
 8001650:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001652:	2301      	movs	r3, #1
 8001654:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001656:	4b77      	ldr	r3, [pc, #476]	@ (8001834 <HAL_RCC_OscConfig+0x474>)
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800165e:	2b00      	cmp	r3, #0
 8001660:	d118      	bne.n	8001694 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001662:	4b74      	ldr	r3, [pc, #464]	@ (8001834 <HAL_RCC_OscConfig+0x474>)
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	4a73      	ldr	r2, [pc, #460]	@ (8001834 <HAL_RCC_OscConfig+0x474>)
 8001668:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800166c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800166e:	f7ff fb6f 	bl	8000d50 <HAL_GetTick>
 8001672:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001674:	e008      	b.n	8001688 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001676:	f7ff fb6b 	bl	8000d50 <HAL_GetTick>
 800167a:	4602      	mov	r2, r0
 800167c:	693b      	ldr	r3, [r7, #16]
 800167e:	1ad3      	subs	r3, r2, r3
 8001680:	2b02      	cmp	r3, #2
 8001682:	d901      	bls.n	8001688 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001684:	2303      	movs	r3, #3
 8001686:	e10c      	b.n	80018a2 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001688:	4b6a      	ldr	r3, [pc, #424]	@ (8001834 <HAL_RCC_OscConfig+0x474>)
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001690:	2b00      	cmp	r3, #0
 8001692:	d0f0      	beq.n	8001676 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	689b      	ldr	r3, [r3, #8]
 8001698:	2b01      	cmp	r3, #1
 800169a:	d106      	bne.n	80016aa <HAL_RCC_OscConfig+0x2ea>
 800169c:	4b64      	ldr	r3, [pc, #400]	@ (8001830 <HAL_RCC_OscConfig+0x470>)
 800169e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80016a0:	4a63      	ldr	r2, [pc, #396]	@ (8001830 <HAL_RCC_OscConfig+0x470>)
 80016a2:	f043 0301 	orr.w	r3, r3, #1
 80016a6:	6713      	str	r3, [r2, #112]	@ 0x70
 80016a8:	e01c      	b.n	80016e4 <HAL_RCC_OscConfig+0x324>
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	689b      	ldr	r3, [r3, #8]
 80016ae:	2b05      	cmp	r3, #5
 80016b0:	d10c      	bne.n	80016cc <HAL_RCC_OscConfig+0x30c>
 80016b2:	4b5f      	ldr	r3, [pc, #380]	@ (8001830 <HAL_RCC_OscConfig+0x470>)
 80016b4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80016b6:	4a5e      	ldr	r2, [pc, #376]	@ (8001830 <HAL_RCC_OscConfig+0x470>)
 80016b8:	f043 0304 	orr.w	r3, r3, #4
 80016bc:	6713      	str	r3, [r2, #112]	@ 0x70
 80016be:	4b5c      	ldr	r3, [pc, #368]	@ (8001830 <HAL_RCC_OscConfig+0x470>)
 80016c0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80016c2:	4a5b      	ldr	r2, [pc, #364]	@ (8001830 <HAL_RCC_OscConfig+0x470>)
 80016c4:	f043 0301 	orr.w	r3, r3, #1
 80016c8:	6713      	str	r3, [r2, #112]	@ 0x70
 80016ca:	e00b      	b.n	80016e4 <HAL_RCC_OscConfig+0x324>
 80016cc:	4b58      	ldr	r3, [pc, #352]	@ (8001830 <HAL_RCC_OscConfig+0x470>)
 80016ce:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80016d0:	4a57      	ldr	r2, [pc, #348]	@ (8001830 <HAL_RCC_OscConfig+0x470>)
 80016d2:	f023 0301 	bic.w	r3, r3, #1
 80016d6:	6713      	str	r3, [r2, #112]	@ 0x70
 80016d8:	4b55      	ldr	r3, [pc, #340]	@ (8001830 <HAL_RCC_OscConfig+0x470>)
 80016da:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80016dc:	4a54      	ldr	r2, [pc, #336]	@ (8001830 <HAL_RCC_OscConfig+0x470>)
 80016de:	f023 0304 	bic.w	r3, r3, #4
 80016e2:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	689b      	ldr	r3, [r3, #8]
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d015      	beq.n	8001718 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80016ec:	f7ff fb30 	bl	8000d50 <HAL_GetTick>
 80016f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80016f2:	e00a      	b.n	800170a <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80016f4:	f7ff fb2c 	bl	8000d50 <HAL_GetTick>
 80016f8:	4602      	mov	r2, r0
 80016fa:	693b      	ldr	r3, [r7, #16]
 80016fc:	1ad3      	subs	r3, r2, r3
 80016fe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001702:	4293      	cmp	r3, r2
 8001704:	d901      	bls.n	800170a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001706:	2303      	movs	r3, #3
 8001708:	e0cb      	b.n	80018a2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800170a:	4b49      	ldr	r3, [pc, #292]	@ (8001830 <HAL_RCC_OscConfig+0x470>)
 800170c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800170e:	f003 0302 	and.w	r3, r3, #2
 8001712:	2b00      	cmp	r3, #0
 8001714:	d0ee      	beq.n	80016f4 <HAL_RCC_OscConfig+0x334>
 8001716:	e014      	b.n	8001742 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001718:	f7ff fb1a 	bl	8000d50 <HAL_GetTick>
 800171c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800171e:	e00a      	b.n	8001736 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001720:	f7ff fb16 	bl	8000d50 <HAL_GetTick>
 8001724:	4602      	mov	r2, r0
 8001726:	693b      	ldr	r3, [r7, #16]
 8001728:	1ad3      	subs	r3, r2, r3
 800172a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800172e:	4293      	cmp	r3, r2
 8001730:	d901      	bls.n	8001736 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001732:	2303      	movs	r3, #3
 8001734:	e0b5      	b.n	80018a2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001736:	4b3e      	ldr	r3, [pc, #248]	@ (8001830 <HAL_RCC_OscConfig+0x470>)
 8001738:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800173a:	f003 0302 	and.w	r3, r3, #2
 800173e:	2b00      	cmp	r3, #0
 8001740:	d1ee      	bne.n	8001720 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001742:	7dfb      	ldrb	r3, [r7, #23]
 8001744:	2b01      	cmp	r3, #1
 8001746:	d105      	bne.n	8001754 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001748:	4b39      	ldr	r3, [pc, #228]	@ (8001830 <HAL_RCC_OscConfig+0x470>)
 800174a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800174c:	4a38      	ldr	r2, [pc, #224]	@ (8001830 <HAL_RCC_OscConfig+0x470>)
 800174e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001752:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	699b      	ldr	r3, [r3, #24]
 8001758:	2b00      	cmp	r3, #0
 800175a:	f000 80a1 	beq.w	80018a0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800175e:	4b34      	ldr	r3, [pc, #208]	@ (8001830 <HAL_RCC_OscConfig+0x470>)
 8001760:	689b      	ldr	r3, [r3, #8]
 8001762:	f003 030c 	and.w	r3, r3, #12
 8001766:	2b08      	cmp	r3, #8
 8001768:	d05c      	beq.n	8001824 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	699b      	ldr	r3, [r3, #24]
 800176e:	2b02      	cmp	r3, #2
 8001770:	d141      	bne.n	80017f6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001772:	4b31      	ldr	r3, [pc, #196]	@ (8001838 <HAL_RCC_OscConfig+0x478>)
 8001774:	2200      	movs	r2, #0
 8001776:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001778:	f7ff faea 	bl	8000d50 <HAL_GetTick>
 800177c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800177e:	e008      	b.n	8001792 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001780:	f7ff fae6 	bl	8000d50 <HAL_GetTick>
 8001784:	4602      	mov	r2, r0
 8001786:	693b      	ldr	r3, [r7, #16]
 8001788:	1ad3      	subs	r3, r2, r3
 800178a:	2b02      	cmp	r3, #2
 800178c:	d901      	bls.n	8001792 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800178e:	2303      	movs	r3, #3
 8001790:	e087      	b.n	80018a2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001792:	4b27      	ldr	r3, [pc, #156]	@ (8001830 <HAL_RCC_OscConfig+0x470>)
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800179a:	2b00      	cmp	r3, #0
 800179c:	d1f0      	bne.n	8001780 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	69da      	ldr	r2, [r3, #28]
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	6a1b      	ldr	r3, [r3, #32]
 80017a6:	431a      	orrs	r2, r3
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80017ac:	019b      	lsls	r3, r3, #6
 80017ae:	431a      	orrs	r2, r3
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80017b4:	085b      	lsrs	r3, r3, #1
 80017b6:	3b01      	subs	r3, #1
 80017b8:	041b      	lsls	r3, r3, #16
 80017ba:	431a      	orrs	r2, r3
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80017c0:	061b      	lsls	r3, r3, #24
 80017c2:	491b      	ldr	r1, [pc, #108]	@ (8001830 <HAL_RCC_OscConfig+0x470>)
 80017c4:	4313      	orrs	r3, r2
 80017c6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80017c8:	4b1b      	ldr	r3, [pc, #108]	@ (8001838 <HAL_RCC_OscConfig+0x478>)
 80017ca:	2201      	movs	r2, #1
 80017cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017ce:	f7ff fabf 	bl	8000d50 <HAL_GetTick>
 80017d2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80017d4:	e008      	b.n	80017e8 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80017d6:	f7ff fabb 	bl	8000d50 <HAL_GetTick>
 80017da:	4602      	mov	r2, r0
 80017dc:	693b      	ldr	r3, [r7, #16]
 80017de:	1ad3      	subs	r3, r2, r3
 80017e0:	2b02      	cmp	r3, #2
 80017e2:	d901      	bls.n	80017e8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80017e4:	2303      	movs	r3, #3
 80017e6:	e05c      	b.n	80018a2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80017e8:	4b11      	ldr	r3, [pc, #68]	@ (8001830 <HAL_RCC_OscConfig+0x470>)
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d0f0      	beq.n	80017d6 <HAL_RCC_OscConfig+0x416>
 80017f4:	e054      	b.n	80018a0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80017f6:	4b10      	ldr	r3, [pc, #64]	@ (8001838 <HAL_RCC_OscConfig+0x478>)
 80017f8:	2200      	movs	r2, #0
 80017fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017fc:	f7ff faa8 	bl	8000d50 <HAL_GetTick>
 8001800:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001802:	e008      	b.n	8001816 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001804:	f7ff faa4 	bl	8000d50 <HAL_GetTick>
 8001808:	4602      	mov	r2, r0
 800180a:	693b      	ldr	r3, [r7, #16]
 800180c:	1ad3      	subs	r3, r2, r3
 800180e:	2b02      	cmp	r3, #2
 8001810:	d901      	bls.n	8001816 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001812:	2303      	movs	r3, #3
 8001814:	e045      	b.n	80018a2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001816:	4b06      	ldr	r3, [pc, #24]	@ (8001830 <HAL_RCC_OscConfig+0x470>)
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800181e:	2b00      	cmp	r3, #0
 8001820:	d1f0      	bne.n	8001804 <HAL_RCC_OscConfig+0x444>
 8001822:	e03d      	b.n	80018a0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	699b      	ldr	r3, [r3, #24]
 8001828:	2b01      	cmp	r3, #1
 800182a:	d107      	bne.n	800183c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800182c:	2301      	movs	r3, #1
 800182e:	e038      	b.n	80018a2 <HAL_RCC_OscConfig+0x4e2>
 8001830:	40023800 	.word	0x40023800
 8001834:	40007000 	.word	0x40007000
 8001838:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800183c:	4b1b      	ldr	r3, [pc, #108]	@ (80018ac <HAL_RCC_OscConfig+0x4ec>)
 800183e:	685b      	ldr	r3, [r3, #4]
 8001840:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	699b      	ldr	r3, [r3, #24]
 8001846:	2b01      	cmp	r3, #1
 8001848:	d028      	beq.n	800189c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800184a:	68fb      	ldr	r3, [r7, #12]
 800184c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001854:	429a      	cmp	r2, r3
 8001856:	d121      	bne.n	800189c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001858:	68fb      	ldr	r3, [r7, #12]
 800185a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001862:	429a      	cmp	r2, r3
 8001864:	d11a      	bne.n	800189c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001866:	68fa      	ldr	r2, [r7, #12]
 8001868:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800186c:	4013      	ands	r3, r2
 800186e:	687a      	ldr	r2, [r7, #4]
 8001870:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001872:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001874:	4293      	cmp	r3, r2
 8001876:	d111      	bne.n	800189c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001878:	68fb      	ldr	r3, [r7, #12]
 800187a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001882:	085b      	lsrs	r3, r3, #1
 8001884:	3b01      	subs	r3, #1
 8001886:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001888:	429a      	cmp	r2, r3
 800188a:	d107      	bne.n	800189c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800188c:	68fb      	ldr	r3, [r7, #12]
 800188e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001896:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001898:	429a      	cmp	r2, r3
 800189a:	d001      	beq.n	80018a0 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 800189c:	2301      	movs	r3, #1
 800189e:	e000      	b.n	80018a2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80018a0:	2300      	movs	r3, #0
}
 80018a2:	4618      	mov	r0, r3
 80018a4:	3718      	adds	r7, #24
 80018a6:	46bd      	mov	sp, r7
 80018a8:	bd80      	pop	{r7, pc}
 80018aa:	bf00      	nop
 80018ac:	40023800 	.word	0x40023800

080018b0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80018b0:	b580      	push	{r7, lr}
 80018b2:	b084      	sub	sp, #16
 80018b4:	af00      	add	r7, sp, #0
 80018b6:	6078      	str	r0, [r7, #4]
 80018b8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d101      	bne.n	80018c4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80018c0:	2301      	movs	r3, #1
 80018c2:	e0cc      	b.n	8001a5e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80018c4:	4b68      	ldr	r3, [pc, #416]	@ (8001a68 <HAL_RCC_ClockConfig+0x1b8>)
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	f003 0307 	and.w	r3, r3, #7
 80018cc:	683a      	ldr	r2, [r7, #0]
 80018ce:	429a      	cmp	r2, r3
 80018d0:	d90c      	bls.n	80018ec <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80018d2:	4b65      	ldr	r3, [pc, #404]	@ (8001a68 <HAL_RCC_ClockConfig+0x1b8>)
 80018d4:	683a      	ldr	r2, [r7, #0]
 80018d6:	b2d2      	uxtb	r2, r2
 80018d8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80018da:	4b63      	ldr	r3, [pc, #396]	@ (8001a68 <HAL_RCC_ClockConfig+0x1b8>)
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	f003 0307 	and.w	r3, r3, #7
 80018e2:	683a      	ldr	r2, [r7, #0]
 80018e4:	429a      	cmp	r2, r3
 80018e6:	d001      	beq.n	80018ec <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80018e8:	2301      	movs	r3, #1
 80018ea:	e0b8      	b.n	8001a5e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	f003 0302 	and.w	r3, r3, #2
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d020      	beq.n	800193a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	f003 0304 	and.w	r3, r3, #4
 8001900:	2b00      	cmp	r3, #0
 8001902:	d005      	beq.n	8001910 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001904:	4b59      	ldr	r3, [pc, #356]	@ (8001a6c <HAL_RCC_ClockConfig+0x1bc>)
 8001906:	689b      	ldr	r3, [r3, #8]
 8001908:	4a58      	ldr	r2, [pc, #352]	@ (8001a6c <HAL_RCC_ClockConfig+0x1bc>)
 800190a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800190e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	f003 0308 	and.w	r3, r3, #8
 8001918:	2b00      	cmp	r3, #0
 800191a:	d005      	beq.n	8001928 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800191c:	4b53      	ldr	r3, [pc, #332]	@ (8001a6c <HAL_RCC_ClockConfig+0x1bc>)
 800191e:	689b      	ldr	r3, [r3, #8]
 8001920:	4a52      	ldr	r2, [pc, #328]	@ (8001a6c <HAL_RCC_ClockConfig+0x1bc>)
 8001922:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8001926:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001928:	4b50      	ldr	r3, [pc, #320]	@ (8001a6c <HAL_RCC_ClockConfig+0x1bc>)
 800192a:	689b      	ldr	r3, [r3, #8]
 800192c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	689b      	ldr	r3, [r3, #8]
 8001934:	494d      	ldr	r1, [pc, #308]	@ (8001a6c <HAL_RCC_ClockConfig+0x1bc>)
 8001936:	4313      	orrs	r3, r2
 8001938:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	f003 0301 	and.w	r3, r3, #1
 8001942:	2b00      	cmp	r3, #0
 8001944:	d044      	beq.n	80019d0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	685b      	ldr	r3, [r3, #4]
 800194a:	2b01      	cmp	r3, #1
 800194c:	d107      	bne.n	800195e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800194e:	4b47      	ldr	r3, [pc, #284]	@ (8001a6c <HAL_RCC_ClockConfig+0x1bc>)
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001956:	2b00      	cmp	r3, #0
 8001958:	d119      	bne.n	800198e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800195a:	2301      	movs	r3, #1
 800195c:	e07f      	b.n	8001a5e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	685b      	ldr	r3, [r3, #4]
 8001962:	2b02      	cmp	r3, #2
 8001964:	d003      	beq.n	800196e <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800196a:	2b03      	cmp	r3, #3
 800196c:	d107      	bne.n	800197e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800196e:	4b3f      	ldr	r3, [pc, #252]	@ (8001a6c <HAL_RCC_ClockConfig+0x1bc>)
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001976:	2b00      	cmp	r3, #0
 8001978:	d109      	bne.n	800198e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800197a:	2301      	movs	r3, #1
 800197c:	e06f      	b.n	8001a5e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800197e:	4b3b      	ldr	r3, [pc, #236]	@ (8001a6c <HAL_RCC_ClockConfig+0x1bc>)
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	f003 0302 	and.w	r3, r3, #2
 8001986:	2b00      	cmp	r3, #0
 8001988:	d101      	bne.n	800198e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800198a:	2301      	movs	r3, #1
 800198c:	e067      	b.n	8001a5e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800198e:	4b37      	ldr	r3, [pc, #220]	@ (8001a6c <HAL_RCC_ClockConfig+0x1bc>)
 8001990:	689b      	ldr	r3, [r3, #8]
 8001992:	f023 0203 	bic.w	r2, r3, #3
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	685b      	ldr	r3, [r3, #4]
 800199a:	4934      	ldr	r1, [pc, #208]	@ (8001a6c <HAL_RCC_ClockConfig+0x1bc>)
 800199c:	4313      	orrs	r3, r2
 800199e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80019a0:	f7ff f9d6 	bl	8000d50 <HAL_GetTick>
 80019a4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80019a6:	e00a      	b.n	80019be <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80019a8:	f7ff f9d2 	bl	8000d50 <HAL_GetTick>
 80019ac:	4602      	mov	r2, r0
 80019ae:	68fb      	ldr	r3, [r7, #12]
 80019b0:	1ad3      	subs	r3, r2, r3
 80019b2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80019b6:	4293      	cmp	r3, r2
 80019b8:	d901      	bls.n	80019be <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80019ba:	2303      	movs	r3, #3
 80019bc:	e04f      	b.n	8001a5e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80019be:	4b2b      	ldr	r3, [pc, #172]	@ (8001a6c <HAL_RCC_ClockConfig+0x1bc>)
 80019c0:	689b      	ldr	r3, [r3, #8]
 80019c2:	f003 020c 	and.w	r2, r3, #12
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	685b      	ldr	r3, [r3, #4]
 80019ca:	009b      	lsls	r3, r3, #2
 80019cc:	429a      	cmp	r2, r3
 80019ce:	d1eb      	bne.n	80019a8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80019d0:	4b25      	ldr	r3, [pc, #148]	@ (8001a68 <HAL_RCC_ClockConfig+0x1b8>)
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	f003 0307 	and.w	r3, r3, #7
 80019d8:	683a      	ldr	r2, [r7, #0]
 80019da:	429a      	cmp	r2, r3
 80019dc:	d20c      	bcs.n	80019f8 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80019de:	4b22      	ldr	r3, [pc, #136]	@ (8001a68 <HAL_RCC_ClockConfig+0x1b8>)
 80019e0:	683a      	ldr	r2, [r7, #0]
 80019e2:	b2d2      	uxtb	r2, r2
 80019e4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80019e6:	4b20      	ldr	r3, [pc, #128]	@ (8001a68 <HAL_RCC_ClockConfig+0x1b8>)
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	f003 0307 	and.w	r3, r3, #7
 80019ee:	683a      	ldr	r2, [r7, #0]
 80019f0:	429a      	cmp	r2, r3
 80019f2:	d001      	beq.n	80019f8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80019f4:	2301      	movs	r3, #1
 80019f6:	e032      	b.n	8001a5e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	f003 0304 	and.w	r3, r3, #4
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d008      	beq.n	8001a16 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001a04:	4b19      	ldr	r3, [pc, #100]	@ (8001a6c <HAL_RCC_ClockConfig+0x1bc>)
 8001a06:	689b      	ldr	r3, [r3, #8]
 8001a08:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	68db      	ldr	r3, [r3, #12]
 8001a10:	4916      	ldr	r1, [pc, #88]	@ (8001a6c <HAL_RCC_ClockConfig+0x1bc>)
 8001a12:	4313      	orrs	r3, r2
 8001a14:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	f003 0308 	and.w	r3, r3, #8
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d009      	beq.n	8001a36 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001a22:	4b12      	ldr	r3, [pc, #72]	@ (8001a6c <HAL_RCC_ClockConfig+0x1bc>)
 8001a24:	689b      	ldr	r3, [r3, #8]
 8001a26:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	691b      	ldr	r3, [r3, #16]
 8001a2e:	00db      	lsls	r3, r3, #3
 8001a30:	490e      	ldr	r1, [pc, #56]	@ (8001a6c <HAL_RCC_ClockConfig+0x1bc>)
 8001a32:	4313      	orrs	r3, r2
 8001a34:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001a36:	f000 f821 	bl	8001a7c <HAL_RCC_GetSysClockFreq>
 8001a3a:	4602      	mov	r2, r0
 8001a3c:	4b0b      	ldr	r3, [pc, #44]	@ (8001a6c <HAL_RCC_ClockConfig+0x1bc>)
 8001a3e:	689b      	ldr	r3, [r3, #8]
 8001a40:	091b      	lsrs	r3, r3, #4
 8001a42:	f003 030f 	and.w	r3, r3, #15
 8001a46:	490a      	ldr	r1, [pc, #40]	@ (8001a70 <HAL_RCC_ClockConfig+0x1c0>)
 8001a48:	5ccb      	ldrb	r3, [r1, r3]
 8001a4a:	fa22 f303 	lsr.w	r3, r2, r3
 8001a4e:	4a09      	ldr	r2, [pc, #36]	@ (8001a74 <HAL_RCC_ClockConfig+0x1c4>)
 8001a50:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8001a52:	4b09      	ldr	r3, [pc, #36]	@ (8001a78 <HAL_RCC_ClockConfig+0x1c8>)
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	4618      	mov	r0, r3
 8001a58:	f7ff f936 	bl	8000cc8 <HAL_InitTick>

  return HAL_OK;
 8001a5c:	2300      	movs	r3, #0
}
 8001a5e:	4618      	mov	r0, r3
 8001a60:	3710      	adds	r7, #16
 8001a62:	46bd      	mov	sp, r7
 8001a64:	bd80      	pop	{r7, pc}
 8001a66:	bf00      	nop
 8001a68:	40023c00 	.word	0x40023c00
 8001a6c:	40023800 	.word	0x40023800
 8001a70:	080037ac 	.word	0x080037ac
 8001a74:	20000000 	.word	0x20000000
 8001a78:	20000004 	.word	0x20000004

08001a7c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001a7c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001a80:	b094      	sub	sp, #80	@ 0x50
 8001a82:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001a84:	2300      	movs	r3, #0
 8001a86:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8001a88:	2300      	movs	r3, #0
 8001a8a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8001a8c:	2300      	movs	r3, #0
 8001a8e:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8001a90:	2300      	movs	r3, #0
 8001a92:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001a94:	4b79      	ldr	r3, [pc, #484]	@ (8001c7c <HAL_RCC_GetSysClockFreq+0x200>)
 8001a96:	689b      	ldr	r3, [r3, #8]
 8001a98:	f003 030c 	and.w	r3, r3, #12
 8001a9c:	2b08      	cmp	r3, #8
 8001a9e:	d00d      	beq.n	8001abc <HAL_RCC_GetSysClockFreq+0x40>
 8001aa0:	2b08      	cmp	r3, #8
 8001aa2:	f200 80e1 	bhi.w	8001c68 <HAL_RCC_GetSysClockFreq+0x1ec>
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d002      	beq.n	8001ab0 <HAL_RCC_GetSysClockFreq+0x34>
 8001aaa:	2b04      	cmp	r3, #4
 8001aac:	d003      	beq.n	8001ab6 <HAL_RCC_GetSysClockFreq+0x3a>
 8001aae:	e0db      	b.n	8001c68 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001ab0:	4b73      	ldr	r3, [pc, #460]	@ (8001c80 <HAL_RCC_GetSysClockFreq+0x204>)
 8001ab2:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001ab4:	e0db      	b.n	8001c6e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001ab6:	4b73      	ldr	r3, [pc, #460]	@ (8001c84 <HAL_RCC_GetSysClockFreq+0x208>)
 8001ab8:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001aba:	e0d8      	b.n	8001c6e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001abc:	4b6f      	ldr	r3, [pc, #444]	@ (8001c7c <HAL_RCC_GetSysClockFreq+0x200>)
 8001abe:	685b      	ldr	r3, [r3, #4]
 8001ac0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001ac4:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001ac6:	4b6d      	ldr	r3, [pc, #436]	@ (8001c7c <HAL_RCC_GetSysClockFreq+0x200>)
 8001ac8:	685b      	ldr	r3, [r3, #4]
 8001aca:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d063      	beq.n	8001b9a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001ad2:	4b6a      	ldr	r3, [pc, #424]	@ (8001c7c <HAL_RCC_GetSysClockFreq+0x200>)
 8001ad4:	685b      	ldr	r3, [r3, #4]
 8001ad6:	099b      	lsrs	r3, r3, #6
 8001ad8:	2200      	movs	r2, #0
 8001ada:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001adc:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8001ade:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001ae0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001ae4:	633b      	str	r3, [r7, #48]	@ 0x30
 8001ae6:	2300      	movs	r3, #0
 8001ae8:	637b      	str	r3, [r7, #52]	@ 0x34
 8001aea:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8001aee:	4622      	mov	r2, r4
 8001af0:	462b      	mov	r3, r5
 8001af2:	f04f 0000 	mov.w	r0, #0
 8001af6:	f04f 0100 	mov.w	r1, #0
 8001afa:	0159      	lsls	r1, r3, #5
 8001afc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001b00:	0150      	lsls	r0, r2, #5
 8001b02:	4602      	mov	r2, r0
 8001b04:	460b      	mov	r3, r1
 8001b06:	4621      	mov	r1, r4
 8001b08:	1a51      	subs	r1, r2, r1
 8001b0a:	6139      	str	r1, [r7, #16]
 8001b0c:	4629      	mov	r1, r5
 8001b0e:	eb63 0301 	sbc.w	r3, r3, r1
 8001b12:	617b      	str	r3, [r7, #20]
 8001b14:	f04f 0200 	mov.w	r2, #0
 8001b18:	f04f 0300 	mov.w	r3, #0
 8001b1c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001b20:	4659      	mov	r1, fp
 8001b22:	018b      	lsls	r3, r1, #6
 8001b24:	4651      	mov	r1, sl
 8001b26:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001b2a:	4651      	mov	r1, sl
 8001b2c:	018a      	lsls	r2, r1, #6
 8001b2e:	4651      	mov	r1, sl
 8001b30:	ebb2 0801 	subs.w	r8, r2, r1
 8001b34:	4659      	mov	r1, fp
 8001b36:	eb63 0901 	sbc.w	r9, r3, r1
 8001b3a:	f04f 0200 	mov.w	r2, #0
 8001b3e:	f04f 0300 	mov.w	r3, #0
 8001b42:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001b46:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001b4a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001b4e:	4690      	mov	r8, r2
 8001b50:	4699      	mov	r9, r3
 8001b52:	4623      	mov	r3, r4
 8001b54:	eb18 0303 	adds.w	r3, r8, r3
 8001b58:	60bb      	str	r3, [r7, #8]
 8001b5a:	462b      	mov	r3, r5
 8001b5c:	eb49 0303 	adc.w	r3, r9, r3
 8001b60:	60fb      	str	r3, [r7, #12]
 8001b62:	f04f 0200 	mov.w	r2, #0
 8001b66:	f04f 0300 	mov.w	r3, #0
 8001b6a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001b6e:	4629      	mov	r1, r5
 8001b70:	024b      	lsls	r3, r1, #9
 8001b72:	4621      	mov	r1, r4
 8001b74:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001b78:	4621      	mov	r1, r4
 8001b7a:	024a      	lsls	r2, r1, #9
 8001b7c:	4610      	mov	r0, r2
 8001b7e:	4619      	mov	r1, r3
 8001b80:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001b82:	2200      	movs	r2, #0
 8001b84:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001b86:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001b88:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8001b8c:	f7fe fb80 	bl	8000290 <__aeabi_uldivmod>
 8001b90:	4602      	mov	r2, r0
 8001b92:	460b      	mov	r3, r1
 8001b94:	4613      	mov	r3, r2
 8001b96:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001b98:	e058      	b.n	8001c4c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001b9a:	4b38      	ldr	r3, [pc, #224]	@ (8001c7c <HAL_RCC_GetSysClockFreq+0x200>)
 8001b9c:	685b      	ldr	r3, [r3, #4]
 8001b9e:	099b      	lsrs	r3, r3, #6
 8001ba0:	2200      	movs	r2, #0
 8001ba2:	4618      	mov	r0, r3
 8001ba4:	4611      	mov	r1, r2
 8001ba6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001baa:	623b      	str	r3, [r7, #32]
 8001bac:	2300      	movs	r3, #0
 8001bae:	627b      	str	r3, [r7, #36]	@ 0x24
 8001bb0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001bb4:	4642      	mov	r2, r8
 8001bb6:	464b      	mov	r3, r9
 8001bb8:	f04f 0000 	mov.w	r0, #0
 8001bbc:	f04f 0100 	mov.w	r1, #0
 8001bc0:	0159      	lsls	r1, r3, #5
 8001bc2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001bc6:	0150      	lsls	r0, r2, #5
 8001bc8:	4602      	mov	r2, r0
 8001bca:	460b      	mov	r3, r1
 8001bcc:	4641      	mov	r1, r8
 8001bce:	ebb2 0a01 	subs.w	sl, r2, r1
 8001bd2:	4649      	mov	r1, r9
 8001bd4:	eb63 0b01 	sbc.w	fp, r3, r1
 8001bd8:	f04f 0200 	mov.w	r2, #0
 8001bdc:	f04f 0300 	mov.w	r3, #0
 8001be0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001be4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001be8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001bec:	ebb2 040a 	subs.w	r4, r2, sl
 8001bf0:	eb63 050b 	sbc.w	r5, r3, fp
 8001bf4:	f04f 0200 	mov.w	r2, #0
 8001bf8:	f04f 0300 	mov.w	r3, #0
 8001bfc:	00eb      	lsls	r3, r5, #3
 8001bfe:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001c02:	00e2      	lsls	r2, r4, #3
 8001c04:	4614      	mov	r4, r2
 8001c06:	461d      	mov	r5, r3
 8001c08:	4643      	mov	r3, r8
 8001c0a:	18e3      	adds	r3, r4, r3
 8001c0c:	603b      	str	r3, [r7, #0]
 8001c0e:	464b      	mov	r3, r9
 8001c10:	eb45 0303 	adc.w	r3, r5, r3
 8001c14:	607b      	str	r3, [r7, #4]
 8001c16:	f04f 0200 	mov.w	r2, #0
 8001c1a:	f04f 0300 	mov.w	r3, #0
 8001c1e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001c22:	4629      	mov	r1, r5
 8001c24:	028b      	lsls	r3, r1, #10
 8001c26:	4621      	mov	r1, r4
 8001c28:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001c2c:	4621      	mov	r1, r4
 8001c2e:	028a      	lsls	r2, r1, #10
 8001c30:	4610      	mov	r0, r2
 8001c32:	4619      	mov	r1, r3
 8001c34:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001c36:	2200      	movs	r2, #0
 8001c38:	61bb      	str	r3, [r7, #24]
 8001c3a:	61fa      	str	r2, [r7, #28]
 8001c3c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001c40:	f7fe fb26 	bl	8000290 <__aeabi_uldivmod>
 8001c44:	4602      	mov	r2, r0
 8001c46:	460b      	mov	r3, r1
 8001c48:	4613      	mov	r3, r2
 8001c4a:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8001c4c:	4b0b      	ldr	r3, [pc, #44]	@ (8001c7c <HAL_RCC_GetSysClockFreq+0x200>)
 8001c4e:	685b      	ldr	r3, [r3, #4]
 8001c50:	0c1b      	lsrs	r3, r3, #16
 8001c52:	f003 0303 	and.w	r3, r3, #3
 8001c56:	3301      	adds	r3, #1
 8001c58:	005b      	lsls	r3, r3, #1
 8001c5a:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8001c5c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8001c5e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001c60:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c64:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001c66:	e002      	b.n	8001c6e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001c68:	4b05      	ldr	r3, [pc, #20]	@ (8001c80 <HAL_RCC_GetSysClockFreq+0x204>)
 8001c6a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001c6c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001c6e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8001c70:	4618      	mov	r0, r3
 8001c72:	3750      	adds	r7, #80	@ 0x50
 8001c74:	46bd      	mov	sp, r7
 8001c76:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001c7a:	bf00      	nop
 8001c7c:	40023800 	.word	0x40023800
 8001c80:	00f42400 	.word	0x00f42400
 8001c84:	007a1200 	.word	0x007a1200

08001c88 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001c88:	b480      	push	{r7}
 8001c8a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001c8c:	4b03      	ldr	r3, [pc, #12]	@ (8001c9c <HAL_RCC_GetHCLKFreq+0x14>)
 8001c8e:	681b      	ldr	r3, [r3, #0]
}
 8001c90:	4618      	mov	r0, r3
 8001c92:	46bd      	mov	sp, r7
 8001c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c98:	4770      	bx	lr
 8001c9a:	bf00      	nop
 8001c9c:	20000000 	.word	0x20000000

08001ca0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001ca0:	b580      	push	{r7, lr}
 8001ca2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001ca4:	f7ff fff0 	bl	8001c88 <HAL_RCC_GetHCLKFreq>
 8001ca8:	4602      	mov	r2, r0
 8001caa:	4b05      	ldr	r3, [pc, #20]	@ (8001cc0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001cac:	689b      	ldr	r3, [r3, #8]
 8001cae:	0a9b      	lsrs	r3, r3, #10
 8001cb0:	f003 0307 	and.w	r3, r3, #7
 8001cb4:	4903      	ldr	r1, [pc, #12]	@ (8001cc4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001cb6:	5ccb      	ldrb	r3, [r1, r3]
 8001cb8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001cbc:	4618      	mov	r0, r3
 8001cbe:	bd80      	pop	{r7, pc}
 8001cc0:	40023800 	.word	0x40023800
 8001cc4:	080037bc 	.word	0x080037bc

08001cc8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001cc8:	b580      	push	{r7, lr}
 8001cca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001ccc:	f7ff ffdc 	bl	8001c88 <HAL_RCC_GetHCLKFreq>
 8001cd0:	4602      	mov	r2, r0
 8001cd2:	4b05      	ldr	r3, [pc, #20]	@ (8001ce8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001cd4:	689b      	ldr	r3, [r3, #8]
 8001cd6:	0b5b      	lsrs	r3, r3, #13
 8001cd8:	f003 0307 	and.w	r3, r3, #7
 8001cdc:	4903      	ldr	r1, [pc, #12]	@ (8001cec <HAL_RCC_GetPCLK2Freq+0x24>)
 8001cde:	5ccb      	ldrb	r3, [r1, r3]
 8001ce0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001ce4:	4618      	mov	r0, r3
 8001ce6:	bd80      	pop	{r7, pc}
 8001ce8:	40023800 	.word	0x40023800
 8001cec:	080037bc 	.word	0x080037bc

08001cf0 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001cf0:	b580      	push	{r7, lr}
 8001cf2:	b086      	sub	sp, #24
 8001cf4:	af00      	add	r7, sp, #0
 8001cf6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001cf8:	2300      	movs	r3, #0
 8001cfa:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8001cfc:	2300      	movs	r3, #0
 8001cfe:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	f003 0301 	and.w	r3, r3, #1
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d105      	bne.n	8001d18 <HAL_RCCEx_PeriphCLKConfig+0x28>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	f003 0304 	and.w	r3, r3, #4
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d035      	beq.n	8001d84 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8001d18:	4b67      	ldr	r3, [pc, #412]	@ (8001eb8 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8001d1a:	2200      	movs	r2, #0
 8001d1c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8001d1e:	f7ff f817 	bl	8000d50 <HAL_GetTick>
 8001d22:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8001d24:	e008      	b.n	8001d38 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8001d26:	f7ff f813 	bl	8000d50 <HAL_GetTick>
 8001d2a:	4602      	mov	r2, r0
 8001d2c:	697b      	ldr	r3, [r7, #20]
 8001d2e:	1ad3      	subs	r3, r2, r3
 8001d30:	2b02      	cmp	r3, #2
 8001d32:	d901      	bls.n	8001d38 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8001d34:	2303      	movs	r3, #3
 8001d36:	e0ba      	b.n	8001eae <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8001d38:	4b60      	ldr	r3, [pc, #384]	@ (8001ebc <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d1f0      	bne.n	8001d26 <HAL_RCCEx_PeriphCLKConfig+0x36>
                                   PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	685b      	ldr	r3, [r3, #4]
 8001d48:	019a      	lsls	r2, r3, #6
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	689b      	ldr	r3, [r3, #8]
 8001d4e:	071b      	lsls	r3, r3, #28
 8001d50:	495a      	ldr	r1, [pc, #360]	@ (8001ebc <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8001d52:	4313      	orrs	r3, r2
 8001d54:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8001d58:	4b57      	ldr	r3, [pc, #348]	@ (8001eb8 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8001d5a:	2201      	movs	r2, #1
 8001d5c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8001d5e:	f7fe fff7 	bl	8000d50 <HAL_GetTick>
 8001d62:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8001d64:	e008      	b.n	8001d78 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8001d66:	f7fe fff3 	bl	8000d50 <HAL_GetTick>
 8001d6a:	4602      	mov	r2, r0
 8001d6c:	697b      	ldr	r3, [r7, #20]
 8001d6e:	1ad3      	subs	r3, r2, r3
 8001d70:	2b02      	cmp	r3, #2
 8001d72:	d901      	bls.n	8001d78 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8001d74:	2303      	movs	r3, #3
 8001d76:	e09a      	b.n	8001eae <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8001d78:	4b50      	ldr	r3, [pc, #320]	@ (8001ebc <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d0f0      	beq.n	8001d66 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	f003 0302 	and.w	r3, r3, #2
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	f000 8083 	beq.w	8001e98 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8001d92:	2300      	movs	r3, #0
 8001d94:	60fb      	str	r3, [r7, #12]
 8001d96:	4b49      	ldr	r3, [pc, #292]	@ (8001ebc <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8001d98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d9a:	4a48      	ldr	r2, [pc, #288]	@ (8001ebc <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8001d9c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001da0:	6413      	str	r3, [r2, #64]	@ 0x40
 8001da2:	4b46      	ldr	r3, [pc, #280]	@ (8001ebc <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8001da4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001da6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001daa:	60fb      	str	r3, [r7, #12]
 8001dac:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8001dae:	4b44      	ldr	r3, [pc, #272]	@ (8001ec0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	4a43      	ldr	r2, [pc, #268]	@ (8001ec0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001db4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001db8:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001dba:	f7fe ffc9 	bl	8000d50 <HAL_GetTick>
 8001dbe:	6178      	str	r0, [r7, #20]

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8001dc0:	e008      	b.n	8001dd4 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001dc2:	f7fe ffc5 	bl	8000d50 <HAL_GetTick>
 8001dc6:	4602      	mov	r2, r0
 8001dc8:	697b      	ldr	r3, [r7, #20]
 8001dca:	1ad3      	subs	r3, r2, r3
 8001dcc:	2b02      	cmp	r3, #2
 8001dce:	d901      	bls.n	8001dd4 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8001dd0:	2303      	movs	r3, #3
 8001dd2:	e06c      	b.n	8001eae <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8001dd4:	4b3a      	ldr	r3, [pc, #232]	@ (8001ec0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d0f0      	beq.n	8001dc2 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001de0:	4b36      	ldr	r3, [pc, #216]	@ (8001ebc <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8001de2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001de4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001de8:	613b      	str	r3, [r7, #16]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001dea:	693b      	ldr	r3, [r7, #16]
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d02f      	beq.n	8001e50 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	68db      	ldr	r3, [r3, #12]
 8001df4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001df8:	693a      	ldr	r2, [r7, #16]
 8001dfa:	429a      	cmp	r2, r3
 8001dfc:	d028      	beq.n	8001e50 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001dfe:	4b2f      	ldr	r3, [pc, #188]	@ (8001ebc <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8001e00:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001e02:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001e06:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001e08:	4b2e      	ldr	r3, [pc, #184]	@ (8001ec4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8001e0a:	2201      	movs	r2, #1
 8001e0c:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001e0e:	4b2d      	ldr	r3, [pc, #180]	@ (8001ec4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8001e10:	2200      	movs	r2, #0
 8001e12:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8001e14:	4a29      	ldr	r2, [pc, #164]	@ (8001ebc <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8001e16:	693b      	ldr	r3, [r7, #16]
 8001e18:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8001e1a:	4b28      	ldr	r3, [pc, #160]	@ (8001ebc <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8001e1c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001e1e:	f003 0301 	and.w	r3, r3, #1
 8001e22:	2b01      	cmp	r3, #1
 8001e24:	d114      	bne.n	8001e50 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8001e26:	f7fe ff93 	bl	8000d50 <HAL_GetTick>
 8001e2a:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e2c:	e00a      	b.n	8001e44 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e2e:	f7fe ff8f 	bl	8000d50 <HAL_GetTick>
 8001e32:	4602      	mov	r2, r0
 8001e34:	697b      	ldr	r3, [r7, #20]
 8001e36:	1ad3      	subs	r3, r2, r3
 8001e38:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001e3c:	4293      	cmp	r3, r2
 8001e3e:	d901      	bls.n	8001e44 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8001e40:	2303      	movs	r3, #3
 8001e42:	e034      	b.n	8001eae <HAL_RCCEx_PeriphCLKConfig+0x1be>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e44:	4b1d      	ldr	r3, [pc, #116]	@ (8001ebc <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8001e46:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001e48:	f003 0302 	and.w	r3, r3, #2
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d0ee      	beq.n	8001e2e <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	68db      	ldr	r3, [r3, #12]
 8001e54:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001e58:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8001e5c:	d10d      	bne.n	8001e7a <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8001e5e:	4b17      	ldr	r3, [pc, #92]	@ (8001ebc <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8001e60:	689b      	ldr	r3, [r3, #8]
 8001e62:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	68db      	ldr	r3, [r3, #12]
 8001e6a:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8001e6e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001e72:	4912      	ldr	r1, [pc, #72]	@ (8001ebc <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8001e74:	4313      	orrs	r3, r2
 8001e76:	608b      	str	r3, [r1, #8]
 8001e78:	e005      	b.n	8001e86 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8001e7a:	4b10      	ldr	r3, [pc, #64]	@ (8001ebc <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8001e7c:	689b      	ldr	r3, [r3, #8]
 8001e7e:	4a0f      	ldr	r2, [pc, #60]	@ (8001ebc <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8001e80:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8001e84:	6093      	str	r3, [r2, #8]
 8001e86:	4b0d      	ldr	r3, [pc, #52]	@ (8001ebc <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8001e88:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	68db      	ldr	r3, [r3, #12]
 8001e8e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001e92:	490a      	ldr	r1, [pc, #40]	@ (8001ebc <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8001e94:	4313      	orrs	r3, r2
 8001e96:	670b      	str	r3, [r1, #112]	@ 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	f003 0308 	and.w	r3, r3, #8
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d003      	beq.n	8001eac <HAL_RCCEx_PeriphCLKConfig+0x1bc>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	7c1a      	ldrb	r2, [r3, #16]
 8001ea8:	4b07      	ldr	r3, [pc, #28]	@ (8001ec8 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8001eaa:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8001eac:	2300      	movs	r3, #0
}
 8001eae:	4618      	mov	r0, r3
 8001eb0:	3718      	adds	r7, #24
 8001eb2:	46bd      	mov	sp, r7
 8001eb4:	bd80      	pop	{r7, pc}
 8001eb6:	bf00      	nop
 8001eb8:	42470068 	.word	0x42470068
 8001ebc:	40023800 	.word	0x40023800
 8001ec0:	40007000 	.word	0x40007000
 8001ec4:	42470e40 	.word	0x42470e40
 8001ec8:	424711e0 	.word	0x424711e0

08001ecc <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8001ecc:	b580      	push	{r7, lr}
 8001ece:	b084      	sub	sp, #16
 8001ed0:	af00      	add	r7, sp, #0
 8001ed2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8001ed4:	2301      	movs	r3, #1
 8001ed6:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d101      	bne.n	8001ee2 <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 8001ede:	2301      	movs	r3, #1
 8001ee0:	e073      	b.n	8001fca <HAL_RTC_Init+0xfe>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	7f5b      	ldrb	r3, [r3, #29]
 8001ee6:	b2db      	uxtb	r3, r3
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d105      	bne.n	8001ef8 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	2200      	movs	r2, #0
 8001ef0:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8001ef2:	6878      	ldr	r0, [r7, #4]
 8001ef4:	f7fe fd9e 	bl	8000a34 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	2202      	movs	r2, #2
 8001efc:	775a      	strb	r2, [r3, #29]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	68db      	ldr	r3, [r3, #12]
 8001f04:	f003 0310 	and.w	r3, r3, #16
 8001f08:	2b10      	cmp	r3, #16
 8001f0a:	d055      	beq.n	8001fb8 <HAL_RTC_Init+0xec>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	22ca      	movs	r2, #202	@ 0xca
 8001f12:	625a      	str	r2, [r3, #36]	@ 0x24
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	2253      	movs	r2, #83	@ 0x53
 8001f1a:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8001f1c:	6878      	ldr	r0, [r7, #4]
 8001f1e:	f000 f99d 	bl	800225c <RTC_EnterInitMode>
 8001f22:	4603      	mov	r3, r0
 8001f24:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 8001f26:	7bfb      	ldrb	r3, [r7, #15]
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d12c      	bne.n	8001f86 <HAL_RTC_Init+0xba>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	689b      	ldr	r3, [r3, #8]
 8001f32:	687a      	ldr	r2, [r7, #4]
 8001f34:	6812      	ldr	r2, [r2, #0]
 8001f36:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8001f3a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8001f3e:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	6899      	ldr	r1, [r3, #8]
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	685a      	ldr	r2, [r3, #4]
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	691b      	ldr	r3, [r3, #16]
 8001f4e:	431a      	orrs	r2, r3
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	695b      	ldr	r3, [r3, #20]
 8001f54:	431a      	orrs	r2, r3
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	430a      	orrs	r2, r1
 8001f5c:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	687a      	ldr	r2, [r7, #4]
 8001f64:	68d2      	ldr	r2, [r2, #12]
 8001f66:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	6919      	ldr	r1, [r3, #16]
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	689b      	ldr	r3, [r3, #8]
 8001f72:	041a      	lsls	r2, r3, #16
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	430a      	orrs	r2, r1
 8001f7a:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8001f7c:	6878      	ldr	r0, [r7, #4]
 8001f7e:	f000 f9a4 	bl	80022ca <RTC_ExitInitMode>
 8001f82:	4603      	mov	r3, r0
 8001f84:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 8001f86:	7bfb      	ldrb	r3, [r7, #15]
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d110      	bne.n	8001fae <HAL_RTC_Init+0xe2>
    {
      hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8001f9a:	641a      	str	r2, [r3, #64]	@ 0x40
      hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	699a      	ldr	r2, [r3, #24]
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	430a      	orrs	r2, r1
 8001fac:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	22ff      	movs	r2, #255	@ 0xff
 8001fb4:	625a      	str	r2, [r3, #36]	@ 0x24
 8001fb6:	e001      	b.n	8001fbc <HAL_RTC_Init+0xf0>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 8001fb8:	2300      	movs	r3, #0
 8001fba:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8001fbc:	7bfb      	ldrb	r3, [r7, #15]
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d102      	bne.n	8001fc8 <HAL_RTC_Init+0xfc>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	2201      	movs	r2, #1
 8001fc6:	775a      	strb	r2, [r3, #29]
  }

  return status;
 8001fc8:	7bfb      	ldrb	r3, [r7, #15]
}
 8001fca:	4618      	mov	r0, r3
 8001fcc:	3710      	adds	r7, #16
 8001fce:	46bd      	mov	sp, r7
 8001fd0:	bd80      	pop	{r7, pc}

08001fd2 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8001fd2:	b590      	push	{r4, r7, lr}
 8001fd4:	b087      	sub	sp, #28
 8001fd6:	af00      	add	r7, sp, #0
 8001fd8:	60f8      	str	r0, [r7, #12]
 8001fda:	60b9      	str	r1, [r7, #8]
 8001fdc:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8001fde:	2300      	movs	r3, #0
 8001fe0:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	7f1b      	ldrb	r3, [r3, #28]
 8001fe6:	2b01      	cmp	r3, #1
 8001fe8:	d101      	bne.n	8001fee <HAL_RTC_SetTime+0x1c>
 8001fea:	2302      	movs	r3, #2
 8001fec:	e087      	b.n	80020fe <HAL_RTC_SetTime+0x12c>
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	2201      	movs	r2, #1
 8001ff2:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	2202      	movs	r2, #2
 8001ff8:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d126      	bne.n	800204e <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	689b      	ldr	r3, [r3, #8]
 8002006:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800200a:	2b00      	cmp	r3, #0
 800200c:	d102      	bne.n	8002014 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 800200e:	68bb      	ldr	r3, [r7, #8]
 8002010:	2200      	movs	r2, #0
 8002012:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8002014:	68bb      	ldr	r3, [r7, #8]
 8002016:	781b      	ldrb	r3, [r3, #0]
 8002018:	4618      	mov	r0, r3
 800201a:	f000 f97b 	bl	8002314 <RTC_ByteToBcd2>
 800201e:	4603      	mov	r3, r0
 8002020:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8002022:	68bb      	ldr	r3, [r7, #8]
 8002024:	785b      	ldrb	r3, [r3, #1]
 8002026:	4618      	mov	r0, r3
 8002028:	f000 f974 	bl	8002314 <RTC_ByteToBcd2>
 800202c:	4603      	mov	r3, r0
 800202e:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8002030:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 8002032:	68bb      	ldr	r3, [r7, #8]
 8002034:	789b      	ldrb	r3, [r3, #2]
 8002036:	4618      	mov	r0, r3
 8002038:	f000 f96c 	bl	8002314 <RTC_ByteToBcd2>
 800203c:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800203e:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 8002042:	68bb      	ldr	r3, [r7, #8]
 8002044:	78db      	ldrb	r3, [r3, #3]
 8002046:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8002048:	4313      	orrs	r3, r2
 800204a:	617b      	str	r3, [r7, #20]
 800204c:	e018      	b.n	8002080 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	689b      	ldr	r3, [r3, #8]
 8002054:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002058:	2b00      	cmp	r3, #0
 800205a:	d102      	bne.n	8002062 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 800205c:	68bb      	ldr	r3, [r7, #8]
 800205e:	2200      	movs	r2, #0
 8002060:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8002062:	68bb      	ldr	r3, [r7, #8]
 8002064:	781b      	ldrb	r3, [r3, #0]
 8002066:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8002068:	68bb      	ldr	r3, [r7, #8]
 800206a:	785b      	ldrb	r3, [r3, #1]
 800206c:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 800206e:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 8002070:	68ba      	ldr	r2, [r7, #8]
 8002072:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8002074:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8002076:	68bb      	ldr	r3, [r7, #8]
 8002078:	78db      	ldrb	r3, [r3, #3]
 800207a:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 800207c:	4313      	orrs	r3, r2
 800207e:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	22ca      	movs	r2, #202	@ 0xca
 8002086:	625a      	str	r2, [r3, #36]	@ 0x24
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	2253      	movs	r2, #83	@ 0x53
 800208e:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8002090:	68f8      	ldr	r0, [r7, #12]
 8002092:	f000 f8e3 	bl	800225c <RTC_EnterInitMode>
 8002096:	4603      	mov	r3, r0
 8002098:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 800209a:	7cfb      	ldrb	r3, [r7, #19]
 800209c:	2b00      	cmp	r3, #0
 800209e:	d120      	bne.n	80020e2 <HAL_RTC_SetTime+0x110>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	681a      	ldr	r2, [r3, #0]
 80020a4:	697b      	ldr	r3, [r7, #20]
 80020a6:	f003 337f 	and.w	r3, r3, #2139062143	@ 0x7f7f7f7f
 80020aa:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 80020ae:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	689a      	ldr	r2, [r3, #8]
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80020be:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	6899      	ldr	r1, [r3, #8]
 80020c6:	68bb      	ldr	r3, [r7, #8]
 80020c8:	68da      	ldr	r2, [r3, #12]
 80020ca:	68bb      	ldr	r3, [r7, #8]
 80020cc:	691b      	ldr	r3, [r3, #16]
 80020ce:	431a      	orrs	r2, r3
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	430a      	orrs	r2, r1
 80020d6:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80020d8:	68f8      	ldr	r0, [r7, #12]
 80020da:	f000 f8f6 	bl	80022ca <RTC_ExitInitMode>
 80020de:	4603      	mov	r3, r0
 80020e0:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 80020e2:	7cfb      	ldrb	r3, [r7, #19]
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d102      	bne.n	80020ee <HAL_RTC_SetTime+0x11c>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	2201      	movs	r2, #1
 80020ec:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	22ff      	movs	r2, #255	@ 0xff
 80020f4:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	2200      	movs	r2, #0
 80020fa:	771a      	strb	r2, [r3, #28]

  return status;
 80020fc:	7cfb      	ldrb	r3, [r7, #19]
}
 80020fe:	4618      	mov	r0, r3
 8002100:	371c      	adds	r7, #28
 8002102:	46bd      	mov	sp, r7
 8002104:	bd90      	pop	{r4, r7, pc}

08002106 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8002106:	b590      	push	{r4, r7, lr}
 8002108:	b087      	sub	sp, #28
 800210a:	af00      	add	r7, sp, #0
 800210c:	60f8      	str	r0, [r7, #12]
 800210e:	60b9      	str	r1, [r7, #8]
 8002110:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8002112:	2300      	movs	r3, #0
 8002114:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	7f1b      	ldrb	r3, [r3, #28]
 800211a:	2b01      	cmp	r3, #1
 800211c:	d101      	bne.n	8002122 <HAL_RTC_SetDate+0x1c>
 800211e:	2302      	movs	r3, #2
 8002120:	e071      	b.n	8002206 <HAL_RTC_SetDate+0x100>
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	2201      	movs	r2, #1
 8002126:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	2202      	movs	r2, #2
 800212c:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	2b00      	cmp	r3, #0
 8002132:	d10e      	bne.n	8002152 <HAL_RTC_SetDate+0x4c>
 8002134:	68bb      	ldr	r3, [r7, #8]
 8002136:	785b      	ldrb	r3, [r3, #1]
 8002138:	f003 0310 	and.w	r3, r3, #16
 800213c:	2b00      	cmp	r3, #0
 800213e:	d008      	beq.n	8002152 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8002140:	68bb      	ldr	r3, [r7, #8]
 8002142:	785b      	ldrb	r3, [r3, #1]
 8002144:	f023 0310 	bic.w	r3, r3, #16
 8002148:	b2db      	uxtb	r3, r3
 800214a:	330a      	adds	r3, #10
 800214c:	b2da      	uxtb	r2, r3
 800214e:	68bb      	ldr	r3, [r7, #8]
 8002150:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	2b00      	cmp	r3, #0
 8002156:	d11c      	bne.n	8002192 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8002158:	68bb      	ldr	r3, [r7, #8]
 800215a:	78db      	ldrb	r3, [r3, #3]
 800215c:	4618      	mov	r0, r3
 800215e:	f000 f8d9 	bl	8002314 <RTC_ByteToBcd2>
 8002162:	4603      	mov	r3, r0
 8002164:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8002166:	68bb      	ldr	r3, [r7, #8]
 8002168:	785b      	ldrb	r3, [r3, #1]
 800216a:	4618      	mov	r0, r3
 800216c:	f000 f8d2 	bl	8002314 <RTC_ByteToBcd2>
 8002170:	4603      	mov	r3, r0
 8002172:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8002174:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 8002176:	68bb      	ldr	r3, [r7, #8]
 8002178:	789b      	ldrb	r3, [r3, #2]
 800217a:	4618      	mov	r0, r3
 800217c:	f000 f8ca 	bl	8002314 <RTC_ByteToBcd2>
 8002180:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8002182:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 8002186:	68bb      	ldr	r3, [r7, #8]
 8002188:	781b      	ldrb	r3, [r3, #0]
 800218a:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800218c:	4313      	orrs	r3, r2
 800218e:	617b      	str	r3, [r7, #20]
 8002190:	e00e      	b.n	80021b0 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8002192:	68bb      	ldr	r3, [r7, #8]
 8002194:	78db      	ldrb	r3, [r3, #3]
 8002196:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8002198:	68bb      	ldr	r3, [r7, #8]
 800219a:	785b      	ldrb	r3, [r3, #1]
 800219c:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800219e:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 80021a0:	68ba      	ldr	r2, [r7, #8]
 80021a2:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 80021a4:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 80021a6:	68bb      	ldr	r3, [r7, #8]
 80021a8:	781b      	ldrb	r3, [r3, #0]
 80021aa:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 80021ac:	4313      	orrs	r3, r2
 80021ae:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	22ca      	movs	r2, #202	@ 0xca
 80021b6:	625a      	str	r2, [r3, #36]	@ 0x24
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	2253      	movs	r2, #83	@ 0x53
 80021be:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80021c0:	68f8      	ldr	r0, [r7, #12]
 80021c2:	f000 f84b 	bl	800225c <RTC_EnterInitMode>
 80021c6:	4603      	mov	r3, r0
 80021c8:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 80021ca:	7cfb      	ldrb	r3, [r7, #19]
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d10c      	bne.n	80021ea <HAL_RTC_SetDate+0xe4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	681a      	ldr	r2, [r3, #0]
 80021d4:	697b      	ldr	r3, [r7, #20]
 80021d6:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 80021da:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 80021de:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80021e0:	68f8      	ldr	r0, [r7, #12]
 80021e2:	f000 f872 	bl	80022ca <RTC_ExitInitMode>
 80021e6:	4603      	mov	r3, r0
 80021e8:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 80021ea:	7cfb      	ldrb	r3, [r7, #19]
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d102      	bne.n	80021f6 <HAL_RTC_SetDate+0xf0>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	2201      	movs	r2, #1
 80021f4:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	22ff      	movs	r2, #255	@ 0xff
 80021fc:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	2200      	movs	r2, #0
 8002202:	771a      	strb	r2, [r3, #28]

  return status;
 8002204:	7cfb      	ldrb	r3, [r7, #19]
}
 8002206:	4618      	mov	r0, r3
 8002208:	371c      	adds	r7, #28
 800220a:	46bd      	mov	sp, r7
 800220c:	bd90      	pop	{r4, r7, pc}
	...

08002210 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8002210:	b580      	push	{r7, lr}
 8002212:	b084      	sub	sp, #16
 8002214:	af00      	add	r7, sp, #0
 8002216:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002218:	2300      	movs	r3, #0
 800221a:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	4a0d      	ldr	r2, [pc, #52]	@ (8002258 <HAL_RTC_WaitForSynchro+0x48>)
 8002222:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002224:	f7fe fd94 	bl	8000d50 <HAL_GetTick>
 8002228:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800222a:	e009      	b.n	8002240 <HAL_RTC_WaitForSynchro+0x30>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800222c:	f7fe fd90 	bl	8000d50 <HAL_GetTick>
 8002230:	4602      	mov	r2, r0
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	1ad3      	subs	r3, r2, r3
 8002236:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800223a:	d901      	bls.n	8002240 <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 800223c:	2303      	movs	r3, #3
 800223e:	e007      	b.n	8002250 <HAL_RTC_WaitForSynchro+0x40>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	68db      	ldr	r3, [r3, #12]
 8002246:	f003 0320 	and.w	r3, r3, #32
 800224a:	2b00      	cmp	r3, #0
 800224c:	d0ee      	beq.n	800222c <HAL_RTC_WaitForSynchro+0x1c>
    }
  }

  return HAL_OK;
 800224e:	2300      	movs	r3, #0
}
 8002250:	4618      	mov	r0, r3
 8002252:	3710      	adds	r7, #16
 8002254:	46bd      	mov	sp, r7
 8002256:	bd80      	pop	{r7, pc}
 8002258:	00013f5f 	.word	0x00013f5f

0800225c <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800225c:	b580      	push	{r7, lr}
 800225e:	b084      	sub	sp, #16
 8002260:	af00      	add	r7, sp, #0
 8002262:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002264:	2300      	movs	r3, #0
 8002266:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8002268:	2300      	movs	r3, #0
 800226a:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	68db      	ldr	r3, [r3, #12]
 8002272:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002276:	2b00      	cmp	r3, #0
 8002278:	d122      	bne.n	80022c0 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	68da      	ldr	r2, [r3, #12]
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8002288:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800228a:	f7fe fd61 	bl	8000d50 <HAL_GetTick>
 800228e:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8002290:	e00c      	b.n	80022ac <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8002292:	f7fe fd5d 	bl	8000d50 <HAL_GetTick>
 8002296:	4602      	mov	r2, r0
 8002298:	68bb      	ldr	r3, [r7, #8]
 800229a:	1ad3      	subs	r3, r2, r3
 800229c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80022a0:	d904      	bls.n	80022ac <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	2204      	movs	r2, #4
 80022a6:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 80022a8:	2301      	movs	r3, #1
 80022aa:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	68db      	ldr	r3, [r3, #12]
 80022b2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d102      	bne.n	80022c0 <RTC_EnterInitMode+0x64>
 80022ba:	7bfb      	ldrb	r3, [r7, #15]
 80022bc:	2b01      	cmp	r3, #1
 80022be:	d1e8      	bne.n	8002292 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 80022c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80022c2:	4618      	mov	r0, r3
 80022c4:	3710      	adds	r7, #16
 80022c6:	46bd      	mov	sp, r7
 80022c8:	bd80      	pop	{r7, pc}

080022ca <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 80022ca:	b580      	push	{r7, lr}
 80022cc:	b084      	sub	sp, #16
 80022ce:	af00      	add	r7, sp, #0
 80022d0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80022d2:	2300      	movs	r3, #0
 80022d4:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	68da      	ldr	r2, [r3, #12]
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80022e4:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	689b      	ldr	r3, [r3, #8]
 80022ec:	f003 0320 	and.w	r3, r3, #32
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d10a      	bne.n	800230a <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80022f4:	6878      	ldr	r0, [r7, #4]
 80022f6:	f7ff ff8b 	bl	8002210 <HAL_RTC_WaitForSynchro>
 80022fa:	4603      	mov	r3, r0
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d004      	beq.n	800230a <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	2204      	movs	r2, #4
 8002304:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 8002306:	2301      	movs	r3, #1
 8002308:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 800230a:	7bfb      	ldrb	r3, [r7, #15]
}
 800230c:	4618      	mov	r0, r3
 800230e:	3710      	adds	r7, #16
 8002310:	46bd      	mov	sp, r7
 8002312:	bd80      	pop	{r7, pc}

08002314 <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 8002314:	b480      	push	{r7}
 8002316:	b085      	sub	sp, #20
 8002318:	af00      	add	r7, sp, #0
 800231a:	4603      	mov	r3, r0
 800231c:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 800231e:	2300      	movs	r3, #0
 8002320:	60fb      	str	r3, [r7, #12]

  while (number >= 10U)
 8002322:	e005      	b.n	8002330 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	3301      	adds	r3, #1
 8002328:	60fb      	str	r3, [r7, #12]
    number -= 10U;
 800232a:	79fb      	ldrb	r3, [r7, #7]
 800232c:	3b0a      	subs	r3, #10
 800232e:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 8002330:	79fb      	ldrb	r3, [r7, #7]
 8002332:	2b09      	cmp	r3, #9
 8002334:	d8f6      	bhi.n	8002324 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	b2db      	uxtb	r3, r3
 800233a:	011b      	lsls	r3, r3, #4
 800233c:	b2da      	uxtb	r2, r3
 800233e:	79fb      	ldrb	r3, [r7, #7]
 8002340:	4313      	orrs	r3, r2
 8002342:	b2db      	uxtb	r3, r3
}
 8002344:	4618      	mov	r0, r3
 8002346:	3714      	adds	r7, #20
 8002348:	46bd      	mov	sp, r7
 800234a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800234e:	4770      	bx	lr

08002350 <HAL_RTCEx_SetWakeUpTimer_IT>:
  * @param  WakeUpCounter Wakeup counter
  * @param  WakeUpClock Wakeup clock
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
{
 8002350:	b480      	push	{r7}
 8002352:	b087      	sub	sp, #28
 8002354:	af00      	add	r7, sp, #0
 8002356:	60f8      	str	r0, [r7, #12]
 8002358:	60b9      	str	r1, [r7, #8]
 800235a:	607a      	str	r2, [r7, #4]
  __IO uint32_t count  = RTC_TIMEOUT_VALUE * (SystemCoreClock / 32U / 1000U);
 800235c:	4b5a      	ldr	r3, [pc, #360]	@ (80024c8 <HAL_RTCEx_SetWakeUpTimer_IT+0x178>)
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	4a5a      	ldr	r2, [pc, #360]	@ (80024cc <HAL_RTCEx_SetWakeUpTimer_IT+0x17c>)
 8002362:	fba2 2303 	umull	r2, r3, r2, r3
 8002366:	0adb      	lsrs	r3, r3, #11
 8002368:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800236c:	fb02 f303 	mul.w	r3, r2, r3
 8002370:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_CLOCK(WakeUpClock));
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	7f1b      	ldrb	r3, [r3, #28]
 8002376:	2b01      	cmp	r3, #1
 8002378:	d101      	bne.n	800237e <HAL_RTCEx_SetWakeUpTimer_IT+0x2e>
 800237a:	2302      	movs	r3, #2
 800237c:	e09d      	b.n	80024ba <HAL_RTCEx_SetWakeUpTimer_IT+0x16a>
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	2201      	movs	r2, #1
 8002382:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	2202      	movs	r2, #2
 8002388:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	22ca      	movs	r2, #202	@ 0xca
 8002390:	625a      	str	r2, [r3, #36]	@ 0x24
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	2253      	movs	r2, #83	@ 0x53
 8002398:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Check RTC WUTWF flag is reset only when wakeup timer enabled */
  if ((hrtc->Instance->CR & RTC_CR_WUTE) != 0U)
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	689b      	ldr	r3, [r3, #8]
 80023a0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d018      	beq.n	80023da <HAL_RTCEx_SetWakeUpTimer_IT+0x8a>
  {
    /* Wait till RTC WUTWF flag is reset and if timeout is reached exit */
    do
    {
      count = count - 1U;
 80023a8:	697b      	ldr	r3, [r7, #20]
 80023aa:	3b01      	subs	r3, #1
 80023ac:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 80023ae:	697b      	ldr	r3, [r7, #20]
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d10b      	bne.n	80023cc <HAL_RTCEx_SetWakeUpTimer_IT+0x7c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	22ff      	movs	r2, #255	@ 0xff
 80023ba:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	2203      	movs	r2, #3
 80023c0:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	2200      	movs	r2, #0
 80023c6:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 80023c8:	2303      	movs	r3, #3
 80023ca:	e076      	b.n	80024ba <HAL_RTCEx_SetWakeUpTimer_IT+0x16a>
      }
    } while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) != 0U);
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	68db      	ldr	r3, [r3, #12]
 80023d2:	f003 0304 	and.w	r3, r3, #4
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d1e6      	bne.n	80023a8 <HAL_RTCEx_SetWakeUpTimer_IT+0x58>
  }

  /* Disable the Wakeup timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	689a      	ldr	r2, [r3, #8]
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80023e8:	609a      	str	r2, [r3, #8]

  /* Clear the Wakeup flag */
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	68db      	ldr	r3, [r3, #12]
 80023f0:	b2da      	uxtb	r2, r3
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	f462 6290 	orn	r2, r2, #1152	@ 0x480
 80023fa:	60da      	str	r2, [r3, #12]

  /* Reload the counter */
  count = RTC_TIMEOUT_VALUE * (SystemCoreClock / 32U / 1000U);
 80023fc:	4b32      	ldr	r3, [pc, #200]	@ (80024c8 <HAL_RTCEx_SetWakeUpTimer_IT+0x178>)
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	4a32      	ldr	r2, [pc, #200]	@ (80024cc <HAL_RTCEx_SetWakeUpTimer_IT+0x17c>)
 8002402:	fba2 2303 	umull	r2, r3, r2, r3
 8002406:	0adb      	lsrs	r3, r3, #11
 8002408:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800240c:	fb02 f303 	mul.w	r3, r2, r3
 8002410:	617b      	str	r3, [r7, #20]

  /* Wait till RTC WUTWF flag is set and if timeout is reached exit */
  do
  {
    count = count - 1U;
 8002412:	697b      	ldr	r3, [r7, #20]
 8002414:	3b01      	subs	r3, #1
 8002416:	617b      	str	r3, [r7, #20]
    if (count == 0U)
 8002418:	697b      	ldr	r3, [r7, #20]
 800241a:	2b00      	cmp	r3, #0
 800241c:	d10b      	bne.n	8002436 <HAL_RTCEx_SetWakeUpTimer_IT+0xe6>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	22ff      	movs	r2, #255	@ 0xff
 8002424:	625a      	str	r2, [r3, #36]	@ 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	2203      	movs	r2, #3
 800242a:	775a      	strb	r2, [r3, #29]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	2200      	movs	r2, #0
 8002430:	771a      	strb	r2, [r3, #28]

      return HAL_TIMEOUT;
 8002432:	2303      	movs	r3, #3
 8002434:	e041      	b.n	80024ba <HAL_RTCEx_SetWakeUpTimer_IT+0x16a>
    }
  } while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U);
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	68db      	ldr	r3, [r3, #12]
 800243c:	f003 0304 	and.w	r3, r3, #4
 8002440:	2b00      	cmp	r3, #0
 8002442:	d0e6      	beq.n	8002412 <HAL_RTCEx_SetWakeUpTimer_IT+0xc2>

  /* Clear the Wakeup Timer clock source bits in CR register */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	689a      	ldr	r2, [r3, #8]
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	f022 0207 	bic.w	r2, r2, #7
 8002452:	609a      	str	r2, [r3, #8]

  /* Configure the clock source */
  hrtc->Instance->CR |= (uint32_t)WakeUpClock;
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	6899      	ldr	r1, [r3, #8]
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	687a      	ldr	r2, [r7, #4]
 8002460:	430a      	orrs	r2, r1
 8002462:	609a      	str	r2, [r3, #8]

  /* Configure the Wakeup Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	68ba      	ldr	r2, [r7, #8]
 800246a:	615a      	str	r2, [r3, #20]

  /* RTC wakeup timer Interrupt Configuration: EXTI configuration */
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
 800246c:	4b18      	ldr	r3, [pc, #96]	@ (80024d0 <HAL_RTCEx_SetWakeUpTimer_IT+0x180>)
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	4a17      	ldr	r2, [pc, #92]	@ (80024d0 <HAL_RTCEx_SetWakeUpTimer_IT+0x180>)
 8002472:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002476:	6013      	str	r3, [r2, #0]
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_RISING_EDGE();
 8002478:	4b15      	ldr	r3, [pc, #84]	@ (80024d0 <HAL_RTCEx_SetWakeUpTimer_IT+0x180>)
 800247a:	689b      	ldr	r3, [r3, #8]
 800247c:	4a14      	ldr	r2, [pc, #80]	@ (80024d0 <HAL_RTCEx_SetWakeUpTimer_IT+0x180>)
 800247e:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002482:	6093      	str	r3, [r2, #8]

  /* Configure the interrupt in the RTC_CR register */
  __HAL_RTC_WAKEUPTIMER_ENABLE_IT(hrtc, RTC_IT_WUT);
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	689a      	ldr	r2, [r3, #8]
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002492:	609a      	str	r2, [r3, #8]

  /* Enable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	689a      	ldr	r2, [r3, #8]
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80024a2:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	22ff      	movs	r2, #255	@ 0xff
 80024aa:	625a      	str	r2, [r3, #36]	@ 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	2201      	movs	r2, #1
 80024b0:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	2200      	movs	r2, #0
 80024b6:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 80024b8:	2300      	movs	r3, #0
}
 80024ba:	4618      	mov	r0, r3
 80024bc:	371c      	adds	r7, #28
 80024be:	46bd      	mov	sp, r7
 80024c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c4:	4770      	bx	lr
 80024c6:	bf00      	nop
 80024c8:	20000000 	.word	0x20000000
 80024cc:	10624dd3 	.word	0x10624dd3
 80024d0:	40013c00 	.word	0x40013c00

080024d4 <HAL_RTCEx_DeactivateWakeUpTimer>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_DeactivateWakeUpTimer(RTC_HandleTypeDef *hrtc)
{
 80024d4:	b580      	push	{r7, lr}
 80024d6:	b084      	sub	sp, #16
 80024d8:	af00      	add	r7, sp, #0
 80024da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80024dc:	2300      	movs	r3, #0
 80024de:	60fb      	str	r3, [r7, #12]

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	7f1b      	ldrb	r3, [r3, #28]
 80024e4:	2b01      	cmp	r3, #1
 80024e6:	d101      	bne.n	80024ec <HAL_RTCEx_DeactivateWakeUpTimer+0x18>
 80024e8:	2302      	movs	r3, #2
 80024ea:	e047      	b.n	800257c <HAL_RTCEx_DeactivateWakeUpTimer+0xa8>
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	2201      	movs	r2, #1
 80024f0:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	2202      	movs	r2, #2
 80024f6:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	22ca      	movs	r2, #202	@ 0xca
 80024fe:	625a      	str	r2, [r3, #36]	@ 0x24
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	2253      	movs	r2, #83	@ 0x53
 8002506:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Disable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	689a      	ldr	r2, [r3, #8]
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002516:	609a      	str	r2, [r3, #8]

  /* In case of interrupt mode is used, the interrupt source must disabled */
  __HAL_RTC_WAKEUPTIMER_DISABLE_IT(hrtc, RTC_IT_WUT);
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	689a      	ldr	r2, [r3, #8]
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8002526:	609a      	str	r2, [r3, #8]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002528:	f7fe fc12 	bl	8000d50 <HAL_GetTick>
 800252c:	60f8      	str	r0, [r7, #12]

  /* Wait till RTC WUTWF flag is set and if timeout is reached exit */
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 800252e:	e013      	b.n	8002558 <HAL_RTCEx_DeactivateWakeUpTimer+0x84>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8002530:	f7fe fc0e 	bl	8000d50 <HAL_GetTick>
 8002534:	4602      	mov	r2, r0
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	1ad3      	subs	r3, r2, r3
 800253a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800253e:	d90b      	bls.n	8002558 <HAL_RTCEx_DeactivateWakeUpTimer+0x84>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	22ff      	movs	r2, #255	@ 0xff
 8002546:	625a      	str	r2, [r3, #36]	@ 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	2203      	movs	r2, #3
 800254c:	775a      	strb	r2, [r3, #29]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	2200      	movs	r2, #0
 8002552:	771a      	strb	r2, [r3, #28]

      return HAL_TIMEOUT;
 8002554:	2303      	movs	r3, #3
 8002556:	e011      	b.n	800257c <HAL_RTCEx_DeactivateWakeUpTimer+0xa8>
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	68db      	ldr	r3, [r3, #12]
 800255e:	f003 0304 	and.w	r3, r3, #4
 8002562:	2b00      	cmp	r3, #0
 8002564:	d0e4      	beq.n	8002530 <HAL_RTCEx_DeactivateWakeUpTimer+0x5c>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	22ff      	movs	r2, #255	@ 0xff
 800256c:	625a      	str	r2, [r3, #36]	@ 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	2201      	movs	r2, #1
 8002572:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	2200      	movs	r2, #0
 8002578:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 800257a:	2300      	movs	r3, #0
}
 800257c:	4618      	mov	r0, r3
 800257e:	3710      	adds	r7, #16
 8002580:	46bd      	mov	sp, r7
 8002582:	bd80      	pop	{r7, pc}

08002584 <HAL_RTCEx_WakeUpTimerIRQHandler>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
void HAL_RTCEx_WakeUpTimerIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8002584:	b580      	push	{r7, lr}
 8002586:	b082      	sub	sp, #8
 8002588:	af00      	add	r7, sp, #0
 800258a:	6078      	str	r0, [r7, #4]
  /* Clear the EXTI's line Flag for RTC WakeUpTimer */
  __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG();
 800258c:	4b0e      	ldr	r3, [pc, #56]	@ (80025c8 <HAL_RTCEx_WakeUpTimerIRQHandler+0x44>)
 800258e:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8002592:	615a      	str	r2, [r3, #20]

  /* Get the pending status of the Wakeup timer Interrupt */
  if (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTF) != 0U)
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	68db      	ldr	r3, [r3, #12]
 800259a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d00b      	beq.n	80025ba <HAL_RTCEx_WakeUpTimerIRQHandler+0x36>
  {
    /* Clear the Wakeup timer interrupt pending bit */
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	68db      	ldr	r3, [r3, #12]
 80025a8:	b2da      	uxtb	r2, r3
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	f462 6290 	orn	r2, r2, #1152	@ 0x480
 80025b2:	60da      	str	r2, [r3, #12]

    /* Wakeup timer callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    hrtc->WakeUpTimerEventCallback(hrtc);
#else
    HAL_RTCEx_WakeUpTimerEventCallback(hrtc);
 80025b4:	6878      	ldr	r0, [r7, #4]
 80025b6:	f000 f809 	bl	80025cc <HAL_RTCEx_WakeUpTimerEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	2201      	movs	r2, #1
 80025be:	775a      	strb	r2, [r3, #29]
}
 80025c0:	bf00      	nop
 80025c2:	3708      	adds	r7, #8
 80025c4:	46bd      	mov	sp, r7
 80025c6:	bd80      	pop	{r7, pc}
 80025c8:	40013c00 	.word	0x40013c00

080025cc <HAL_RTCEx_WakeUpTimerEventCallback>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTCEx_WakeUpTimerEventCallback(RTC_HandleTypeDef *hrtc)
{
 80025cc:	b480      	push	{r7}
 80025ce:	b083      	sub	sp, #12
 80025d0:	af00      	add	r7, sp, #0
 80025d2:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_RTCEx_WakeUpTimerEventCallback could be implemented in the user file
   */
}
 80025d4:	bf00      	nop
 80025d6:	370c      	adds	r7, #12
 80025d8:	46bd      	mov	sp, r7
 80025da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025de:	4770      	bx	lr

080025e0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80025e0:	b580      	push	{r7, lr}
 80025e2:	b082      	sub	sp, #8
 80025e4:	af00      	add	r7, sp, #0
 80025e6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d101      	bne.n	80025f2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80025ee:	2301      	movs	r3, #1
 80025f0:	e042      	b.n	8002678 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80025f8:	b2db      	uxtb	r3, r3
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d106      	bne.n	800260c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	2200      	movs	r2, #0
 8002602:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002606:	6878      	ldr	r0, [r7, #4]
 8002608:	f7fe fa48 	bl	8000a9c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	2224      	movs	r2, #36	@ 0x24
 8002610:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	68da      	ldr	r2, [r3, #12]
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002622:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002624:	6878      	ldr	r0, [r7, #4]
 8002626:	f000 f973 	bl	8002910 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	691a      	ldr	r2, [r3, #16]
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002638:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	695a      	ldr	r2, [r3, #20]
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002648:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	68da      	ldr	r2, [r3, #12]
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002658:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	2200      	movs	r2, #0
 800265e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	2220      	movs	r2, #32
 8002664:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	2220      	movs	r2, #32
 800266c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	2200      	movs	r2, #0
 8002674:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8002676:	2300      	movs	r3, #0
}
 8002678:	4618      	mov	r0, r3
 800267a:	3708      	adds	r7, #8
 800267c:	46bd      	mov	sp, r7
 800267e:	bd80      	pop	{r7, pc}

08002680 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002680:	b580      	push	{r7, lr}
 8002682:	b08a      	sub	sp, #40	@ 0x28
 8002684:	af02      	add	r7, sp, #8
 8002686:	60f8      	str	r0, [r7, #12]
 8002688:	60b9      	str	r1, [r7, #8]
 800268a:	603b      	str	r3, [r7, #0]
 800268c:	4613      	mov	r3, r2
 800268e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002690:	2300      	movs	r3, #0
 8002692:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800269a:	b2db      	uxtb	r3, r3
 800269c:	2b20      	cmp	r3, #32
 800269e:	d175      	bne.n	800278c <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80026a0:	68bb      	ldr	r3, [r7, #8]
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d002      	beq.n	80026ac <HAL_UART_Transmit+0x2c>
 80026a6:	88fb      	ldrh	r3, [r7, #6]
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d101      	bne.n	80026b0 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80026ac:	2301      	movs	r3, #1
 80026ae:	e06e      	b.n	800278e <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	2200      	movs	r2, #0
 80026b4:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	2221      	movs	r2, #33	@ 0x21
 80026ba:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80026be:	f7fe fb47 	bl	8000d50 <HAL_GetTick>
 80026c2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	88fa      	ldrh	r2, [r7, #6]
 80026c8:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	88fa      	ldrh	r2, [r7, #6]
 80026ce:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	689b      	ldr	r3, [r3, #8]
 80026d4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80026d8:	d108      	bne.n	80026ec <HAL_UART_Transmit+0x6c>
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	691b      	ldr	r3, [r3, #16]
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d104      	bne.n	80026ec <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80026e2:	2300      	movs	r3, #0
 80026e4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80026e6:	68bb      	ldr	r3, [r7, #8]
 80026e8:	61bb      	str	r3, [r7, #24]
 80026ea:	e003      	b.n	80026f4 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80026ec:	68bb      	ldr	r3, [r7, #8]
 80026ee:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80026f0:	2300      	movs	r3, #0
 80026f2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80026f4:	e02e      	b.n	8002754 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80026f6:	683b      	ldr	r3, [r7, #0]
 80026f8:	9300      	str	r3, [sp, #0]
 80026fa:	697b      	ldr	r3, [r7, #20]
 80026fc:	2200      	movs	r2, #0
 80026fe:	2180      	movs	r1, #128	@ 0x80
 8002700:	68f8      	ldr	r0, [r7, #12]
 8002702:	f000 f848 	bl	8002796 <UART_WaitOnFlagUntilTimeout>
 8002706:	4603      	mov	r3, r0
 8002708:	2b00      	cmp	r3, #0
 800270a:	d005      	beq.n	8002718 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	2220      	movs	r2, #32
 8002710:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8002714:	2303      	movs	r3, #3
 8002716:	e03a      	b.n	800278e <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8002718:	69fb      	ldr	r3, [r7, #28]
 800271a:	2b00      	cmp	r3, #0
 800271c:	d10b      	bne.n	8002736 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800271e:	69bb      	ldr	r3, [r7, #24]
 8002720:	881b      	ldrh	r3, [r3, #0]
 8002722:	461a      	mov	r2, r3
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800272c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800272e:	69bb      	ldr	r3, [r7, #24]
 8002730:	3302      	adds	r3, #2
 8002732:	61bb      	str	r3, [r7, #24]
 8002734:	e007      	b.n	8002746 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002736:	69fb      	ldr	r3, [r7, #28]
 8002738:	781a      	ldrb	r2, [r3, #0]
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002740:	69fb      	ldr	r3, [r7, #28]
 8002742:	3301      	adds	r3, #1
 8002744:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800274a:	b29b      	uxth	r3, r3
 800274c:	3b01      	subs	r3, #1
 800274e:	b29a      	uxth	r2, r3
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002758:	b29b      	uxth	r3, r3
 800275a:	2b00      	cmp	r3, #0
 800275c:	d1cb      	bne.n	80026f6 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800275e:	683b      	ldr	r3, [r7, #0]
 8002760:	9300      	str	r3, [sp, #0]
 8002762:	697b      	ldr	r3, [r7, #20]
 8002764:	2200      	movs	r2, #0
 8002766:	2140      	movs	r1, #64	@ 0x40
 8002768:	68f8      	ldr	r0, [r7, #12]
 800276a:	f000 f814 	bl	8002796 <UART_WaitOnFlagUntilTimeout>
 800276e:	4603      	mov	r3, r0
 8002770:	2b00      	cmp	r3, #0
 8002772:	d005      	beq.n	8002780 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	2220      	movs	r2, #32
 8002778:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 800277c:	2303      	movs	r3, #3
 800277e:	e006      	b.n	800278e <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	2220      	movs	r2, #32
 8002784:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8002788:	2300      	movs	r3, #0
 800278a:	e000      	b.n	800278e <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 800278c:	2302      	movs	r3, #2
  }
}
 800278e:	4618      	mov	r0, r3
 8002790:	3720      	adds	r7, #32
 8002792:	46bd      	mov	sp, r7
 8002794:	bd80      	pop	{r7, pc}

08002796 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002796:	b580      	push	{r7, lr}
 8002798:	b086      	sub	sp, #24
 800279a:	af00      	add	r7, sp, #0
 800279c:	60f8      	str	r0, [r7, #12]
 800279e:	60b9      	str	r1, [r7, #8]
 80027a0:	603b      	str	r3, [r7, #0]
 80027a2:	4613      	mov	r3, r2
 80027a4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80027a6:	e03b      	b.n	8002820 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80027a8:	6a3b      	ldr	r3, [r7, #32]
 80027aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80027ae:	d037      	beq.n	8002820 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80027b0:	f7fe face 	bl	8000d50 <HAL_GetTick>
 80027b4:	4602      	mov	r2, r0
 80027b6:	683b      	ldr	r3, [r7, #0]
 80027b8:	1ad3      	subs	r3, r2, r3
 80027ba:	6a3a      	ldr	r2, [r7, #32]
 80027bc:	429a      	cmp	r2, r3
 80027be:	d302      	bcc.n	80027c6 <UART_WaitOnFlagUntilTimeout+0x30>
 80027c0:	6a3b      	ldr	r3, [r7, #32]
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d101      	bne.n	80027ca <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80027c6:	2303      	movs	r3, #3
 80027c8:	e03a      	b.n	8002840 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	68db      	ldr	r3, [r3, #12]
 80027d0:	f003 0304 	and.w	r3, r3, #4
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d023      	beq.n	8002820 <UART_WaitOnFlagUntilTimeout+0x8a>
 80027d8:	68bb      	ldr	r3, [r7, #8]
 80027da:	2b80      	cmp	r3, #128	@ 0x80
 80027dc:	d020      	beq.n	8002820 <UART_WaitOnFlagUntilTimeout+0x8a>
 80027de:	68bb      	ldr	r3, [r7, #8]
 80027e0:	2b40      	cmp	r3, #64	@ 0x40
 80027e2:	d01d      	beq.n	8002820 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	f003 0308 	and.w	r3, r3, #8
 80027ee:	2b08      	cmp	r3, #8
 80027f0:	d116      	bne.n	8002820 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80027f2:	2300      	movs	r3, #0
 80027f4:	617b      	str	r3, [r7, #20]
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	617b      	str	r3, [r7, #20]
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	685b      	ldr	r3, [r3, #4]
 8002804:	617b      	str	r3, [r7, #20]
 8002806:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002808:	68f8      	ldr	r0, [r7, #12]
 800280a:	f000 f81d 	bl	8002848 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	2208      	movs	r2, #8
 8002812:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	2200      	movs	r2, #0
 8002818:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800281c:	2301      	movs	r3, #1
 800281e:	e00f      	b.n	8002840 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	681a      	ldr	r2, [r3, #0]
 8002826:	68bb      	ldr	r3, [r7, #8]
 8002828:	4013      	ands	r3, r2
 800282a:	68ba      	ldr	r2, [r7, #8]
 800282c:	429a      	cmp	r2, r3
 800282e:	bf0c      	ite	eq
 8002830:	2301      	moveq	r3, #1
 8002832:	2300      	movne	r3, #0
 8002834:	b2db      	uxtb	r3, r3
 8002836:	461a      	mov	r2, r3
 8002838:	79fb      	ldrb	r3, [r7, #7]
 800283a:	429a      	cmp	r2, r3
 800283c:	d0b4      	beq.n	80027a8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800283e:	2300      	movs	r3, #0
}
 8002840:	4618      	mov	r0, r3
 8002842:	3718      	adds	r7, #24
 8002844:	46bd      	mov	sp, r7
 8002846:	bd80      	pop	{r7, pc}

08002848 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002848:	b480      	push	{r7}
 800284a:	b095      	sub	sp, #84	@ 0x54
 800284c:	af00      	add	r7, sp, #0
 800284e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	330c      	adds	r3, #12
 8002856:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002858:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800285a:	e853 3f00 	ldrex	r3, [r3]
 800285e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8002860:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002862:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002866:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	330c      	adds	r3, #12
 800286e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002870:	643a      	str	r2, [r7, #64]	@ 0x40
 8002872:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002874:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8002876:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8002878:	e841 2300 	strex	r3, r2, [r1]
 800287c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800287e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002880:	2b00      	cmp	r3, #0
 8002882:	d1e5      	bne.n	8002850 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	3314      	adds	r3, #20
 800288a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800288c:	6a3b      	ldr	r3, [r7, #32]
 800288e:	e853 3f00 	ldrex	r3, [r3]
 8002892:	61fb      	str	r3, [r7, #28]
   return(result);
 8002894:	69fb      	ldr	r3, [r7, #28]
 8002896:	f023 0301 	bic.w	r3, r3, #1
 800289a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	3314      	adds	r3, #20
 80028a2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80028a4:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80028a6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80028a8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80028aa:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80028ac:	e841 2300 	strex	r3, r2, [r1]
 80028b0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80028b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d1e5      	bne.n	8002884 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028bc:	2b01      	cmp	r3, #1
 80028be:	d119      	bne.n	80028f4 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	330c      	adds	r3, #12
 80028c6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	e853 3f00 	ldrex	r3, [r3]
 80028ce:	60bb      	str	r3, [r7, #8]
   return(result);
 80028d0:	68bb      	ldr	r3, [r7, #8]
 80028d2:	f023 0310 	bic.w	r3, r3, #16
 80028d6:	647b      	str	r3, [r7, #68]	@ 0x44
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	330c      	adds	r3, #12
 80028de:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80028e0:	61ba      	str	r2, [r7, #24]
 80028e2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80028e4:	6979      	ldr	r1, [r7, #20]
 80028e6:	69ba      	ldr	r2, [r7, #24]
 80028e8:	e841 2300 	strex	r3, r2, [r1]
 80028ec:	613b      	str	r3, [r7, #16]
   return(result);
 80028ee:	693b      	ldr	r3, [r7, #16]
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d1e5      	bne.n	80028c0 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	2220      	movs	r2, #32
 80028f8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	2200      	movs	r2, #0
 8002900:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8002902:	bf00      	nop
 8002904:	3754      	adds	r7, #84	@ 0x54
 8002906:	46bd      	mov	sp, r7
 8002908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800290c:	4770      	bx	lr
	...

08002910 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002910:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002914:	b0c0      	sub	sp, #256	@ 0x100
 8002916:	af00      	add	r7, sp, #0
 8002918:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800291c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	691b      	ldr	r3, [r3, #16]
 8002924:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8002928:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800292c:	68d9      	ldr	r1, [r3, #12]
 800292e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002932:	681a      	ldr	r2, [r3, #0]
 8002934:	ea40 0301 	orr.w	r3, r0, r1
 8002938:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800293a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800293e:	689a      	ldr	r2, [r3, #8]
 8002940:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002944:	691b      	ldr	r3, [r3, #16]
 8002946:	431a      	orrs	r2, r3
 8002948:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800294c:	695b      	ldr	r3, [r3, #20]
 800294e:	431a      	orrs	r2, r3
 8002950:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002954:	69db      	ldr	r3, [r3, #28]
 8002956:	4313      	orrs	r3, r2
 8002958:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800295c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	68db      	ldr	r3, [r3, #12]
 8002964:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8002968:	f021 010c 	bic.w	r1, r1, #12
 800296c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002970:	681a      	ldr	r2, [r3, #0]
 8002972:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8002976:	430b      	orrs	r3, r1
 8002978:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800297a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	695b      	ldr	r3, [r3, #20]
 8002982:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8002986:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800298a:	6999      	ldr	r1, [r3, #24]
 800298c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002990:	681a      	ldr	r2, [r3, #0]
 8002992:	ea40 0301 	orr.w	r3, r0, r1
 8002996:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002998:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800299c:	681a      	ldr	r2, [r3, #0]
 800299e:	4b8f      	ldr	r3, [pc, #572]	@ (8002bdc <UART_SetConfig+0x2cc>)
 80029a0:	429a      	cmp	r2, r3
 80029a2:	d005      	beq.n	80029b0 <UART_SetConfig+0xa0>
 80029a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80029a8:	681a      	ldr	r2, [r3, #0]
 80029aa:	4b8d      	ldr	r3, [pc, #564]	@ (8002be0 <UART_SetConfig+0x2d0>)
 80029ac:	429a      	cmp	r2, r3
 80029ae:	d104      	bne.n	80029ba <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80029b0:	f7ff f98a 	bl	8001cc8 <HAL_RCC_GetPCLK2Freq>
 80029b4:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80029b8:	e003      	b.n	80029c2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80029ba:	f7ff f971 	bl	8001ca0 <HAL_RCC_GetPCLK1Freq>
 80029be:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80029c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80029c6:	69db      	ldr	r3, [r3, #28]
 80029c8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80029cc:	f040 810c 	bne.w	8002be8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80029d0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80029d4:	2200      	movs	r2, #0
 80029d6:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80029da:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80029de:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80029e2:	4622      	mov	r2, r4
 80029e4:	462b      	mov	r3, r5
 80029e6:	1891      	adds	r1, r2, r2
 80029e8:	65b9      	str	r1, [r7, #88]	@ 0x58
 80029ea:	415b      	adcs	r3, r3
 80029ec:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80029ee:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80029f2:	4621      	mov	r1, r4
 80029f4:	eb12 0801 	adds.w	r8, r2, r1
 80029f8:	4629      	mov	r1, r5
 80029fa:	eb43 0901 	adc.w	r9, r3, r1
 80029fe:	f04f 0200 	mov.w	r2, #0
 8002a02:	f04f 0300 	mov.w	r3, #0
 8002a06:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002a0a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002a0e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002a12:	4690      	mov	r8, r2
 8002a14:	4699      	mov	r9, r3
 8002a16:	4623      	mov	r3, r4
 8002a18:	eb18 0303 	adds.w	r3, r8, r3
 8002a1c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8002a20:	462b      	mov	r3, r5
 8002a22:	eb49 0303 	adc.w	r3, r9, r3
 8002a26:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8002a2a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002a2e:	685b      	ldr	r3, [r3, #4]
 8002a30:	2200      	movs	r2, #0
 8002a32:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8002a36:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8002a3a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8002a3e:	460b      	mov	r3, r1
 8002a40:	18db      	adds	r3, r3, r3
 8002a42:	653b      	str	r3, [r7, #80]	@ 0x50
 8002a44:	4613      	mov	r3, r2
 8002a46:	eb42 0303 	adc.w	r3, r2, r3
 8002a4a:	657b      	str	r3, [r7, #84]	@ 0x54
 8002a4c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8002a50:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8002a54:	f7fd fc1c 	bl	8000290 <__aeabi_uldivmod>
 8002a58:	4602      	mov	r2, r0
 8002a5a:	460b      	mov	r3, r1
 8002a5c:	4b61      	ldr	r3, [pc, #388]	@ (8002be4 <UART_SetConfig+0x2d4>)
 8002a5e:	fba3 2302 	umull	r2, r3, r3, r2
 8002a62:	095b      	lsrs	r3, r3, #5
 8002a64:	011c      	lsls	r4, r3, #4
 8002a66:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002a6a:	2200      	movs	r2, #0
 8002a6c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8002a70:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8002a74:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8002a78:	4642      	mov	r2, r8
 8002a7a:	464b      	mov	r3, r9
 8002a7c:	1891      	adds	r1, r2, r2
 8002a7e:	64b9      	str	r1, [r7, #72]	@ 0x48
 8002a80:	415b      	adcs	r3, r3
 8002a82:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002a84:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8002a88:	4641      	mov	r1, r8
 8002a8a:	eb12 0a01 	adds.w	sl, r2, r1
 8002a8e:	4649      	mov	r1, r9
 8002a90:	eb43 0b01 	adc.w	fp, r3, r1
 8002a94:	f04f 0200 	mov.w	r2, #0
 8002a98:	f04f 0300 	mov.w	r3, #0
 8002a9c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002aa0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002aa4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002aa8:	4692      	mov	sl, r2
 8002aaa:	469b      	mov	fp, r3
 8002aac:	4643      	mov	r3, r8
 8002aae:	eb1a 0303 	adds.w	r3, sl, r3
 8002ab2:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8002ab6:	464b      	mov	r3, r9
 8002ab8:	eb4b 0303 	adc.w	r3, fp, r3
 8002abc:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8002ac0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002ac4:	685b      	ldr	r3, [r3, #4]
 8002ac6:	2200      	movs	r2, #0
 8002ac8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8002acc:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8002ad0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8002ad4:	460b      	mov	r3, r1
 8002ad6:	18db      	adds	r3, r3, r3
 8002ad8:	643b      	str	r3, [r7, #64]	@ 0x40
 8002ada:	4613      	mov	r3, r2
 8002adc:	eb42 0303 	adc.w	r3, r2, r3
 8002ae0:	647b      	str	r3, [r7, #68]	@ 0x44
 8002ae2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8002ae6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8002aea:	f7fd fbd1 	bl	8000290 <__aeabi_uldivmod>
 8002aee:	4602      	mov	r2, r0
 8002af0:	460b      	mov	r3, r1
 8002af2:	4611      	mov	r1, r2
 8002af4:	4b3b      	ldr	r3, [pc, #236]	@ (8002be4 <UART_SetConfig+0x2d4>)
 8002af6:	fba3 2301 	umull	r2, r3, r3, r1
 8002afa:	095b      	lsrs	r3, r3, #5
 8002afc:	2264      	movs	r2, #100	@ 0x64
 8002afe:	fb02 f303 	mul.w	r3, r2, r3
 8002b02:	1acb      	subs	r3, r1, r3
 8002b04:	00db      	lsls	r3, r3, #3
 8002b06:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8002b0a:	4b36      	ldr	r3, [pc, #216]	@ (8002be4 <UART_SetConfig+0x2d4>)
 8002b0c:	fba3 2302 	umull	r2, r3, r3, r2
 8002b10:	095b      	lsrs	r3, r3, #5
 8002b12:	005b      	lsls	r3, r3, #1
 8002b14:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8002b18:	441c      	add	r4, r3
 8002b1a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002b1e:	2200      	movs	r2, #0
 8002b20:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8002b24:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8002b28:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8002b2c:	4642      	mov	r2, r8
 8002b2e:	464b      	mov	r3, r9
 8002b30:	1891      	adds	r1, r2, r2
 8002b32:	63b9      	str	r1, [r7, #56]	@ 0x38
 8002b34:	415b      	adcs	r3, r3
 8002b36:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002b38:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8002b3c:	4641      	mov	r1, r8
 8002b3e:	1851      	adds	r1, r2, r1
 8002b40:	6339      	str	r1, [r7, #48]	@ 0x30
 8002b42:	4649      	mov	r1, r9
 8002b44:	414b      	adcs	r3, r1
 8002b46:	637b      	str	r3, [r7, #52]	@ 0x34
 8002b48:	f04f 0200 	mov.w	r2, #0
 8002b4c:	f04f 0300 	mov.w	r3, #0
 8002b50:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8002b54:	4659      	mov	r1, fp
 8002b56:	00cb      	lsls	r3, r1, #3
 8002b58:	4651      	mov	r1, sl
 8002b5a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002b5e:	4651      	mov	r1, sl
 8002b60:	00ca      	lsls	r2, r1, #3
 8002b62:	4610      	mov	r0, r2
 8002b64:	4619      	mov	r1, r3
 8002b66:	4603      	mov	r3, r0
 8002b68:	4642      	mov	r2, r8
 8002b6a:	189b      	adds	r3, r3, r2
 8002b6c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8002b70:	464b      	mov	r3, r9
 8002b72:	460a      	mov	r2, r1
 8002b74:	eb42 0303 	adc.w	r3, r2, r3
 8002b78:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002b7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002b80:	685b      	ldr	r3, [r3, #4]
 8002b82:	2200      	movs	r2, #0
 8002b84:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8002b88:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8002b8c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8002b90:	460b      	mov	r3, r1
 8002b92:	18db      	adds	r3, r3, r3
 8002b94:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002b96:	4613      	mov	r3, r2
 8002b98:	eb42 0303 	adc.w	r3, r2, r3
 8002b9c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002b9e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002ba2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8002ba6:	f7fd fb73 	bl	8000290 <__aeabi_uldivmod>
 8002baa:	4602      	mov	r2, r0
 8002bac:	460b      	mov	r3, r1
 8002bae:	4b0d      	ldr	r3, [pc, #52]	@ (8002be4 <UART_SetConfig+0x2d4>)
 8002bb0:	fba3 1302 	umull	r1, r3, r3, r2
 8002bb4:	095b      	lsrs	r3, r3, #5
 8002bb6:	2164      	movs	r1, #100	@ 0x64
 8002bb8:	fb01 f303 	mul.w	r3, r1, r3
 8002bbc:	1ad3      	subs	r3, r2, r3
 8002bbe:	00db      	lsls	r3, r3, #3
 8002bc0:	3332      	adds	r3, #50	@ 0x32
 8002bc2:	4a08      	ldr	r2, [pc, #32]	@ (8002be4 <UART_SetConfig+0x2d4>)
 8002bc4:	fba2 2303 	umull	r2, r3, r2, r3
 8002bc8:	095b      	lsrs	r3, r3, #5
 8002bca:	f003 0207 	and.w	r2, r3, #7
 8002bce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	4422      	add	r2, r4
 8002bd6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002bd8:	e106      	b.n	8002de8 <UART_SetConfig+0x4d8>
 8002bda:	bf00      	nop
 8002bdc:	40011000 	.word	0x40011000
 8002be0:	40011400 	.word	0x40011400
 8002be4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002be8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002bec:	2200      	movs	r2, #0
 8002bee:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8002bf2:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8002bf6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8002bfa:	4642      	mov	r2, r8
 8002bfc:	464b      	mov	r3, r9
 8002bfe:	1891      	adds	r1, r2, r2
 8002c00:	6239      	str	r1, [r7, #32]
 8002c02:	415b      	adcs	r3, r3
 8002c04:	627b      	str	r3, [r7, #36]	@ 0x24
 8002c06:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002c0a:	4641      	mov	r1, r8
 8002c0c:	1854      	adds	r4, r2, r1
 8002c0e:	4649      	mov	r1, r9
 8002c10:	eb43 0501 	adc.w	r5, r3, r1
 8002c14:	f04f 0200 	mov.w	r2, #0
 8002c18:	f04f 0300 	mov.w	r3, #0
 8002c1c:	00eb      	lsls	r3, r5, #3
 8002c1e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002c22:	00e2      	lsls	r2, r4, #3
 8002c24:	4614      	mov	r4, r2
 8002c26:	461d      	mov	r5, r3
 8002c28:	4643      	mov	r3, r8
 8002c2a:	18e3      	adds	r3, r4, r3
 8002c2c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8002c30:	464b      	mov	r3, r9
 8002c32:	eb45 0303 	adc.w	r3, r5, r3
 8002c36:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8002c3a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002c3e:	685b      	ldr	r3, [r3, #4]
 8002c40:	2200      	movs	r2, #0
 8002c42:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8002c46:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8002c4a:	f04f 0200 	mov.w	r2, #0
 8002c4e:	f04f 0300 	mov.w	r3, #0
 8002c52:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8002c56:	4629      	mov	r1, r5
 8002c58:	008b      	lsls	r3, r1, #2
 8002c5a:	4621      	mov	r1, r4
 8002c5c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002c60:	4621      	mov	r1, r4
 8002c62:	008a      	lsls	r2, r1, #2
 8002c64:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8002c68:	f7fd fb12 	bl	8000290 <__aeabi_uldivmod>
 8002c6c:	4602      	mov	r2, r0
 8002c6e:	460b      	mov	r3, r1
 8002c70:	4b60      	ldr	r3, [pc, #384]	@ (8002df4 <UART_SetConfig+0x4e4>)
 8002c72:	fba3 2302 	umull	r2, r3, r3, r2
 8002c76:	095b      	lsrs	r3, r3, #5
 8002c78:	011c      	lsls	r4, r3, #4
 8002c7a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002c7e:	2200      	movs	r2, #0
 8002c80:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8002c84:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8002c88:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8002c8c:	4642      	mov	r2, r8
 8002c8e:	464b      	mov	r3, r9
 8002c90:	1891      	adds	r1, r2, r2
 8002c92:	61b9      	str	r1, [r7, #24]
 8002c94:	415b      	adcs	r3, r3
 8002c96:	61fb      	str	r3, [r7, #28]
 8002c98:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002c9c:	4641      	mov	r1, r8
 8002c9e:	1851      	adds	r1, r2, r1
 8002ca0:	6139      	str	r1, [r7, #16]
 8002ca2:	4649      	mov	r1, r9
 8002ca4:	414b      	adcs	r3, r1
 8002ca6:	617b      	str	r3, [r7, #20]
 8002ca8:	f04f 0200 	mov.w	r2, #0
 8002cac:	f04f 0300 	mov.w	r3, #0
 8002cb0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002cb4:	4659      	mov	r1, fp
 8002cb6:	00cb      	lsls	r3, r1, #3
 8002cb8:	4651      	mov	r1, sl
 8002cba:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002cbe:	4651      	mov	r1, sl
 8002cc0:	00ca      	lsls	r2, r1, #3
 8002cc2:	4610      	mov	r0, r2
 8002cc4:	4619      	mov	r1, r3
 8002cc6:	4603      	mov	r3, r0
 8002cc8:	4642      	mov	r2, r8
 8002cca:	189b      	adds	r3, r3, r2
 8002ccc:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8002cd0:	464b      	mov	r3, r9
 8002cd2:	460a      	mov	r2, r1
 8002cd4:	eb42 0303 	adc.w	r3, r2, r3
 8002cd8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8002cdc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002ce0:	685b      	ldr	r3, [r3, #4]
 8002ce2:	2200      	movs	r2, #0
 8002ce4:	67bb      	str	r3, [r7, #120]	@ 0x78
 8002ce6:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8002ce8:	f04f 0200 	mov.w	r2, #0
 8002cec:	f04f 0300 	mov.w	r3, #0
 8002cf0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8002cf4:	4649      	mov	r1, r9
 8002cf6:	008b      	lsls	r3, r1, #2
 8002cf8:	4641      	mov	r1, r8
 8002cfa:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002cfe:	4641      	mov	r1, r8
 8002d00:	008a      	lsls	r2, r1, #2
 8002d02:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8002d06:	f7fd fac3 	bl	8000290 <__aeabi_uldivmod>
 8002d0a:	4602      	mov	r2, r0
 8002d0c:	460b      	mov	r3, r1
 8002d0e:	4611      	mov	r1, r2
 8002d10:	4b38      	ldr	r3, [pc, #224]	@ (8002df4 <UART_SetConfig+0x4e4>)
 8002d12:	fba3 2301 	umull	r2, r3, r3, r1
 8002d16:	095b      	lsrs	r3, r3, #5
 8002d18:	2264      	movs	r2, #100	@ 0x64
 8002d1a:	fb02 f303 	mul.w	r3, r2, r3
 8002d1e:	1acb      	subs	r3, r1, r3
 8002d20:	011b      	lsls	r3, r3, #4
 8002d22:	3332      	adds	r3, #50	@ 0x32
 8002d24:	4a33      	ldr	r2, [pc, #204]	@ (8002df4 <UART_SetConfig+0x4e4>)
 8002d26:	fba2 2303 	umull	r2, r3, r2, r3
 8002d2a:	095b      	lsrs	r3, r3, #5
 8002d2c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002d30:	441c      	add	r4, r3
 8002d32:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002d36:	2200      	movs	r2, #0
 8002d38:	673b      	str	r3, [r7, #112]	@ 0x70
 8002d3a:	677a      	str	r2, [r7, #116]	@ 0x74
 8002d3c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8002d40:	4642      	mov	r2, r8
 8002d42:	464b      	mov	r3, r9
 8002d44:	1891      	adds	r1, r2, r2
 8002d46:	60b9      	str	r1, [r7, #8]
 8002d48:	415b      	adcs	r3, r3
 8002d4a:	60fb      	str	r3, [r7, #12]
 8002d4c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002d50:	4641      	mov	r1, r8
 8002d52:	1851      	adds	r1, r2, r1
 8002d54:	6039      	str	r1, [r7, #0]
 8002d56:	4649      	mov	r1, r9
 8002d58:	414b      	adcs	r3, r1
 8002d5a:	607b      	str	r3, [r7, #4]
 8002d5c:	f04f 0200 	mov.w	r2, #0
 8002d60:	f04f 0300 	mov.w	r3, #0
 8002d64:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8002d68:	4659      	mov	r1, fp
 8002d6a:	00cb      	lsls	r3, r1, #3
 8002d6c:	4651      	mov	r1, sl
 8002d6e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002d72:	4651      	mov	r1, sl
 8002d74:	00ca      	lsls	r2, r1, #3
 8002d76:	4610      	mov	r0, r2
 8002d78:	4619      	mov	r1, r3
 8002d7a:	4603      	mov	r3, r0
 8002d7c:	4642      	mov	r2, r8
 8002d7e:	189b      	adds	r3, r3, r2
 8002d80:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002d82:	464b      	mov	r3, r9
 8002d84:	460a      	mov	r2, r1
 8002d86:	eb42 0303 	adc.w	r3, r2, r3
 8002d8a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8002d8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002d90:	685b      	ldr	r3, [r3, #4]
 8002d92:	2200      	movs	r2, #0
 8002d94:	663b      	str	r3, [r7, #96]	@ 0x60
 8002d96:	667a      	str	r2, [r7, #100]	@ 0x64
 8002d98:	f04f 0200 	mov.w	r2, #0
 8002d9c:	f04f 0300 	mov.w	r3, #0
 8002da0:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8002da4:	4649      	mov	r1, r9
 8002da6:	008b      	lsls	r3, r1, #2
 8002da8:	4641      	mov	r1, r8
 8002daa:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002dae:	4641      	mov	r1, r8
 8002db0:	008a      	lsls	r2, r1, #2
 8002db2:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8002db6:	f7fd fa6b 	bl	8000290 <__aeabi_uldivmod>
 8002dba:	4602      	mov	r2, r0
 8002dbc:	460b      	mov	r3, r1
 8002dbe:	4b0d      	ldr	r3, [pc, #52]	@ (8002df4 <UART_SetConfig+0x4e4>)
 8002dc0:	fba3 1302 	umull	r1, r3, r3, r2
 8002dc4:	095b      	lsrs	r3, r3, #5
 8002dc6:	2164      	movs	r1, #100	@ 0x64
 8002dc8:	fb01 f303 	mul.w	r3, r1, r3
 8002dcc:	1ad3      	subs	r3, r2, r3
 8002dce:	011b      	lsls	r3, r3, #4
 8002dd0:	3332      	adds	r3, #50	@ 0x32
 8002dd2:	4a08      	ldr	r2, [pc, #32]	@ (8002df4 <UART_SetConfig+0x4e4>)
 8002dd4:	fba2 2303 	umull	r2, r3, r2, r3
 8002dd8:	095b      	lsrs	r3, r3, #5
 8002dda:	f003 020f 	and.w	r2, r3, #15
 8002dde:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	4422      	add	r2, r4
 8002de6:	609a      	str	r2, [r3, #8]
}
 8002de8:	bf00      	nop
 8002dea:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8002dee:	46bd      	mov	sp, r7
 8002df0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002df4:	51eb851f 	.word	0x51eb851f

08002df8 <siprintf>:
 8002df8:	b40e      	push	{r1, r2, r3}
 8002dfa:	b510      	push	{r4, lr}
 8002dfc:	b09d      	sub	sp, #116	@ 0x74
 8002dfe:	ab1f      	add	r3, sp, #124	@ 0x7c
 8002e00:	9002      	str	r0, [sp, #8]
 8002e02:	9006      	str	r0, [sp, #24]
 8002e04:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8002e08:	480a      	ldr	r0, [pc, #40]	@ (8002e34 <siprintf+0x3c>)
 8002e0a:	9107      	str	r1, [sp, #28]
 8002e0c:	9104      	str	r1, [sp, #16]
 8002e0e:	490a      	ldr	r1, [pc, #40]	@ (8002e38 <siprintf+0x40>)
 8002e10:	f853 2b04 	ldr.w	r2, [r3], #4
 8002e14:	9105      	str	r1, [sp, #20]
 8002e16:	2400      	movs	r4, #0
 8002e18:	a902      	add	r1, sp, #8
 8002e1a:	6800      	ldr	r0, [r0, #0]
 8002e1c:	9301      	str	r3, [sp, #4]
 8002e1e:	941b      	str	r4, [sp, #108]	@ 0x6c
 8002e20:	f000 f994 	bl	800314c <_svfiprintf_r>
 8002e24:	9b02      	ldr	r3, [sp, #8]
 8002e26:	701c      	strb	r4, [r3, #0]
 8002e28:	b01d      	add	sp, #116	@ 0x74
 8002e2a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002e2e:	b003      	add	sp, #12
 8002e30:	4770      	bx	lr
 8002e32:	bf00      	nop
 8002e34:	2000000c 	.word	0x2000000c
 8002e38:	ffff0208 	.word	0xffff0208

08002e3c <memset>:
 8002e3c:	4402      	add	r2, r0
 8002e3e:	4603      	mov	r3, r0
 8002e40:	4293      	cmp	r3, r2
 8002e42:	d100      	bne.n	8002e46 <memset+0xa>
 8002e44:	4770      	bx	lr
 8002e46:	f803 1b01 	strb.w	r1, [r3], #1
 8002e4a:	e7f9      	b.n	8002e40 <memset+0x4>

08002e4c <__errno>:
 8002e4c:	4b01      	ldr	r3, [pc, #4]	@ (8002e54 <__errno+0x8>)
 8002e4e:	6818      	ldr	r0, [r3, #0]
 8002e50:	4770      	bx	lr
 8002e52:	bf00      	nop
 8002e54:	2000000c 	.word	0x2000000c

08002e58 <__libc_init_array>:
 8002e58:	b570      	push	{r4, r5, r6, lr}
 8002e5a:	4d0d      	ldr	r5, [pc, #52]	@ (8002e90 <__libc_init_array+0x38>)
 8002e5c:	4c0d      	ldr	r4, [pc, #52]	@ (8002e94 <__libc_init_array+0x3c>)
 8002e5e:	1b64      	subs	r4, r4, r5
 8002e60:	10a4      	asrs	r4, r4, #2
 8002e62:	2600      	movs	r6, #0
 8002e64:	42a6      	cmp	r6, r4
 8002e66:	d109      	bne.n	8002e7c <__libc_init_array+0x24>
 8002e68:	4d0b      	ldr	r5, [pc, #44]	@ (8002e98 <__libc_init_array+0x40>)
 8002e6a:	4c0c      	ldr	r4, [pc, #48]	@ (8002e9c <__libc_init_array+0x44>)
 8002e6c:	f000 fc64 	bl	8003738 <_init>
 8002e70:	1b64      	subs	r4, r4, r5
 8002e72:	10a4      	asrs	r4, r4, #2
 8002e74:	2600      	movs	r6, #0
 8002e76:	42a6      	cmp	r6, r4
 8002e78:	d105      	bne.n	8002e86 <__libc_init_array+0x2e>
 8002e7a:	bd70      	pop	{r4, r5, r6, pc}
 8002e7c:	f855 3b04 	ldr.w	r3, [r5], #4
 8002e80:	4798      	blx	r3
 8002e82:	3601      	adds	r6, #1
 8002e84:	e7ee      	b.n	8002e64 <__libc_init_array+0xc>
 8002e86:	f855 3b04 	ldr.w	r3, [r5], #4
 8002e8a:	4798      	blx	r3
 8002e8c:	3601      	adds	r6, #1
 8002e8e:	e7f2      	b.n	8002e76 <__libc_init_array+0x1e>
 8002e90:	08003800 	.word	0x08003800
 8002e94:	08003800 	.word	0x08003800
 8002e98:	08003800 	.word	0x08003800
 8002e9c:	08003804 	.word	0x08003804

08002ea0 <__retarget_lock_acquire_recursive>:
 8002ea0:	4770      	bx	lr

08002ea2 <__retarget_lock_release_recursive>:
 8002ea2:	4770      	bx	lr

08002ea4 <_free_r>:
 8002ea4:	b538      	push	{r3, r4, r5, lr}
 8002ea6:	4605      	mov	r5, r0
 8002ea8:	2900      	cmp	r1, #0
 8002eaa:	d041      	beq.n	8002f30 <_free_r+0x8c>
 8002eac:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002eb0:	1f0c      	subs	r4, r1, #4
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	bfb8      	it	lt
 8002eb6:	18e4      	addlt	r4, r4, r3
 8002eb8:	f000 f8e0 	bl	800307c <__malloc_lock>
 8002ebc:	4a1d      	ldr	r2, [pc, #116]	@ (8002f34 <_free_r+0x90>)
 8002ebe:	6813      	ldr	r3, [r2, #0]
 8002ec0:	b933      	cbnz	r3, 8002ed0 <_free_r+0x2c>
 8002ec2:	6063      	str	r3, [r4, #4]
 8002ec4:	6014      	str	r4, [r2, #0]
 8002ec6:	4628      	mov	r0, r5
 8002ec8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002ecc:	f000 b8dc 	b.w	8003088 <__malloc_unlock>
 8002ed0:	42a3      	cmp	r3, r4
 8002ed2:	d908      	bls.n	8002ee6 <_free_r+0x42>
 8002ed4:	6820      	ldr	r0, [r4, #0]
 8002ed6:	1821      	adds	r1, r4, r0
 8002ed8:	428b      	cmp	r3, r1
 8002eda:	bf01      	itttt	eq
 8002edc:	6819      	ldreq	r1, [r3, #0]
 8002ede:	685b      	ldreq	r3, [r3, #4]
 8002ee0:	1809      	addeq	r1, r1, r0
 8002ee2:	6021      	streq	r1, [r4, #0]
 8002ee4:	e7ed      	b.n	8002ec2 <_free_r+0x1e>
 8002ee6:	461a      	mov	r2, r3
 8002ee8:	685b      	ldr	r3, [r3, #4]
 8002eea:	b10b      	cbz	r3, 8002ef0 <_free_r+0x4c>
 8002eec:	42a3      	cmp	r3, r4
 8002eee:	d9fa      	bls.n	8002ee6 <_free_r+0x42>
 8002ef0:	6811      	ldr	r1, [r2, #0]
 8002ef2:	1850      	adds	r0, r2, r1
 8002ef4:	42a0      	cmp	r0, r4
 8002ef6:	d10b      	bne.n	8002f10 <_free_r+0x6c>
 8002ef8:	6820      	ldr	r0, [r4, #0]
 8002efa:	4401      	add	r1, r0
 8002efc:	1850      	adds	r0, r2, r1
 8002efe:	4283      	cmp	r3, r0
 8002f00:	6011      	str	r1, [r2, #0]
 8002f02:	d1e0      	bne.n	8002ec6 <_free_r+0x22>
 8002f04:	6818      	ldr	r0, [r3, #0]
 8002f06:	685b      	ldr	r3, [r3, #4]
 8002f08:	6053      	str	r3, [r2, #4]
 8002f0a:	4408      	add	r0, r1
 8002f0c:	6010      	str	r0, [r2, #0]
 8002f0e:	e7da      	b.n	8002ec6 <_free_r+0x22>
 8002f10:	d902      	bls.n	8002f18 <_free_r+0x74>
 8002f12:	230c      	movs	r3, #12
 8002f14:	602b      	str	r3, [r5, #0]
 8002f16:	e7d6      	b.n	8002ec6 <_free_r+0x22>
 8002f18:	6820      	ldr	r0, [r4, #0]
 8002f1a:	1821      	adds	r1, r4, r0
 8002f1c:	428b      	cmp	r3, r1
 8002f1e:	bf04      	itt	eq
 8002f20:	6819      	ldreq	r1, [r3, #0]
 8002f22:	685b      	ldreq	r3, [r3, #4]
 8002f24:	6063      	str	r3, [r4, #4]
 8002f26:	bf04      	itt	eq
 8002f28:	1809      	addeq	r1, r1, r0
 8002f2a:	6021      	streq	r1, [r4, #0]
 8002f2c:	6054      	str	r4, [r2, #4]
 8002f2e:	e7ca      	b.n	8002ec6 <_free_r+0x22>
 8002f30:	bd38      	pop	{r3, r4, r5, pc}
 8002f32:	bf00      	nop
 8002f34:	2000022c 	.word	0x2000022c

08002f38 <sbrk_aligned>:
 8002f38:	b570      	push	{r4, r5, r6, lr}
 8002f3a:	4e0f      	ldr	r6, [pc, #60]	@ (8002f78 <sbrk_aligned+0x40>)
 8002f3c:	460c      	mov	r4, r1
 8002f3e:	6831      	ldr	r1, [r6, #0]
 8002f40:	4605      	mov	r5, r0
 8002f42:	b911      	cbnz	r1, 8002f4a <sbrk_aligned+0x12>
 8002f44:	f000 fba4 	bl	8003690 <_sbrk_r>
 8002f48:	6030      	str	r0, [r6, #0]
 8002f4a:	4621      	mov	r1, r4
 8002f4c:	4628      	mov	r0, r5
 8002f4e:	f000 fb9f 	bl	8003690 <_sbrk_r>
 8002f52:	1c43      	adds	r3, r0, #1
 8002f54:	d103      	bne.n	8002f5e <sbrk_aligned+0x26>
 8002f56:	f04f 34ff 	mov.w	r4, #4294967295
 8002f5a:	4620      	mov	r0, r4
 8002f5c:	bd70      	pop	{r4, r5, r6, pc}
 8002f5e:	1cc4      	adds	r4, r0, #3
 8002f60:	f024 0403 	bic.w	r4, r4, #3
 8002f64:	42a0      	cmp	r0, r4
 8002f66:	d0f8      	beq.n	8002f5a <sbrk_aligned+0x22>
 8002f68:	1a21      	subs	r1, r4, r0
 8002f6a:	4628      	mov	r0, r5
 8002f6c:	f000 fb90 	bl	8003690 <_sbrk_r>
 8002f70:	3001      	adds	r0, #1
 8002f72:	d1f2      	bne.n	8002f5a <sbrk_aligned+0x22>
 8002f74:	e7ef      	b.n	8002f56 <sbrk_aligned+0x1e>
 8002f76:	bf00      	nop
 8002f78:	20000228 	.word	0x20000228

08002f7c <_malloc_r>:
 8002f7c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002f80:	1ccd      	adds	r5, r1, #3
 8002f82:	f025 0503 	bic.w	r5, r5, #3
 8002f86:	3508      	adds	r5, #8
 8002f88:	2d0c      	cmp	r5, #12
 8002f8a:	bf38      	it	cc
 8002f8c:	250c      	movcc	r5, #12
 8002f8e:	2d00      	cmp	r5, #0
 8002f90:	4606      	mov	r6, r0
 8002f92:	db01      	blt.n	8002f98 <_malloc_r+0x1c>
 8002f94:	42a9      	cmp	r1, r5
 8002f96:	d904      	bls.n	8002fa2 <_malloc_r+0x26>
 8002f98:	230c      	movs	r3, #12
 8002f9a:	6033      	str	r3, [r6, #0]
 8002f9c:	2000      	movs	r0, #0
 8002f9e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002fa2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8003078 <_malloc_r+0xfc>
 8002fa6:	f000 f869 	bl	800307c <__malloc_lock>
 8002faa:	f8d8 3000 	ldr.w	r3, [r8]
 8002fae:	461c      	mov	r4, r3
 8002fb0:	bb44      	cbnz	r4, 8003004 <_malloc_r+0x88>
 8002fb2:	4629      	mov	r1, r5
 8002fb4:	4630      	mov	r0, r6
 8002fb6:	f7ff ffbf 	bl	8002f38 <sbrk_aligned>
 8002fba:	1c43      	adds	r3, r0, #1
 8002fbc:	4604      	mov	r4, r0
 8002fbe:	d158      	bne.n	8003072 <_malloc_r+0xf6>
 8002fc0:	f8d8 4000 	ldr.w	r4, [r8]
 8002fc4:	4627      	mov	r7, r4
 8002fc6:	2f00      	cmp	r7, #0
 8002fc8:	d143      	bne.n	8003052 <_malloc_r+0xd6>
 8002fca:	2c00      	cmp	r4, #0
 8002fcc:	d04b      	beq.n	8003066 <_malloc_r+0xea>
 8002fce:	6823      	ldr	r3, [r4, #0]
 8002fd0:	4639      	mov	r1, r7
 8002fd2:	4630      	mov	r0, r6
 8002fd4:	eb04 0903 	add.w	r9, r4, r3
 8002fd8:	f000 fb5a 	bl	8003690 <_sbrk_r>
 8002fdc:	4581      	cmp	r9, r0
 8002fde:	d142      	bne.n	8003066 <_malloc_r+0xea>
 8002fe0:	6821      	ldr	r1, [r4, #0]
 8002fe2:	1a6d      	subs	r5, r5, r1
 8002fe4:	4629      	mov	r1, r5
 8002fe6:	4630      	mov	r0, r6
 8002fe8:	f7ff ffa6 	bl	8002f38 <sbrk_aligned>
 8002fec:	3001      	adds	r0, #1
 8002fee:	d03a      	beq.n	8003066 <_malloc_r+0xea>
 8002ff0:	6823      	ldr	r3, [r4, #0]
 8002ff2:	442b      	add	r3, r5
 8002ff4:	6023      	str	r3, [r4, #0]
 8002ff6:	f8d8 3000 	ldr.w	r3, [r8]
 8002ffa:	685a      	ldr	r2, [r3, #4]
 8002ffc:	bb62      	cbnz	r2, 8003058 <_malloc_r+0xdc>
 8002ffe:	f8c8 7000 	str.w	r7, [r8]
 8003002:	e00f      	b.n	8003024 <_malloc_r+0xa8>
 8003004:	6822      	ldr	r2, [r4, #0]
 8003006:	1b52      	subs	r2, r2, r5
 8003008:	d420      	bmi.n	800304c <_malloc_r+0xd0>
 800300a:	2a0b      	cmp	r2, #11
 800300c:	d917      	bls.n	800303e <_malloc_r+0xc2>
 800300e:	1961      	adds	r1, r4, r5
 8003010:	42a3      	cmp	r3, r4
 8003012:	6025      	str	r5, [r4, #0]
 8003014:	bf18      	it	ne
 8003016:	6059      	strne	r1, [r3, #4]
 8003018:	6863      	ldr	r3, [r4, #4]
 800301a:	bf08      	it	eq
 800301c:	f8c8 1000 	streq.w	r1, [r8]
 8003020:	5162      	str	r2, [r4, r5]
 8003022:	604b      	str	r3, [r1, #4]
 8003024:	4630      	mov	r0, r6
 8003026:	f000 f82f 	bl	8003088 <__malloc_unlock>
 800302a:	f104 000b 	add.w	r0, r4, #11
 800302e:	1d23      	adds	r3, r4, #4
 8003030:	f020 0007 	bic.w	r0, r0, #7
 8003034:	1ac2      	subs	r2, r0, r3
 8003036:	bf1c      	itt	ne
 8003038:	1a1b      	subne	r3, r3, r0
 800303a:	50a3      	strne	r3, [r4, r2]
 800303c:	e7af      	b.n	8002f9e <_malloc_r+0x22>
 800303e:	6862      	ldr	r2, [r4, #4]
 8003040:	42a3      	cmp	r3, r4
 8003042:	bf0c      	ite	eq
 8003044:	f8c8 2000 	streq.w	r2, [r8]
 8003048:	605a      	strne	r2, [r3, #4]
 800304a:	e7eb      	b.n	8003024 <_malloc_r+0xa8>
 800304c:	4623      	mov	r3, r4
 800304e:	6864      	ldr	r4, [r4, #4]
 8003050:	e7ae      	b.n	8002fb0 <_malloc_r+0x34>
 8003052:	463c      	mov	r4, r7
 8003054:	687f      	ldr	r7, [r7, #4]
 8003056:	e7b6      	b.n	8002fc6 <_malloc_r+0x4a>
 8003058:	461a      	mov	r2, r3
 800305a:	685b      	ldr	r3, [r3, #4]
 800305c:	42a3      	cmp	r3, r4
 800305e:	d1fb      	bne.n	8003058 <_malloc_r+0xdc>
 8003060:	2300      	movs	r3, #0
 8003062:	6053      	str	r3, [r2, #4]
 8003064:	e7de      	b.n	8003024 <_malloc_r+0xa8>
 8003066:	230c      	movs	r3, #12
 8003068:	6033      	str	r3, [r6, #0]
 800306a:	4630      	mov	r0, r6
 800306c:	f000 f80c 	bl	8003088 <__malloc_unlock>
 8003070:	e794      	b.n	8002f9c <_malloc_r+0x20>
 8003072:	6005      	str	r5, [r0, #0]
 8003074:	e7d6      	b.n	8003024 <_malloc_r+0xa8>
 8003076:	bf00      	nop
 8003078:	2000022c 	.word	0x2000022c

0800307c <__malloc_lock>:
 800307c:	4801      	ldr	r0, [pc, #4]	@ (8003084 <__malloc_lock+0x8>)
 800307e:	f7ff bf0f 	b.w	8002ea0 <__retarget_lock_acquire_recursive>
 8003082:	bf00      	nop
 8003084:	20000224 	.word	0x20000224

08003088 <__malloc_unlock>:
 8003088:	4801      	ldr	r0, [pc, #4]	@ (8003090 <__malloc_unlock+0x8>)
 800308a:	f7ff bf0a 	b.w	8002ea2 <__retarget_lock_release_recursive>
 800308e:	bf00      	nop
 8003090:	20000224 	.word	0x20000224

08003094 <__ssputs_r>:
 8003094:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003098:	688e      	ldr	r6, [r1, #8]
 800309a:	461f      	mov	r7, r3
 800309c:	42be      	cmp	r6, r7
 800309e:	680b      	ldr	r3, [r1, #0]
 80030a0:	4682      	mov	sl, r0
 80030a2:	460c      	mov	r4, r1
 80030a4:	4690      	mov	r8, r2
 80030a6:	d82d      	bhi.n	8003104 <__ssputs_r+0x70>
 80030a8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80030ac:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80030b0:	d026      	beq.n	8003100 <__ssputs_r+0x6c>
 80030b2:	6965      	ldr	r5, [r4, #20]
 80030b4:	6909      	ldr	r1, [r1, #16]
 80030b6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80030ba:	eba3 0901 	sub.w	r9, r3, r1
 80030be:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80030c2:	1c7b      	adds	r3, r7, #1
 80030c4:	444b      	add	r3, r9
 80030c6:	106d      	asrs	r5, r5, #1
 80030c8:	429d      	cmp	r5, r3
 80030ca:	bf38      	it	cc
 80030cc:	461d      	movcc	r5, r3
 80030ce:	0553      	lsls	r3, r2, #21
 80030d0:	d527      	bpl.n	8003122 <__ssputs_r+0x8e>
 80030d2:	4629      	mov	r1, r5
 80030d4:	f7ff ff52 	bl	8002f7c <_malloc_r>
 80030d8:	4606      	mov	r6, r0
 80030da:	b360      	cbz	r0, 8003136 <__ssputs_r+0xa2>
 80030dc:	6921      	ldr	r1, [r4, #16]
 80030de:	464a      	mov	r2, r9
 80030e0:	f000 fae6 	bl	80036b0 <memcpy>
 80030e4:	89a3      	ldrh	r3, [r4, #12]
 80030e6:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80030ea:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80030ee:	81a3      	strh	r3, [r4, #12]
 80030f0:	6126      	str	r6, [r4, #16]
 80030f2:	6165      	str	r5, [r4, #20]
 80030f4:	444e      	add	r6, r9
 80030f6:	eba5 0509 	sub.w	r5, r5, r9
 80030fa:	6026      	str	r6, [r4, #0]
 80030fc:	60a5      	str	r5, [r4, #8]
 80030fe:	463e      	mov	r6, r7
 8003100:	42be      	cmp	r6, r7
 8003102:	d900      	bls.n	8003106 <__ssputs_r+0x72>
 8003104:	463e      	mov	r6, r7
 8003106:	6820      	ldr	r0, [r4, #0]
 8003108:	4632      	mov	r2, r6
 800310a:	4641      	mov	r1, r8
 800310c:	f000 faa6 	bl	800365c <memmove>
 8003110:	68a3      	ldr	r3, [r4, #8]
 8003112:	1b9b      	subs	r3, r3, r6
 8003114:	60a3      	str	r3, [r4, #8]
 8003116:	6823      	ldr	r3, [r4, #0]
 8003118:	4433      	add	r3, r6
 800311a:	6023      	str	r3, [r4, #0]
 800311c:	2000      	movs	r0, #0
 800311e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003122:	462a      	mov	r2, r5
 8003124:	f000 fad2 	bl	80036cc <_realloc_r>
 8003128:	4606      	mov	r6, r0
 800312a:	2800      	cmp	r0, #0
 800312c:	d1e0      	bne.n	80030f0 <__ssputs_r+0x5c>
 800312e:	6921      	ldr	r1, [r4, #16]
 8003130:	4650      	mov	r0, sl
 8003132:	f7ff feb7 	bl	8002ea4 <_free_r>
 8003136:	230c      	movs	r3, #12
 8003138:	f8ca 3000 	str.w	r3, [sl]
 800313c:	89a3      	ldrh	r3, [r4, #12]
 800313e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003142:	81a3      	strh	r3, [r4, #12]
 8003144:	f04f 30ff 	mov.w	r0, #4294967295
 8003148:	e7e9      	b.n	800311e <__ssputs_r+0x8a>
	...

0800314c <_svfiprintf_r>:
 800314c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003150:	4698      	mov	r8, r3
 8003152:	898b      	ldrh	r3, [r1, #12]
 8003154:	061b      	lsls	r3, r3, #24
 8003156:	b09d      	sub	sp, #116	@ 0x74
 8003158:	4607      	mov	r7, r0
 800315a:	460d      	mov	r5, r1
 800315c:	4614      	mov	r4, r2
 800315e:	d510      	bpl.n	8003182 <_svfiprintf_r+0x36>
 8003160:	690b      	ldr	r3, [r1, #16]
 8003162:	b973      	cbnz	r3, 8003182 <_svfiprintf_r+0x36>
 8003164:	2140      	movs	r1, #64	@ 0x40
 8003166:	f7ff ff09 	bl	8002f7c <_malloc_r>
 800316a:	6028      	str	r0, [r5, #0]
 800316c:	6128      	str	r0, [r5, #16]
 800316e:	b930      	cbnz	r0, 800317e <_svfiprintf_r+0x32>
 8003170:	230c      	movs	r3, #12
 8003172:	603b      	str	r3, [r7, #0]
 8003174:	f04f 30ff 	mov.w	r0, #4294967295
 8003178:	b01d      	add	sp, #116	@ 0x74
 800317a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800317e:	2340      	movs	r3, #64	@ 0x40
 8003180:	616b      	str	r3, [r5, #20]
 8003182:	2300      	movs	r3, #0
 8003184:	9309      	str	r3, [sp, #36]	@ 0x24
 8003186:	2320      	movs	r3, #32
 8003188:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800318c:	f8cd 800c 	str.w	r8, [sp, #12]
 8003190:	2330      	movs	r3, #48	@ 0x30
 8003192:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8003330 <_svfiprintf_r+0x1e4>
 8003196:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800319a:	f04f 0901 	mov.w	r9, #1
 800319e:	4623      	mov	r3, r4
 80031a0:	469a      	mov	sl, r3
 80031a2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80031a6:	b10a      	cbz	r2, 80031ac <_svfiprintf_r+0x60>
 80031a8:	2a25      	cmp	r2, #37	@ 0x25
 80031aa:	d1f9      	bne.n	80031a0 <_svfiprintf_r+0x54>
 80031ac:	ebba 0b04 	subs.w	fp, sl, r4
 80031b0:	d00b      	beq.n	80031ca <_svfiprintf_r+0x7e>
 80031b2:	465b      	mov	r3, fp
 80031b4:	4622      	mov	r2, r4
 80031b6:	4629      	mov	r1, r5
 80031b8:	4638      	mov	r0, r7
 80031ba:	f7ff ff6b 	bl	8003094 <__ssputs_r>
 80031be:	3001      	adds	r0, #1
 80031c0:	f000 80a7 	beq.w	8003312 <_svfiprintf_r+0x1c6>
 80031c4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80031c6:	445a      	add	r2, fp
 80031c8:	9209      	str	r2, [sp, #36]	@ 0x24
 80031ca:	f89a 3000 	ldrb.w	r3, [sl]
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	f000 809f 	beq.w	8003312 <_svfiprintf_r+0x1c6>
 80031d4:	2300      	movs	r3, #0
 80031d6:	f04f 32ff 	mov.w	r2, #4294967295
 80031da:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80031de:	f10a 0a01 	add.w	sl, sl, #1
 80031e2:	9304      	str	r3, [sp, #16]
 80031e4:	9307      	str	r3, [sp, #28]
 80031e6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80031ea:	931a      	str	r3, [sp, #104]	@ 0x68
 80031ec:	4654      	mov	r4, sl
 80031ee:	2205      	movs	r2, #5
 80031f0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80031f4:	484e      	ldr	r0, [pc, #312]	@ (8003330 <_svfiprintf_r+0x1e4>)
 80031f6:	f7fc fffb 	bl	80001f0 <memchr>
 80031fa:	9a04      	ldr	r2, [sp, #16]
 80031fc:	b9d8      	cbnz	r0, 8003236 <_svfiprintf_r+0xea>
 80031fe:	06d0      	lsls	r0, r2, #27
 8003200:	bf44      	itt	mi
 8003202:	2320      	movmi	r3, #32
 8003204:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003208:	0711      	lsls	r1, r2, #28
 800320a:	bf44      	itt	mi
 800320c:	232b      	movmi	r3, #43	@ 0x2b
 800320e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003212:	f89a 3000 	ldrb.w	r3, [sl]
 8003216:	2b2a      	cmp	r3, #42	@ 0x2a
 8003218:	d015      	beq.n	8003246 <_svfiprintf_r+0xfa>
 800321a:	9a07      	ldr	r2, [sp, #28]
 800321c:	4654      	mov	r4, sl
 800321e:	2000      	movs	r0, #0
 8003220:	f04f 0c0a 	mov.w	ip, #10
 8003224:	4621      	mov	r1, r4
 8003226:	f811 3b01 	ldrb.w	r3, [r1], #1
 800322a:	3b30      	subs	r3, #48	@ 0x30
 800322c:	2b09      	cmp	r3, #9
 800322e:	d94b      	bls.n	80032c8 <_svfiprintf_r+0x17c>
 8003230:	b1b0      	cbz	r0, 8003260 <_svfiprintf_r+0x114>
 8003232:	9207      	str	r2, [sp, #28]
 8003234:	e014      	b.n	8003260 <_svfiprintf_r+0x114>
 8003236:	eba0 0308 	sub.w	r3, r0, r8
 800323a:	fa09 f303 	lsl.w	r3, r9, r3
 800323e:	4313      	orrs	r3, r2
 8003240:	9304      	str	r3, [sp, #16]
 8003242:	46a2      	mov	sl, r4
 8003244:	e7d2      	b.n	80031ec <_svfiprintf_r+0xa0>
 8003246:	9b03      	ldr	r3, [sp, #12]
 8003248:	1d19      	adds	r1, r3, #4
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	9103      	str	r1, [sp, #12]
 800324e:	2b00      	cmp	r3, #0
 8003250:	bfbb      	ittet	lt
 8003252:	425b      	neglt	r3, r3
 8003254:	f042 0202 	orrlt.w	r2, r2, #2
 8003258:	9307      	strge	r3, [sp, #28]
 800325a:	9307      	strlt	r3, [sp, #28]
 800325c:	bfb8      	it	lt
 800325e:	9204      	strlt	r2, [sp, #16]
 8003260:	7823      	ldrb	r3, [r4, #0]
 8003262:	2b2e      	cmp	r3, #46	@ 0x2e
 8003264:	d10a      	bne.n	800327c <_svfiprintf_r+0x130>
 8003266:	7863      	ldrb	r3, [r4, #1]
 8003268:	2b2a      	cmp	r3, #42	@ 0x2a
 800326a:	d132      	bne.n	80032d2 <_svfiprintf_r+0x186>
 800326c:	9b03      	ldr	r3, [sp, #12]
 800326e:	1d1a      	adds	r2, r3, #4
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	9203      	str	r2, [sp, #12]
 8003274:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8003278:	3402      	adds	r4, #2
 800327a:	9305      	str	r3, [sp, #20]
 800327c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8003340 <_svfiprintf_r+0x1f4>
 8003280:	7821      	ldrb	r1, [r4, #0]
 8003282:	2203      	movs	r2, #3
 8003284:	4650      	mov	r0, sl
 8003286:	f7fc ffb3 	bl	80001f0 <memchr>
 800328a:	b138      	cbz	r0, 800329c <_svfiprintf_r+0x150>
 800328c:	9b04      	ldr	r3, [sp, #16]
 800328e:	eba0 000a 	sub.w	r0, r0, sl
 8003292:	2240      	movs	r2, #64	@ 0x40
 8003294:	4082      	lsls	r2, r0
 8003296:	4313      	orrs	r3, r2
 8003298:	3401      	adds	r4, #1
 800329a:	9304      	str	r3, [sp, #16]
 800329c:	f814 1b01 	ldrb.w	r1, [r4], #1
 80032a0:	4824      	ldr	r0, [pc, #144]	@ (8003334 <_svfiprintf_r+0x1e8>)
 80032a2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80032a6:	2206      	movs	r2, #6
 80032a8:	f7fc ffa2 	bl	80001f0 <memchr>
 80032ac:	2800      	cmp	r0, #0
 80032ae:	d036      	beq.n	800331e <_svfiprintf_r+0x1d2>
 80032b0:	4b21      	ldr	r3, [pc, #132]	@ (8003338 <_svfiprintf_r+0x1ec>)
 80032b2:	bb1b      	cbnz	r3, 80032fc <_svfiprintf_r+0x1b0>
 80032b4:	9b03      	ldr	r3, [sp, #12]
 80032b6:	3307      	adds	r3, #7
 80032b8:	f023 0307 	bic.w	r3, r3, #7
 80032bc:	3308      	adds	r3, #8
 80032be:	9303      	str	r3, [sp, #12]
 80032c0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80032c2:	4433      	add	r3, r6
 80032c4:	9309      	str	r3, [sp, #36]	@ 0x24
 80032c6:	e76a      	b.n	800319e <_svfiprintf_r+0x52>
 80032c8:	fb0c 3202 	mla	r2, ip, r2, r3
 80032cc:	460c      	mov	r4, r1
 80032ce:	2001      	movs	r0, #1
 80032d0:	e7a8      	b.n	8003224 <_svfiprintf_r+0xd8>
 80032d2:	2300      	movs	r3, #0
 80032d4:	3401      	adds	r4, #1
 80032d6:	9305      	str	r3, [sp, #20]
 80032d8:	4619      	mov	r1, r3
 80032da:	f04f 0c0a 	mov.w	ip, #10
 80032de:	4620      	mov	r0, r4
 80032e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80032e4:	3a30      	subs	r2, #48	@ 0x30
 80032e6:	2a09      	cmp	r2, #9
 80032e8:	d903      	bls.n	80032f2 <_svfiprintf_r+0x1a6>
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d0c6      	beq.n	800327c <_svfiprintf_r+0x130>
 80032ee:	9105      	str	r1, [sp, #20]
 80032f0:	e7c4      	b.n	800327c <_svfiprintf_r+0x130>
 80032f2:	fb0c 2101 	mla	r1, ip, r1, r2
 80032f6:	4604      	mov	r4, r0
 80032f8:	2301      	movs	r3, #1
 80032fa:	e7f0      	b.n	80032de <_svfiprintf_r+0x192>
 80032fc:	ab03      	add	r3, sp, #12
 80032fe:	9300      	str	r3, [sp, #0]
 8003300:	462a      	mov	r2, r5
 8003302:	4b0e      	ldr	r3, [pc, #56]	@ (800333c <_svfiprintf_r+0x1f0>)
 8003304:	a904      	add	r1, sp, #16
 8003306:	4638      	mov	r0, r7
 8003308:	f3af 8000 	nop.w
 800330c:	1c42      	adds	r2, r0, #1
 800330e:	4606      	mov	r6, r0
 8003310:	d1d6      	bne.n	80032c0 <_svfiprintf_r+0x174>
 8003312:	89ab      	ldrh	r3, [r5, #12]
 8003314:	065b      	lsls	r3, r3, #25
 8003316:	f53f af2d 	bmi.w	8003174 <_svfiprintf_r+0x28>
 800331a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800331c:	e72c      	b.n	8003178 <_svfiprintf_r+0x2c>
 800331e:	ab03      	add	r3, sp, #12
 8003320:	9300      	str	r3, [sp, #0]
 8003322:	462a      	mov	r2, r5
 8003324:	4b05      	ldr	r3, [pc, #20]	@ (800333c <_svfiprintf_r+0x1f0>)
 8003326:	a904      	add	r1, sp, #16
 8003328:	4638      	mov	r0, r7
 800332a:	f000 f879 	bl	8003420 <_printf_i>
 800332e:	e7ed      	b.n	800330c <_svfiprintf_r+0x1c0>
 8003330:	080037c4 	.word	0x080037c4
 8003334:	080037ce 	.word	0x080037ce
 8003338:	00000000 	.word	0x00000000
 800333c:	08003095 	.word	0x08003095
 8003340:	080037ca 	.word	0x080037ca

08003344 <_printf_common>:
 8003344:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003348:	4616      	mov	r6, r2
 800334a:	4698      	mov	r8, r3
 800334c:	688a      	ldr	r2, [r1, #8]
 800334e:	690b      	ldr	r3, [r1, #16]
 8003350:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8003354:	4293      	cmp	r3, r2
 8003356:	bfb8      	it	lt
 8003358:	4613      	movlt	r3, r2
 800335a:	6033      	str	r3, [r6, #0]
 800335c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8003360:	4607      	mov	r7, r0
 8003362:	460c      	mov	r4, r1
 8003364:	b10a      	cbz	r2, 800336a <_printf_common+0x26>
 8003366:	3301      	adds	r3, #1
 8003368:	6033      	str	r3, [r6, #0]
 800336a:	6823      	ldr	r3, [r4, #0]
 800336c:	0699      	lsls	r1, r3, #26
 800336e:	bf42      	ittt	mi
 8003370:	6833      	ldrmi	r3, [r6, #0]
 8003372:	3302      	addmi	r3, #2
 8003374:	6033      	strmi	r3, [r6, #0]
 8003376:	6825      	ldr	r5, [r4, #0]
 8003378:	f015 0506 	ands.w	r5, r5, #6
 800337c:	d106      	bne.n	800338c <_printf_common+0x48>
 800337e:	f104 0a19 	add.w	sl, r4, #25
 8003382:	68e3      	ldr	r3, [r4, #12]
 8003384:	6832      	ldr	r2, [r6, #0]
 8003386:	1a9b      	subs	r3, r3, r2
 8003388:	42ab      	cmp	r3, r5
 800338a:	dc26      	bgt.n	80033da <_printf_common+0x96>
 800338c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8003390:	6822      	ldr	r2, [r4, #0]
 8003392:	3b00      	subs	r3, #0
 8003394:	bf18      	it	ne
 8003396:	2301      	movne	r3, #1
 8003398:	0692      	lsls	r2, r2, #26
 800339a:	d42b      	bmi.n	80033f4 <_printf_common+0xb0>
 800339c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80033a0:	4641      	mov	r1, r8
 80033a2:	4638      	mov	r0, r7
 80033a4:	47c8      	blx	r9
 80033a6:	3001      	adds	r0, #1
 80033a8:	d01e      	beq.n	80033e8 <_printf_common+0xa4>
 80033aa:	6823      	ldr	r3, [r4, #0]
 80033ac:	6922      	ldr	r2, [r4, #16]
 80033ae:	f003 0306 	and.w	r3, r3, #6
 80033b2:	2b04      	cmp	r3, #4
 80033b4:	bf02      	ittt	eq
 80033b6:	68e5      	ldreq	r5, [r4, #12]
 80033b8:	6833      	ldreq	r3, [r6, #0]
 80033ba:	1aed      	subeq	r5, r5, r3
 80033bc:	68a3      	ldr	r3, [r4, #8]
 80033be:	bf0c      	ite	eq
 80033c0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80033c4:	2500      	movne	r5, #0
 80033c6:	4293      	cmp	r3, r2
 80033c8:	bfc4      	itt	gt
 80033ca:	1a9b      	subgt	r3, r3, r2
 80033cc:	18ed      	addgt	r5, r5, r3
 80033ce:	2600      	movs	r6, #0
 80033d0:	341a      	adds	r4, #26
 80033d2:	42b5      	cmp	r5, r6
 80033d4:	d11a      	bne.n	800340c <_printf_common+0xc8>
 80033d6:	2000      	movs	r0, #0
 80033d8:	e008      	b.n	80033ec <_printf_common+0xa8>
 80033da:	2301      	movs	r3, #1
 80033dc:	4652      	mov	r2, sl
 80033de:	4641      	mov	r1, r8
 80033e0:	4638      	mov	r0, r7
 80033e2:	47c8      	blx	r9
 80033e4:	3001      	adds	r0, #1
 80033e6:	d103      	bne.n	80033f0 <_printf_common+0xac>
 80033e8:	f04f 30ff 	mov.w	r0, #4294967295
 80033ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80033f0:	3501      	adds	r5, #1
 80033f2:	e7c6      	b.n	8003382 <_printf_common+0x3e>
 80033f4:	18e1      	adds	r1, r4, r3
 80033f6:	1c5a      	adds	r2, r3, #1
 80033f8:	2030      	movs	r0, #48	@ 0x30
 80033fa:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80033fe:	4422      	add	r2, r4
 8003400:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8003404:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8003408:	3302      	adds	r3, #2
 800340a:	e7c7      	b.n	800339c <_printf_common+0x58>
 800340c:	2301      	movs	r3, #1
 800340e:	4622      	mov	r2, r4
 8003410:	4641      	mov	r1, r8
 8003412:	4638      	mov	r0, r7
 8003414:	47c8      	blx	r9
 8003416:	3001      	adds	r0, #1
 8003418:	d0e6      	beq.n	80033e8 <_printf_common+0xa4>
 800341a:	3601      	adds	r6, #1
 800341c:	e7d9      	b.n	80033d2 <_printf_common+0x8e>
	...

08003420 <_printf_i>:
 8003420:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003424:	7e0f      	ldrb	r7, [r1, #24]
 8003426:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8003428:	2f78      	cmp	r7, #120	@ 0x78
 800342a:	4691      	mov	r9, r2
 800342c:	4680      	mov	r8, r0
 800342e:	460c      	mov	r4, r1
 8003430:	469a      	mov	sl, r3
 8003432:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8003436:	d807      	bhi.n	8003448 <_printf_i+0x28>
 8003438:	2f62      	cmp	r7, #98	@ 0x62
 800343a:	d80a      	bhi.n	8003452 <_printf_i+0x32>
 800343c:	2f00      	cmp	r7, #0
 800343e:	f000 80d1 	beq.w	80035e4 <_printf_i+0x1c4>
 8003442:	2f58      	cmp	r7, #88	@ 0x58
 8003444:	f000 80b8 	beq.w	80035b8 <_printf_i+0x198>
 8003448:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800344c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8003450:	e03a      	b.n	80034c8 <_printf_i+0xa8>
 8003452:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8003456:	2b15      	cmp	r3, #21
 8003458:	d8f6      	bhi.n	8003448 <_printf_i+0x28>
 800345a:	a101      	add	r1, pc, #4	@ (adr r1, 8003460 <_printf_i+0x40>)
 800345c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003460:	080034b9 	.word	0x080034b9
 8003464:	080034cd 	.word	0x080034cd
 8003468:	08003449 	.word	0x08003449
 800346c:	08003449 	.word	0x08003449
 8003470:	08003449 	.word	0x08003449
 8003474:	08003449 	.word	0x08003449
 8003478:	080034cd 	.word	0x080034cd
 800347c:	08003449 	.word	0x08003449
 8003480:	08003449 	.word	0x08003449
 8003484:	08003449 	.word	0x08003449
 8003488:	08003449 	.word	0x08003449
 800348c:	080035cb 	.word	0x080035cb
 8003490:	080034f7 	.word	0x080034f7
 8003494:	08003585 	.word	0x08003585
 8003498:	08003449 	.word	0x08003449
 800349c:	08003449 	.word	0x08003449
 80034a0:	080035ed 	.word	0x080035ed
 80034a4:	08003449 	.word	0x08003449
 80034a8:	080034f7 	.word	0x080034f7
 80034ac:	08003449 	.word	0x08003449
 80034b0:	08003449 	.word	0x08003449
 80034b4:	0800358d 	.word	0x0800358d
 80034b8:	6833      	ldr	r3, [r6, #0]
 80034ba:	1d1a      	adds	r2, r3, #4
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	6032      	str	r2, [r6, #0]
 80034c0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80034c4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80034c8:	2301      	movs	r3, #1
 80034ca:	e09c      	b.n	8003606 <_printf_i+0x1e6>
 80034cc:	6833      	ldr	r3, [r6, #0]
 80034ce:	6820      	ldr	r0, [r4, #0]
 80034d0:	1d19      	adds	r1, r3, #4
 80034d2:	6031      	str	r1, [r6, #0]
 80034d4:	0606      	lsls	r6, r0, #24
 80034d6:	d501      	bpl.n	80034dc <_printf_i+0xbc>
 80034d8:	681d      	ldr	r5, [r3, #0]
 80034da:	e003      	b.n	80034e4 <_printf_i+0xc4>
 80034dc:	0645      	lsls	r5, r0, #25
 80034de:	d5fb      	bpl.n	80034d8 <_printf_i+0xb8>
 80034e0:	f9b3 5000 	ldrsh.w	r5, [r3]
 80034e4:	2d00      	cmp	r5, #0
 80034e6:	da03      	bge.n	80034f0 <_printf_i+0xd0>
 80034e8:	232d      	movs	r3, #45	@ 0x2d
 80034ea:	426d      	negs	r5, r5
 80034ec:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80034f0:	4858      	ldr	r0, [pc, #352]	@ (8003654 <_printf_i+0x234>)
 80034f2:	230a      	movs	r3, #10
 80034f4:	e011      	b.n	800351a <_printf_i+0xfa>
 80034f6:	6821      	ldr	r1, [r4, #0]
 80034f8:	6833      	ldr	r3, [r6, #0]
 80034fa:	0608      	lsls	r0, r1, #24
 80034fc:	f853 5b04 	ldr.w	r5, [r3], #4
 8003500:	d402      	bmi.n	8003508 <_printf_i+0xe8>
 8003502:	0649      	lsls	r1, r1, #25
 8003504:	bf48      	it	mi
 8003506:	b2ad      	uxthmi	r5, r5
 8003508:	2f6f      	cmp	r7, #111	@ 0x6f
 800350a:	4852      	ldr	r0, [pc, #328]	@ (8003654 <_printf_i+0x234>)
 800350c:	6033      	str	r3, [r6, #0]
 800350e:	bf14      	ite	ne
 8003510:	230a      	movne	r3, #10
 8003512:	2308      	moveq	r3, #8
 8003514:	2100      	movs	r1, #0
 8003516:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800351a:	6866      	ldr	r6, [r4, #4]
 800351c:	60a6      	str	r6, [r4, #8]
 800351e:	2e00      	cmp	r6, #0
 8003520:	db05      	blt.n	800352e <_printf_i+0x10e>
 8003522:	6821      	ldr	r1, [r4, #0]
 8003524:	432e      	orrs	r6, r5
 8003526:	f021 0104 	bic.w	r1, r1, #4
 800352a:	6021      	str	r1, [r4, #0]
 800352c:	d04b      	beq.n	80035c6 <_printf_i+0x1a6>
 800352e:	4616      	mov	r6, r2
 8003530:	fbb5 f1f3 	udiv	r1, r5, r3
 8003534:	fb03 5711 	mls	r7, r3, r1, r5
 8003538:	5dc7      	ldrb	r7, [r0, r7]
 800353a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800353e:	462f      	mov	r7, r5
 8003540:	42bb      	cmp	r3, r7
 8003542:	460d      	mov	r5, r1
 8003544:	d9f4      	bls.n	8003530 <_printf_i+0x110>
 8003546:	2b08      	cmp	r3, #8
 8003548:	d10b      	bne.n	8003562 <_printf_i+0x142>
 800354a:	6823      	ldr	r3, [r4, #0]
 800354c:	07df      	lsls	r7, r3, #31
 800354e:	d508      	bpl.n	8003562 <_printf_i+0x142>
 8003550:	6923      	ldr	r3, [r4, #16]
 8003552:	6861      	ldr	r1, [r4, #4]
 8003554:	4299      	cmp	r1, r3
 8003556:	bfde      	ittt	le
 8003558:	2330      	movle	r3, #48	@ 0x30
 800355a:	f806 3c01 	strble.w	r3, [r6, #-1]
 800355e:	f106 36ff 	addle.w	r6, r6, #4294967295
 8003562:	1b92      	subs	r2, r2, r6
 8003564:	6122      	str	r2, [r4, #16]
 8003566:	f8cd a000 	str.w	sl, [sp]
 800356a:	464b      	mov	r3, r9
 800356c:	aa03      	add	r2, sp, #12
 800356e:	4621      	mov	r1, r4
 8003570:	4640      	mov	r0, r8
 8003572:	f7ff fee7 	bl	8003344 <_printf_common>
 8003576:	3001      	adds	r0, #1
 8003578:	d14a      	bne.n	8003610 <_printf_i+0x1f0>
 800357a:	f04f 30ff 	mov.w	r0, #4294967295
 800357e:	b004      	add	sp, #16
 8003580:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003584:	6823      	ldr	r3, [r4, #0]
 8003586:	f043 0320 	orr.w	r3, r3, #32
 800358a:	6023      	str	r3, [r4, #0]
 800358c:	4832      	ldr	r0, [pc, #200]	@ (8003658 <_printf_i+0x238>)
 800358e:	2778      	movs	r7, #120	@ 0x78
 8003590:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8003594:	6823      	ldr	r3, [r4, #0]
 8003596:	6831      	ldr	r1, [r6, #0]
 8003598:	061f      	lsls	r7, r3, #24
 800359a:	f851 5b04 	ldr.w	r5, [r1], #4
 800359e:	d402      	bmi.n	80035a6 <_printf_i+0x186>
 80035a0:	065f      	lsls	r7, r3, #25
 80035a2:	bf48      	it	mi
 80035a4:	b2ad      	uxthmi	r5, r5
 80035a6:	6031      	str	r1, [r6, #0]
 80035a8:	07d9      	lsls	r1, r3, #31
 80035aa:	bf44      	itt	mi
 80035ac:	f043 0320 	orrmi.w	r3, r3, #32
 80035b0:	6023      	strmi	r3, [r4, #0]
 80035b2:	b11d      	cbz	r5, 80035bc <_printf_i+0x19c>
 80035b4:	2310      	movs	r3, #16
 80035b6:	e7ad      	b.n	8003514 <_printf_i+0xf4>
 80035b8:	4826      	ldr	r0, [pc, #152]	@ (8003654 <_printf_i+0x234>)
 80035ba:	e7e9      	b.n	8003590 <_printf_i+0x170>
 80035bc:	6823      	ldr	r3, [r4, #0]
 80035be:	f023 0320 	bic.w	r3, r3, #32
 80035c2:	6023      	str	r3, [r4, #0]
 80035c4:	e7f6      	b.n	80035b4 <_printf_i+0x194>
 80035c6:	4616      	mov	r6, r2
 80035c8:	e7bd      	b.n	8003546 <_printf_i+0x126>
 80035ca:	6833      	ldr	r3, [r6, #0]
 80035cc:	6825      	ldr	r5, [r4, #0]
 80035ce:	6961      	ldr	r1, [r4, #20]
 80035d0:	1d18      	adds	r0, r3, #4
 80035d2:	6030      	str	r0, [r6, #0]
 80035d4:	062e      	lsls	r6, r5, #24
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	d501      	bpl.n	80035de <_printf_i+0x1be>
 80035da:	6019      	str	r1, [r3, #0]
 80035dc:	e002      	b.n	80035e4 <_printf_i+0x1c4>
 80035de:	0668      	lsls	r0, r5, #25
 80035e0:	d5fb      	bpl.n	80035da <_printf_i+0x1ba>
 80035e2:	8019      	strh	r1, [r3, #0]
 80035e4:	2300      	movs	r3, #0
 80035e6:	6123      	str	r3, [r4, #16]
 80035e8:	4616      	mov	r6, r2
 80035ea:	e7bc      	b.n	8003566 <_printf_i+0x146>
 80035ec:	6833      	ldr	r3, [r6, #0]
 80035ee:	1d1a      	adds	r2, r3, #4
 80035f0:	6032      	str	r2, [r6, #0]
 80035f2:	681e      	ldr	r6, [r3, #0]
 80035f4:	6862      	ldr	r2, [r4, #4]
 80035f6:	2100      	movs	r1, #0
 80035f8:	4630      	mov	r0, r6
 80035fa:	f7fc fdf9 	bl	80001f0 <memchr>
 80035fe:	b108      	cbz	r0, 8003604 <_printf_i+0x1e4>
 8003600:	1b80      	subs	r0, r0, r6
 8003602:	6060      	str	r0, [r4, #4]
 8003604:	6863      	ldr	r3, [r4, #4]
 8003606:	6123      	str	r3, [r4, #16]
 8003608:	2300      	movs	r3, #0
 800360a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800360e:	e7aa      	b.n	8003566 <_printf_i+0x146>
 8003610:	6923      	ldr	r3, [r4, #16]
 8003612:	4632      	mov	r2, r6
 8003614:	4649      	mov	r1, r9
 8003616:	4640      	mov	r0, r8
 8003618:	47d0      	blx	sl
 800361a:	3001      	adds	r0, #1
 800361c:	d0ad      	beq.n	800357a <_printf_i+0x15a>
 800361e:	6823      	ldr	r3, [r4, #0]
 8003620:	079b      	lsls	r3, r3, #30
 8003622:	d413      	bmi.n	800364c <_printf_i+0x22c>
 8003624:	68e0      	ldr	r0, [r4, #12]
 8003626:	9b03      	ldr	r3, [sp, #12]
 8003628:	4298      	cmp	r0, r3
 800362a:	bfb8      	it	lt
 800362c:	4618      	movlt	r0, r3
 800362e:	e7a6      	b.n	800357e <_printf_i+0x15e>
 8003630:	2301      	movs	r3, #1
 8003632:	4632      	mov	r2, r6
 8003634:	4649      	mov	r1, r9
 8003636:	4640      	mov	r0, r8
 8003638:	47d0      	blx	sl
 800363a:	3001      	adds	r0, #1
 800363c:	d09d      	beq.n	800357a <_printf_i+0x15a>
 800363e:	3501      	adds	r5, #1
 8003640:	68e3      	ldr	r3, [r4, #12]
 8003642:	9903      	ldr	r1, [sp, #12]
 8003644:	1a5b      	subs	r3, r3, r1
 8003646:	42ab      	cmp	r3, r5
 8003648:	dcf2      	bgt.n	8003630 <_printf_i+0x210>
 800364a:	e7eb      	b.n	8003624 <_printf_i+0x204>
 800364c:	2500      	movs	r5, #0
 800364e:	f104 0619 	add.w	r6, r4, #25
 8003652:	e7f5      	b.n	8003640 <_printf_i+0x220>
 8003654:	080037d5 	.word	0x080037d5
 8003658:	080037e6 	.word	0x080037e6

0800365c <memmove>:
 800365c:	4288      	cmp	r0, r1
 800365e:	b510      	push	{r4, lr}
 8003660:	eb01 0402 	add.w	r4, r1, r2
 8003664:	d902      	bls.n	800366c <memmove+0x10>
 8003666:	4284      	cmp	r4, r0
 8003668:	4623      	mov	r3, r4
 800366a:	d807      	bhi.n	800367c <memmove+0x20>
 800366c:	1e43      	subs	r3, r0, #1
 800366e:	42a1      	cmp	r1, r4
 8003670:	d008      	beq.n	8003684 <memmove+0x28>
 8003672:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003676:	f803 2f01 	strb.w	r2, [r3, #1]!
 800367a:	e7f8      	b.n	800366e <memmove+0x12>
 800367c:	4402      	add	r2, r0
 800367e:	4601      	mov	r1, r0
 8003680:	428a      	cmp	r2, r1
 8003682:	d100      	bne.n	8003686 <memmove+0x2a>
 8003684:	bd10      	pop	{r4, pc}
 8003686:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800368a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800368e:	e7f7      	b.n	8003680 <memmove+0x24>

08003690 <_sbrk_r>:
 8003690:	b538      	push	{r3, r4, r5, lr}
 8003692:	4d06      	ldr	r5, [pc, #24]	@ (80036ac <_sbrk_r+0x1c>)
 8003694:	2300      	movs	r3, #0
 8003696:	4604      	mov	r4, r0
 8003698:	4608      	mov	r0, r1
 800369a:	602b      	str	r3, [r5, #0]
 800369c:	f7fd fa80 	bl	8000ba0 <_sbrk>
 80036a0:	1c43      	adds	r3, r0, #1
 80036a2:	d102      	bne.n	80036aa <_sbrk_r+0x1a>
 80036a4:	682b      	ldr	r3, [r5, #0]
 80036a6:	b103      	cbz	r3, 80036aa <_sbrk_r+0x1a>
 80036a8:	6023      	str	r3, [r4, #0]
 80036aa:	bd38      	pop	{r3, r4, r5, pc}
 80036ac:	20000220 	.word	0x20000220

080036b0 <memcpy>:
 80036b0:	440a      	add	r2, r1
 80036b2:	4291      	cmp	r1, r2
 80036b4:	f100 33ff 	add.w	r3, r0, #4294967295
 80036b8:	d100      	bne.n	80036bc <memcpy+0xc>
 80036ba:	4770      	bx	lr
 80036bc:	b510      	push	{r4, lr}
 80036be:	f811 4b01 	ldrb.w	r4, [r1], #1
 80036c2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80036c6:	4291      	cmp	r1, r2
 80036c8:	d1f9      	bne.n	80036be <memcpy+0xe>
 80036ca:	bd10      	pop	{r4, pc}

080036cc <_realloc_r>:
 80036cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80036d0:	4607      	mov	r7, r0
 80036d2:	4614      	mov	r4, r2
 80036d4:	460d      	mov	r5, r1
 80036d6:	b921      	cbnz	r1, 80036e2 <_realloc_r+0x16>
 80036d8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80036dc:	4611      	mov	r1, r2
 80036de:	f7ff bc4d 	b.w	8002f7c <_malloc_r>
 80036e2:	b92a      	cbnz	r2, 80036f0 <_realloc_r+0x24>
 80036e4:	f7ff fbde 	bl	8002ea4 <_free_r>
 80036e8:	4625      	mov	r5, r4
 80036ea:	4628      	mov	r0, r5
 80036ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80036f0:	f000 f81a 	bl	8003728 <_malloc_usable_size_r>
 80036f4:	4284      	cmp	r4, r0
 80036f6:	4606      	mov	r6, r0
 80036f8:	d802      	bhi.n	8003700 <_realloc_r+0x34>
 80036fa:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80036fe:	d8f4      	bhi.n	80036ea <_realloc_r+0x1e>
 8003700:	4621      	mov	r1, r4
 8003702:	4638      	mov	r0, r7
 8003704:	f7ff fc3a 	bl	8002f7c <_malloc_r>
 8003708:	4680      	mov	r8, r0
 800370a:	b908      	cbnz	r0, 8003710 <_realloc_r+0x44>
 800370c:	4645      	mov	r5, r8
 800370e:	e7ec      	b.n	80036ea <_realloc_r+0x1e>
 8003710:	42b4      	cmp	r4, r6
 8003712:	4622      	mov	r2, r4
 8003714:	4629      	mov	r1, r5
 8003716:	bf28      	it	cs
 8003718:	4632      	movcs	r2, r6
 800371a:	f7ff ffc9 	bl	80036b0 <memcpy>
 800371e:	4629      	mov	r1, r5
 8003720:	4638      	mov	r0, r7
 8003722:	f7ff fbbf 	bl	8002ea4 <_free_r>
 8003726:	e7f1      	b.n	800370c <_realloc_r+0x40>

08003728 <_malloc_usable_size_r>:
 8003728:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800372c:	1f18      	subs	r0, r3, #4
 800372e:	2b00      	cmp	r3, #0
 8003730:	bfbc      	itt	lt
 8003732:	580b      	ldrlt	r3, [r1, r0]
 8003734:	18c0      	addlt	r0, r0, r3
 8003736:	4770      	bx	lr

08003738 <_init>:
 8003738:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800373a:	bf00      	nop
 800373c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800373e:	bc08      	pop	{r3}
 8003740:	469e      	mov	lr, r3
 8003742:	4770      	bx	lr

08003744 <_fini>:
 8003744:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003746:	bf00      	nop
 8003748:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800374a:	bc08      	pop	{r3}
 800374c:	469e      	mov	lr, r3
 800374e:	4770      	bx	lr
