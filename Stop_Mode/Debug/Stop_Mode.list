
Stop_Mode.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000361c  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000cc  080037bc  080037bc  000047bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003888  08003888  0000505c  2**0
                  CONTENTS
  4 .ARM          00000008  08003888  08003888  00004888  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003890  08003890  0000505c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003890  08003890  00004890  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003894  08003894  00004894  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  08003898  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000238  2000005c  080038f4  0000505c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000294  080038f4  00005294  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000505c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b026  00000000  00000000  0000508c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001d80  00000000  00000000  000100b2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000960  00000000  00000000  00011e38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000724  00000000  00000000  00012798  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00015b2a  00000000  00000000  00012ebc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b48c  00000000  00000000  000289e6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008afdc  00000000  00000000  00033e72  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000bee4e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002a9c  00000000  00000000  000bee94  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000066  00000000  00000000  000c1930  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000005c 	.word	0x2000005c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080037a4 	.word	0x080037a4

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000060 	.word	0x20000060
 80001dc:	080037a4 	.word	0x080037a4

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b988 	b.w	80005b8 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	468e      	mov	lr, r1
 80002c8:	4604      	mov	r4, r0
 80002ca:	4688      	mov	r8, r1
 80002cc:	2b00      	cmp	r3, #0
 80002ce:	d14a      	bne.n	8000366 <__udivmoddi4+0xa6>
 80002d0:	428a      	cmp	r2, r1
 80002d2:	4617      	mov	r7, r2
 80002d4:	d962      	bls.n	800039c <__udivmoddi4+0xdc>
 80002d6:	fab2 f682 	clz	r6, r2
 80002da:	b14e      	cbz	r6, 80002f0 <__udivmoddi4+0x30>
 80002dc:	f1c6 0320 	rsb	r3, r6, #32
 80002e0:	fa01 f806 	lsl.w	r8, r1, r6
 80002e4:	fa20 f303 	lsr.w	r3, r0, r3
 80002e8:	40b7      	lsls	r7, r6
 80002ea:	ea43 0808 	orr.w	r8, r3, r8
 80002ee:	40b4      	lsls	r4, r6
 80002f0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002f4:	fa1f fc87 	uxth.w	ip, r7
 80002f8:	fbb8 f1fe 	udiv	r1, r8, lr
 80002fc:	0c23      	lsrs	r3, r4, #16
 80002fe:	fb0e 8811 	mls	r8, lr, r1, r8
 8000302:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000306:	fb01 f20c 	mul.w	r2, r1, ip
 800030a:	429a      	cmp	r2, r3
 800030c:	d909      	bls.n	8000322 <__udivmoddi4+0x62>
 800030e:	18fb      	adds	r3, r7, r3
 8000310:	f101 30ff 	add.w	r0, r1, #4294967295
 8000314:	f080 80ea 	bcs.w	80004ec <__udivmoddi4+0x22c>
 8000318:	429a      	cmp	r2, r3
 800031a:	f240 80e7 	bls.w	80004ec <__udivmoddi4+0x22c>
 800031e:	3902      	subs	r1, #2
 8000320:	443b      	add	r3, r7
 8000322:	1a9a      	subs	r2, r3, r2
 8000324:	b2a3      	uxth	r3, r4
 8000326:	fbb2 f0fe 	udiv	r0, r2, lr
 800032a:	fb0e 2210 	mls	r2, lr, r0, r2
 800032e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000332:	fb00 fc0c 	mul.w	ip, r0, ip
 8000336:	459c      	cmp	ip, r3
 8000338:	d909      	bls.n	800034e <__udivmoddi4+0x8e>
 800033a:	18fb      	adds	r3, r7, r3
 800033c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000340:	f080 80d6 	bcs.w	80004f0 <__udivmoddi4+0x230>
 8000344:	459c      	cmp	ip, r3
 8000346:	f240 80d3 	bls.w	80004f0 <__udivmoddi4+0x230>
 800034a:	443b      	add	r3, r7
 800034c:	3802      	subs	r0, #2
 800034e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000352:	eba3 030c 	sub.w	r3, r3, ip
 8000356:	2100      	movs	r1, #0
 8000358:	b11d      	cbz	r5, 8000362 <__udivmoddi4+0xa2>
 800035a:	40f3      	lsrs	r3, r6
 800035c:	2200      	movs	r2, #0
 800035e:	e9c5 3200 	strd	r3, r2, [r5]
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	428b      	cmp	r3, r1
 8000368:	d905      	bls.n	8000376 <__udivmoddi4+0xb6>
 800036a:	b10d      	cbz	r5, 8000370 <__udivmoddi4+0xb0>
 800036c:	e9c5 0100 	strd	r0, r1, [r5]
 8000370:	2100      	movs	r1, #0
 8000372:	4608      	mov	r0, r1
 8000374:	e7f5      	b.n	8000362 <__udivmoddi4+0xa2>
 8000376:	fab3 f183 	clz	r1, r3
 800037a:	2900      	cmp	r1, #0
 800037c:	d146      	bne.n	800040c <__udivmoddi4+0x14c>
 800037e:	4573      	cmp	r3, lr
 8000380:	d302      	bcc.n	8000388 <__udivmoddi4+0xc8>
 8000382:	4282      	cmp	r2, r0
 8000384:	f200 8105 	bhi.w	8000592 <__udivmoddi4+0x2d2>
 8000388:	1a84      	subs	r4, r0, r2
 800038a:	eb6e 0203 	sbc.w	r2, lr, r3
 800038e:	2001      	movs	r0, #1
 8000390:	4690      	mov	r8, r2
 8000392:	2d00      	cmp	r5, #0
 8000394:	d0e5      	beq.n	8000362 <__udivmoddi4+0xa2>
 8000396:	e9c5 4800 	strd	r4, r8, [r5]
 800039a:	e7e2      	b.n	8000362 <__udivmoddi4+0xa2>
 800039c:	2a00      	cmp	r2, #0
 800039e:	f000 8090 	beq.w	80004c2 <__udivmoddi4+0x202>
 80003a2:	fab2 f682 	clz	r6, r2
 80003a6:	2e00      	cmp	r6, #0
 80003a8:	f040 80a4 	bne.w	80004f4 <__udivmoddi4+0x234>
 80003ac:	1a8a      	subs	r2, r1, r2
 80003ae:	0c03      	lsrs	r3, r0, #16
 80003b0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003b4:	b280      	uxth	r0, r0
 80003b6:	b2bc      	uxth	r4, r7
 80003b8:	2101      	movs	r1, #1
 80003ba:	fbb2 fcfe 	udiv	ip, r2, lr
 80003be:	fb0e 221c 	mls	r2, lr, ip, r2
 80003c2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003c6:	fb04 f20c 	mul.w	r2, r4, ip
 80003ca:	429a      	cmp	r2, r3
 80003cc:	d907      	bls.n	80003de <__udivmoddi4+0x11e>
 80003ce:	18fb      	adds	r3, r7, r3
 80003d0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80003d4:	d202      	bcs.n	80003dc <__udivmoddi4+0x11c>
 80003d6:	429a      	cmp	r2, r3
 80003d8:	f200 80e0 	bhi.w	800059c <__udivmoddi4+0x2dc>
 80003dc:	46c4      	mov	ip, r8
 80003de:	1a9b      	subs	r3, r3, r2
 80003e0:	fbb3 f2fe 	udiv	r2, r3, lr
 80003e4:	fb0e 3312 	mls	r3, lr, r2, r3
 80003e8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80003ec:	fb02 f404 	mul.w	r4, r2, r4
 80003f0:	429c      	cmp	r4, r3
 80003f2:	d907      	bls.n	8000404 <__udivmoddi4+0x144>
 80003f4:	18fb      	adds	r3, r7, r3
 80003f6:	f102 30ff 	add.w	r0, r2, #4294967295
 80003fa:	d202      	bcs.n	8000402 <__udivmoddi4+0x142>
 80003fc:	429c      	cmp	r4, r3
 80003fe:	f200 80ca 	bhi.w	8000596 <__udivmoddi4+0x2d6>
 8000402:	4602      	mov	r2, r0
 8000404:	1b1b      	subs	r3, r3, r4
 8000406:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800040a:	e7a5      	b.n	8000358 <__udivmoddi4+0x98>
 800040c:	f1c1 0620 	rsb	r6, r1, #32
 8000410:	408b      	lsls	r3, r1
 8000412:	fa22 f706 	lsr.w	r7, r2, r6
 8000416:	431f      	orrs	r7, r3
 8000418:	fa0e f401 	lsl.w	r4, lr, r1
 800041c:	fa20 f306 	lsr.w	r3, r0, r6
 8000420:	fa2e fe06 	lsr.w	lr, lr, r6
 8000424:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000428:	4323      	orrs	r3, r4
 800042a:	fa00 f801 	lsl.w	r8, r0, r1
 800042e:	fa1f fc87 	uxth.w	ip, r7
 8000432:	fbbe f0f9 	udiv	r0, lr, r9
 8000436:	0c1c      	lsrs	r4, r3, #16
 8000438:	fb09 ee10 	mls	lr, r9, r0, lr
 800043c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000440:	fb00 fe0c 	mul.w	lr, r0, ip
 8000444:	45a6      	cmp	lr, r4
 8000446:	fa02 f201 	lsl.w	r2, r2, r1
 800044a:	d909      	bls.n	8000460 <__udivmoddi4+0x1a0>
 800044c:	193c      	adds	r4, r7, r4
 800044e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000452:	f080 809c 	bcs.w	800058e <__udivmoddi4+0x2ce>
 8000456:	45a6      	cmp	lr, r4
 8000458:	f240 8099 	bls.w	800058e <__udivmoddi4+0x2ce>
 800045c:	3802      	subs	r0, #2
 800045e:	443c      	add	r4, r7
 8000460:	eba4 040e 	sub.w	r4, r4, lr
 8000464:	fa1f fe83 	uxth.w	lr, r3
 8000468:	fbb4 f3f9 	udiv	r3, r4, r9
 800046c:	fb09 4413 	mls	r4, r9, r3, r4
 8000470:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000474:	fb03 fc0c 	mul.w	ip, r3, ip
 8000478:	45a4      	cmp	ip, r4
 800047a:	d908      	bls.n	800048e <__udivmoddi4+0x1ce>
 800047c:	193c      	adds	r4, r7, r4
 800047e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000482:	f080 8082 	bcs.w	800058a <__udivmoddi4+0x2ca>
 8000486:	45a4      	cmp	ip, r4
 8000488:	d97f      	bls.n	800058a <__udivmoddi4+0x2ca>
 800048a:	3b02      	subs	r3, #2
 800048c:	443c      	add	r4, r7
 800048e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000492:	eba4 040c 	sub.w	r4, r4, ip
 8000496:	fba0 ec02 	umull	lr, ip, r0, r2
 800049a:	4564      	cmp	r4, ip
 800049c:	4673      	mov	r3, lr
 800049e:	46e1      	mov	r9, ip
 80004a0:	d362      	bcc.n	8000568 <__udivmoddi4+0x2a8>
 80004a2:	d05f      	beq.n	8000564 <__udivmoddi4+0x2a4>
 80004a4:	b15d      	cbz	r5, 80004be <__udivmoddi4+0x1fe>
 80004a6:	ebb8 0203 	subs.w	r2, r8, r3
 80004aa:	eb64 0409 	sbc.w	r4, r4, r9
 80004ae:	fa04 f606 	lsl.w	r6, r4, r6
 80004b2:	fa22 f301 	lsr.w	r3, r2, r1
 80004b6:	431e      	orrs	r6, r3
 80004b8:	40cc      	lsrs	r4, r1
 80004ba:	e9c5 6400 	strd	r6, r4, [r5]
 80004be:	2100      	movs	r1, #0
 80004c0:	e74f      	b.n	8000362 <__udivmoddi4+0xa2>
 80004c2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004c6:	0c01      	lsrs	r1, r0, #16
 80004c8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004cc:	b280      	uxth	r0, r0
 80004ce:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004d2:	463b      	mov	r3, r7
 80004d4:	4638      	mov	r0, r7
 80004d6:	463c      	mov	r4, r7
 80004d8:	46b8      	mov	r8, r7
 80004da:	46be      	mov	lr, r7
 80004dc:	2620      	movs	r6, #32
 80004de:	fbb1 f1f7 	udiv	r1, r1, r7
 80004e2:	eba2 0208 	sub.w	r2, r2, r8
 80004e6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80004ea:	e766      	b.n	80003ba <__udivmoddi4+0xfa>
 80004ec:	4601      	mov	r1, r0
 80004ee:	e718      	b.n	8000322 <__udivmoddi4+0x62>
 80004f0:	4610      	mov	r0, r2
 80004f2:	e72c      	b.n	800034e <__udivmoddi4+0x8e>
 80004f4:	f1c6 0220 	rsb	r2, r6, #32
 80004f8:	fa2e f302 	lsr.w	r3, lr, r2
 80004fc:	40b7      	lsls	r7, r6
 80004fe:	40b1      	lsls	r1, r6
 8000500:	fa20 f202 	lsr.w	r2, r0, r2
 8000504:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000508:	430a      	orrs	r2, r1
 800050a:	fbb3 f8fe 	udiv	r8, r3, lr
 800050e:	b2bc      	uxth	r4, r7
 8000510:	fb0e 3318 	mls	r3, lr, r8, r3
 8000514:	0c11      	lsrs	r1, r2, #16
 8000516:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800051a:	fb08 f904 	mul.w	r9, r8, r4
 800051e:	40b0      	lsls	r0, r6
 8000520:	4589      	cmp	r9, r1
 8000522:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000526:	b280      	uxth	r0, r0
 8000528:	d93e      	bls.n	80005a8 <__udivmoddi4+0x2e8>
 800052a:	1879      	adds	r1, r7, r1
 800052c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000530:	d201      	bcs.n	8000536 <__udivmoddi4+0x276>
 8000532:	4589      	cmp	r9, r1
 8000534:	d81f      	bhi.n	8000576 <__udivmoddi4+0x2b6>
 8000536:	eba1 0109 	sub.w	r1, r1, r9
 800053a:	fbb1 f9fe 	udiv	r9, r1, lr
 800053e:	fb09 f804 	mul.w	r8, r9, r4
 8000542:	fb0e 1119 	mls	r1, lr, r9, r1
 8000546:	b292      	uxth	r2, r2
 8000548:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800054c:	4542      	cmp	r2, r8
 800054e:	d229      	bcs.n	80005a4 <__udivmoddi4+0x2e4>
 8000550:	18ba      	adds	r2, r7, r2
 8000552:	f109 31ff 	add.w	r1, r9, #4294967295
 8000556:	d2c4      	bcs.n	80004e2 <__udivmoddi4+0x222>
 8000558:	4542      	cmp	r2, r8
 800055a:	d2c2      	bcs.n	80004e2 <__udivmoddi4+0x222>
 800055c:	f1a9 0102 	sub.w	r1, r9, #2
 8000560:	443a      	add	r2, r7
 8000562:	e7be      	b.n	80004e2 <__udivmoddi4+0x222>
 8000564:	45f0      	cmp	r8, lr
 8000566:	d29d      	bcs.n	80004a4 <__udivmoddi4+0x1e4>
 8000568:	ebbe 0302 	subs.w	r3, lr, r2
 800056c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000570:	3801      	subs	r0, #1
 8000572:	46e1      	mov	r9, ip
 8000574:	e796      	b.n	80004a4 <__udivmoddi4+0x1e4>
 8000576:	eba7 0909 	sub.w	r9, r7, r9
 800057a:	4449      	add	r1, r9
 800057c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000580:	fbb1 f9fe 	udiv	r9, r1, lr
 8000584:	fb09 f804 	mul.w	r8, r9, r4
 8000588:	e7db      	b.n	8000542 <__udivmoddi4+0x282>
 800058a:	4673      	mov	r3, lr
 800058c:	e77f      	b.n	800048e <__udivmoddi4+0x1ce>
 800058e:	4650      	mov	r0, sl
 8000590:	e766      	b.n	8000460 <__udivmoddi4+0x1a0>
 8000592:	4608      	mov	r0, r1
 8000594:	e6fd      	b.n	8000392 <__udivmoddi4+0xd2>
 8000596:	443b      	add	r3, r7
 8000598:	3a02      	subs	r2, #2
 800059a:	e733      	b.n	8000404 <__udivmoddi4+0x144>
 800059c:	f1ac 0c02 	sub.w	ip, ip, #2
 80005a0:	443b      	add	r3, r7
 80005a2:	e71c      	b.n	80003de <__udivmoddi4+0x11e>
 80005a4:	4649      	mov	r1, r9
 80005a6:	e79c      	b.n	80004e2 <__udivmoddi4+0x222>
 80005a8:	eba1 0109 	sub.w	r1, r1, r9
 80005ac:	46c4      	mov	ip, r8
 80005ae:	fbb1 f9fe 	udiv	r9, r1, lr
 80005b2:	fb09 f804 	mul.w	r8, r9, r4
 80005b6:	e7c4      	b.n	8000542 <__udivmoddi4+0x282>

080005b8 <__aeabi_idiv0>:
 80005b8:	4770      	bx	lr
 80005ba:	bf00      	nop

080005bc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005bc:	b580      	push	{r7, lr}
 80005be:	b082      	sub	sp, #8
 80005c0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005c2:	f000 fb3f 	bl	8000c44 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005c6:	f000 f839 	bl	800063c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005ca:	f000 f933 	bl	8000834 <MX_GPIO_Init>
  MX_RTC_Init();
 80005ce:	f000 f8a3 	bl	8000718 <MX_RTC_Init>
  MX_USART2_UART_Init();
 80005d2:	f000 f905 	bl	80007e0 <MX_USART2_UART_Init>
	  	      Example: To configure the wake up timer to 20s the WakeUpCounter is set to 0x9C40:
	  	        RTC_WAKEUPCLOCK_RTCCLK_DIV = RTCCLK_Div16 = 16
	  	        Wake-up Time Base = 16 /(32KHz) = 0.0005 seconds
	  	        ==> WakeUpCounter = ~10s/0.0005s = 20000 = 0x4E20 */

	  	  HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 0x4E20, RTC_WAKEUPCLOCK_RTCCLK_DIV16); //10 s
 80005d6:	2200      	movs	r2, #0
 80005d8:	f644 6120 	movw	r1, #20000	@ 0x4e20
 80005dc:	4813      	ldr	r0, [pc, #76]	@ (800062c <main+0x70>)
 80005de:	f001 feed 	bl	80023bc <HAL_RTCEx_SetWakeUpTimer_IT>


	  	  /****** Suspend the Ticks before entering the STOP mode or else this can wake the device up **********/
	  	  HAL_SuspendTick();
 80005e2:	f000 fbc5 	bl	8000d70 <HAL_SuspendTick>

	  	  HAL_PWR_EnableSleepOnExit();
 80005e6:	f000 ff01 	bl	80013ec <HAL_PWR_EnableSleepOnExit>

	  	  /* Enter Stop Mode */
	  	  HAL_PWR_EnterSTOPMode(PWR_LOWPOWERREGULATOR_ON, PWR_STOPENTRY_WFI);
 80005ea:	2101      	movs	r1, #1
 80005ec:	2001      	movs	r0, #1
 80005ee:	f000 fecd 	bl	800138c <HAL_PWR_EnterSTOPMode>


	  	  HAL_RTCEx_DeactivateWakeUpTimer(&hrtc);
 80005f2:	480e      	ldr	r0, [pc, #56]	@ (800062c <main+0x70>)
 80005f4:	f001 ffa4 	bl	8002540 <HAL_RTCEx_DeactivateWakeUpTimer>

	  	  HAL_UART_Transmit(&huart2, "Code execution in main()\n\r", 25, 1000);
 80005f8:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80005fc:	2219      	movs	r2, #25
 80005fe:	490c      	ldr	r1, [pc, #48]	@ (8000630 <main+0x74>)
 8000600:	480c      	ldr	r0, [pc, #48]	@ (8000634 <main+0x78>)
 8000602:	f002 f873 	bl	80026ec <HAL_UART_Transmit>
	  	  for (int i=0; i<5; i++)
 8000606:	2300      	movs	r3, #0
 8000608:	607b      	str	r3, [r7, #4]
 800060a:	e00a      	b.n	8000622 <main+0x66>
	  	  {
	  	  	  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 800060c:	2120      	movs	r1, #32
 800060e:	480a      	ldr	r0, [pc, #40]	@ (8000638 <main+0x7c>)
 8000610:	f000 fe7d 	bl	800130e <HAL_GPIO_TogglePin>
	  	  	  HAL_Delay(1000);
 8000614:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000618:	f000 fb86 	bl	8000d28 <HAL_Delay>
	  	  for (int i=0; i<5; i++)
 800061c:	687b      	ldr	r3, [r7, #4]
 800061e:	3301      	adds	r3, #1
 8000620:	607b      	str	r3, [r7, #4]
 8000622:	687b      	ldr	r3, [r7, #4]
 8000624:	2b04      	cmp	r3, #4
 8000626:	ddf1      	ble.n	800060c <main+0x50>
	  	  HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 0x4E20, RTC_WAKEUPCLOCK_RTCCLK_DIV16); //10 s
 8000628:	e7d5      	b.n	80005d6 <main+0x1a>
 800062a:	bf00      	nop
 800062c:	20000078 	.word	0x20000078
 8000630:	080037bc 	.word	0x080037bc
 8000634:	20000098 	.word	0x20000098
 8000638:	40020000 	.word	0x40020000

0800063c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800063c:	b580      	push	{r7, lr}
 800063e:	b094      	sub	sp, #80	@ 0x50
 8000640:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000642:	f107 0320 	add.w	r3, r7, #32
 8000646:	2230      	movs	r2, #48	@ 0x30
 8000648:	2100      	movs	r1, #0
 800064a:	4618      	mov	r0, r3
 800064c:	f002 fc2c 	bl	8002ea8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000650:	f107 030c 	add.w	r3, r7, #12
 8000654:	2200      	movs	r2, #0
 8000656:	601a      	str	r2, [r3, #0]
 8000658:	605a      	str	r2, [r3, #4]
 800065a:	609a      	str	r2, [r3, #8]
 800065c:	60da      	str	r2, [r3, #12]
 800065e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000660:	2300      	movs	r3, #0
 8000662:	60bb      	str	r3, [r7, #8]
 8000664:	4b2a      	ldr	r3, [pc, #168]	@ (8000710 <SystemClock_Config+0xd4>)
 8000666:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000668:	4a29      	ldr	r2, [pc, #164]	@ (8000710 <SystemClock_Config+0xd4>)
 800066a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800066e:	6413      	str	r3, [r2, #64]	@ 0x40
 8000670:	4b27      	ldr	r3, [pc, #156]	@ (8000710 <SystemClock_Config+0xd4>)
 8000672:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000674:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000678:	60bb      	str	r3, [r7, #8]
 800067a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 800067c:	2300      	movs	r3, #0
 800067e:	607b      	str	r3, [r7, #4]
 8000680:	4b24      	ldr	r3, [pc, #144]	@ (8000714 <SystemClock_Config+0xd8>)
 8000682:	681b      	ldr	r3, [r3, #0]
 8000684:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000688:	4a22      	ldr	r2, [pc, #136]	@ (8000714 <SystemClock_Config+0xd8>)
 800068a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800068e:	6013      	str	r3, [r2, #0]
 8000690:	4b20      	ldr	r3, [pc, #128]	@ (8000714 <SystemClock_Config+0xd8>)
 8000692:	681b      	ldr	r3, [r3, #0]
 8000694:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000698:	607b      	str	r3, [r7, #4]
 800069a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 800069c:	230a      	movs	r3, #10
 800069e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006a0:	2301      	movs	r3, #1
 80006a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006a4:	2310      	movs	r3, #16
 80006a6:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80006a8:	2301      	movs	r3, #1
 80006aa:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006ac:	2302      	movs	r3, #2
 80006ae:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80006b0:	2300      	movs	r3, #0
 80006b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 80006b4:	2310      	movs	r3, #16
 80006b6:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80006b8:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 80006bc:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80006be:	2304      	movs	r3, #4
 80006c0:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80006c2:	2307      	movs	r3, #7
 80006c4:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006c6:	f107 0320 	add.w	r3, r7, #32
 80006ca:	4618      	mov	r0, r3
 80006cc:	f000 feae 	bl	800142c <HAL_RCC_OscConfig>
 80006d0:	4603      	mov	r3, r0
 80006d2:	2b00      	cmp	r3, #0
 80006d4:	d001      	beq.n	80006da <SystemClock_Config+0x9e>
  {
    Error_Handler();
 80006d6:	f000 f923 	bl	8000920 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006da:	230f      	movs	r3, #15
 80006dc:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006de:	2302      	movs	r3, #2
 80006e0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006e2:	2300      	movs	r3, #0
 80006e4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80006e6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80006ea:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006ec:	2300      	movs	r3, #0
 80006ee:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80006f0:	f107 030c 	add.w	r3, r7, #12
 80006f4:	2102      	movs	r1, #2
 80006f6:	4618      	mov	r0, r3
 80006f8:	f001 f910 	bl	800191c <HAL_RCC_ClockConfig>
 80006fc:	4603      	mov	r3, r0
 80006fe:	2b00      	cmp	r3, #0
 8000700:	d001      	beq.n	8000706 <SystemClock_Config+0xca>
  {
    Error_Handler();
 8000702:	f000 f90d 	bl	8000920 <Error_Handler>
  }
}
 8000706:	bf00      	nop
 8000708:	3750      	adds	r7, #80	@ 0x50
 800070a:	46bd      	mov	sp, r7
 800070c:	bd80      	pop	{r7, pc}
 800070e:	bf00      	nop
 8000710:	40023800 	.word	0x40023800
 8000714:	40007000 	.word	0x40007000

08000718 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000718:	b580      	push	{r7, lr}
 800071a:	b086      	sub	sp, #24
 800071c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 800071e:	1d3b      	adds	r3, r7, #4
 8000720:	2200      	movs	r2, #0
 8000722:	601a      	str	r2, [r3, #0]
 8000724:	605a      	str	r2, [r3, #4]
 8000726:	609a      	str	r2, [r3, #8]
 8000728:	60da      	str	r2, [r3, #12]
 800072a:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 800072c:	2300      	movs	r3, #0
 800072e:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000730:	4b29      	ldr	r3, [pc, #164]	@ (80007d8 <MX_RTC_Init+0xc0>)
 8000732:	4a2a      	ldr	r2, [pc, #168]	@ (80007dc <MX_RTC_Init+0xc4>)
 8000734:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000736:	4b28      	ldr	r3, [pc, #160]	@ (80007d8 <MX_RTC_Init+0xc0>)
 8000738:	2200      	movs	r2, #0
 800073a:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 800073c:	4b26      	ldr	r3, [pc, #152]	@ (80007d8 <MX_RTC_Init+0xc0>)
 800073e:	227f      	movs	r2, #127	@ 0x7f
 8000740:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000742:	4b25      	ldr	r3, [pc, #148]	@ (80007d8 <MX_RTC_Init+0xc0>)
 8000744:	22ff      	movs	r2, #255	@ 0xff
 8000746:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000748:	4b23      	ldr	r3, [pc, #140]	@ (80007d8 <MX_RTC_Init+0xc0>)
 800074a:	2200      	movs	r2, #0
 800074c:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800074e:	4b22      	ldr	r3, [pc, #136]	@ (80007d8 <MX_RTC_Init+0xc0>)
 8000750:	2200      	movs	r2, #0
 8000752:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000754:	4b20      	ldr	r3, [pc, #128]	@ (80007d8 <MX_RTC_Init+0xc0>)
 8000756:	2200      	movs	r2, #0
 8000758:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800075a:	481f      	ldr	r0, [pc, #124]	@ (80007d8 <MX_RTC_Init+0xc0>)
 800075c:	f001 fbec 	bl	8001f38 <HAL_RTC_Init>
 8000760:	4603      	mov	r3, r0
 8000762:	2b00      	cmp	r3, #0
 8000764:	d001      	beq.n	800076a <MX_RTC_Init+0x52>
  {
    Error_Handler();
 8000766:	f000 f8db 	bl	8000920 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 800076a:	2300      	movs	r3, #0
 800076c:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x0;
 800076e:	2300      	movs	r3, #0
 8000770:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 8000772:	2300      	movs	r3, #0
 8000774:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000776:	2300      	movs	r3, #0
 8000778:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800077a:	2300      	movs	r3, #0
 800077c:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 800077e:	1d3b      	adds	r3, r7, #4
 8000780:	2201      	movs	r2, #1
 8000782:	4619      	mov	r1, r3
 8000784:	4814      	ldr	r0, [pc, #80]	@ (80007d8 <MX_RTC_Init+0xc0>)
 8000786:	f001 fc5a 	bl	800203e <HAL_RTC_SetTime>
 800078a:	4603      	mov	r3, r0
 800078c:	2b00      	cmp	r3, #0
 800078e:	d001      	beq.n	8000794 <MX_RTC_Init+0x7c>
  {
    Error_Handler();
 8000790:	f000 f8c6 	bl	8000920 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8000794:	2301      	movs	r3, #1
 8000796:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 8000798:	2301      	movs	r3, #1
 800079a:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x1;
 800079c:	2301      	movs	r3, #1
 800079e:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x0;
 80007a0:	2300      	movs	r3, #0
 80007a2:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 80007a4:	463b      	mov	r3, r7
 80007a6:	2201      	movs	r2, #1
 80007a8:	4619      	mov	r1, r3
 80007aa:	480b      	ldr	r0, [pc, #44]	@ (80007d8 <MX_RTC_Init+0xc0>)
 80007ac:	f001 fce1 	bl	8002172 <HAL_RTC_SetDate>
 80007b0:	4603      	mov	r3, r0
 80007b2:	2b00      	cmp	r3, #0
 80007b4:	d001      	beq.n	80007ba <MX_RTC_Init+0xa2>
  {
    Error_Handler();
 80007b6:	f000 f8b3 	bl	8000920 <Error_Handler>
  }

  /** Enable the WakeUp
  */
  if (HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 0, RTC_WAKEUPCLOCK_RTCCLK_DIV16) != HAL_OK)
 80007ba:	2200      	movs	r2, #0
 80007bc:	2100      	movs	r1, #0
 80007be:	4806      	ldr	r0, [pc, #24]	@ (80007d8 <MX_RTC_Init+0xc0>)
 80007c0:	f001 fdfc 	bl	80023bc <HAL_RTCEx_SetWakeUpTimer_IT>
 80007c4:	4603      	mov	r3, r0
 80007c6:	2b00      	cmp	r3, #0
 80007c8:	d001      	beq.n	80007ce <MX_RTC_Init+0xb6>
  {
    Error_Handler();
 80007ca:	f000 f8a9 	bl	8000920 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80007ce:	bf00      	nop
 80007d0:	3718      	adds	r7, #24
 80007d2:	46bd      	mov	sp, r7
 80007d4:	bd80      	pop	{r7, pc}
 80007d6:	bf00      	nop
 80007d8:	20000078 	.word	0x20000078
 80007dc:	40002800 	.word	0x40002800

080007e0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80007e0:	b580      	push	{r7, lr}
 80007e2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80007e4:	4b11      	ldr	r3, [pc, #68]	@ (800082c <MX_USART2_UART_Init+0x4c>)
 80007e6:	4a12      	ldr	r2, [pc, #72]	@ (8000830 <MX_USART2_UART_Init+0x50>)
 80007e8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80007ea:	4b10      	ldr	r3, [pc, #64]	@ (800082c <MX_USART2_UART_Init+0x4c>)
 80007ec:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80007f0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80007f2:	4b0e      	ldr	r3, [pc, #56]	@ (800082c <MX_USART2_UART_Init+0x4c>)
 80007f4:	2200      	movs	r2, #0
 80007f6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80007f8:	4b0c      	ldr	r3, [pc, #48]	@ (800082c <MX_USART2_UART_Init+0x4c>)
 80007fa:	2200      	movs	r2, #0
 80007fc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80007fe:	4b0b      	ldr	r3, [pc, #44]	@ (800082c <MX_USART2_UART_Init+0x4c>)
 8000800:	2200      	movs	r2, #0
 8000802:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000804:	4b09      	ldr	r3, [pc, #36]	@ (800082c <MX_USART2_UART_Init+0x4c>)
 8000806:	220c      	movs	r2, #12
 8000808:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800080a:	4b08      	ldr	r3, [pc, #32]	@ (800082c <MX_USART2_UART_Init+0x4c>)
 800080c:	2200      	movs	r2, #0
 800080e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000810:	4b06      	ldr	r3, [pc, #24]	@ (800082c <MX_USART2_UART_Init+0x4c>)
 8000812:	2200      	movs	r2, #0
 8000814:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000816:	4805      	ldr	r0, [pc, #20]	@ (800082c <MX_USART2_UART_Init+0x4c>)
 8000818:	f001 ff18 	bl	800264c <HAL_UART_Init>
 800081c:	4603      	mov	r3, r0
 800081e:	2b00      	cmp	r3, #0
 8000820:	d001      	beq.n	8000826 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000822:	f000 f87d 	bl	8000920 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000826:	bf00      	nop
 8000828:	bd80      	pop	{r7, pc}
 800082a:	bf00      	nop
 800082c:	20000098 	.word	0x20000098
 8000830:	40004400 	.word	0x40004400

08000834 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000834:	b580      	push	{r7, lr}
 8000836:	b08a      	sub	sp, #40	@ 0x28
 8000838:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800083a:	f107 0314 	add.w	r3, r7, #20
 800083e:	2200      	movs	r2, #0
 8000840:	601a      	str	r2, [r3, #0]
 8000842:	605a      	str	r2, [r3, #4]
 8000844:	609a      	str	r2, [r3, #8]
 8000846:	60da      	str	r2, [r3, #12]
 8000848:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */
  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800084a:	2300      	movs	r3, #0
 800084c:	613b      	str	r3, [r7, #16]
 800084e:	4b31      	ldr	r3, [pc, #196]	@ (8000914 <MX_GPIO_Init+0xe0>)
 8000850:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000852:	4a30      	ldr	r2, [pc, #192]	@ (8000914 <MX_GPIO_Init+0xe0>)
 8000854:	f043 0304 	orr.w	r3, r3, #4
 8000858:	6313      	str	r3, [r2, #48]	@ 0x30
 800085a:	4b2e      	ldr	r3, [pc, #184]	@ (8000914 <MX_GPIO_Init+0xe0>)
 800085c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800085e:	f003 0304 	and.w	r3, r3, #4
 8000862:	613b      	str	r3, [r7, #16]
 8000864:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000866:	2300      	movs	r3, #0
 8000868:	60fb      	str	r3, [r7, #12]
 800086a:	4b2a      	ldr	r3, [pc, #168]	@ (8000914 <MX_GPIO_Init+0xe0>)
 800086c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800086e:	4a29      	ldr	r2, [pc, #164]	@ (8000914 <MX_GPIO_Init+0xe0>)
 8000870:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000874:	6313      	str	r3, [r2, #48]	@ 0x30
 8000876:	4b27      	ldr	r3, [pc, #156]	@ (8000914 <MX_GPIO_Init+0xe0>)
 8000878:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800087a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800087e:	60fb      	str	r3, [r7, #12]
 8000880:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000882:	2300      	movs	r3, #0
 8000884:	60bb      	str	r3, [r7, #8]
 8000886:	4b23      	ldr	r3, [pc, #140]	@ (8000914 <MX_GPIO_Init+0xe0>)
 8000888:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800088a:	4a22      	ldr	r2, [pc, #136]	@ (8000914 <MX_GPIO_Init+0xe0>)
 800088c:	f043 0301 	orr.w	r3, r3, #1
 8000890:	6313      	str	r3, [r2, #48]	@ 0x30
 8000892:	4b20      	ldr	r3, [pc, #128]	@ (8000914 <MX_GPIO_Init+0xe0>)
 8000894:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000896:	f003 0301 	and.w	r3, r3, #1
 800089a:	60bb      	str	r3, [r7, #8]
 800089c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800089e:	2300      	movs	r3, #0
 80008a0:	607b      	str	r3, [r7, #4]
 80008a2:	4b1c      	ldr	r3, [pc, #112]	@ (8000914 <MX_GPIO_Init+0xe0>)
 80008a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008a6:	4a1b      	ldr	r2, [pc, #108]	@ (8000914 <MX_GPIO_Init+0xe0>)
 80008a8:	f043 0302 	orr.w	r3, r3, #2
 80008ac:	6313      	str	r3, [r2, #48]	@ 0x30
 80008ae:	4b19      	ldr	r3, [pc, #100]	@ (8000914 <MX_GPIO_Init+0xe0>)
 80008b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008b2:	f003 0302 	and.w	r3, r3, #2
 80008b6:	607b      	str	r3, [r7, #4]
 80008b8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80008ba:	2200      	movs	r2, #0
 80008bc:	2120      	movs	r1, #32
 80008be:	4816      	ldr	r0, [pc, #88]	@ (8000918 <MX_GPIO_Init+0xe4>)
 80008c0:	f000 fd0c 	bl	80012dc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80008c4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80008c8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80008ca:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80008ce:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008d0:	2300      	movs	r3, #0
 80008d2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80008d4:	f107 0314 	add.w	r3, r7, #20
 80008d8:	4619      	mov	r1, r3
 80008da:	4810      	ldr	r0, [pc, #64]	@ (800091c <MX_GPIO_Init+0xe8>)
 80008dc:	f000 fb7a 	bl	8000fd4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80008e0:	2320      	movs	r3, #32
 80008e2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008e4:	2301      	movs	r3, #1
 80008e6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008e8:	2300      	movs	r3, #0
 80008ea:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008ec:	2300      	movs	r3, #0
 80008ee:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80008f0:	f107 0314 	add.w	r3, r7, #20
 80008f4:	4619      	mov	r1, r3
 80008f6:	4808      	ldr	r0, [pc, #32]	@ (8000918 <MX_GPIO_Init+0xe4>)
 80008f8:	f000 fb6c 	bl	8000fd4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80008fc:	2200      	movs	r2, #0
 80008fe:	2100      	movs	r1, #0
 8000900:	2028      	movs	r0, #40	@ 0x28
 8000902:	f000 fb30 	bl	8000f66 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000906:	2028      	movs	r0, #40	@ 0x28
 8000908:	f000 fb49 	bl	8000f9e <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */
  /* USER CODE END MX_GPIO_Init_2 */
}
 800090c:	bf00      	nop
 800090e:	3728      	adds	r7, #40	@ 0x28
 8000910:	46bd      	mov	sp, r7
 8000912:	bd80      	pop	{r7, pc}
 8000914:	40023800 	.word	0x40023800
 8000918:	40020000 	.word	0x40020000
 800091c:	40020800 	.word	0x40020800

08000920 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000920:	b480      	push	{r7}
 8000922:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000924:	b672      	cpsid	i
}
 8000926:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000928:	bf00      	nop
 800092a:	e7fd      	b.n	8000928 <Error_Handler+0x8>

0800092c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800092c:	b580      	push	{r7, lr}
 800092e:	b082      	sub	sp, #8
 8000930:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000932:	2300      	movs	r3, #0
 8000934:	607b      	str	r3, [r7, #4]
 8000936:	4b10      	ldr	r3, [pc, #64]	@ (8000978 <HAL_MspInit+0x4c>)
 8000938:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800093a:	4a0f      	ldr	r2, [pc, #60]	@ (8000978 <HAL_MspInit+0x4c>)
 800093c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000940:	6453      	str	r3, [r2, #68]	@ 0x44
 8000942:	4b0d      	ldr	r3, [pc, #52]	@ (8000978 <HAL_MspInit+0x4c>)
 8000944:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000946:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800094a:	607b      	str	r3, [r7, #4]
 800094c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800094e:	2300      	movs	r3, #0
 8000950:	603b      	str	r3, [r7, #0]
 8000952:	4b09      	ldr	r3, [pc, #36]	@ (8000978 <HAL_MspInit+0x4c>)
 8000954:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000956:	4a08      	ldr	r2, [pc, #32]	@ (8000978 <HAL_MspInit+0x4c>)
 8000958:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800095c:	6413      	str	r3, [r2, #64]	@ 0x40
 800095e:	4b06      	ldr	r3, [pc, #24]	@ (8000978 <HAL_MspInit+0x4c>)
 8000960:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000962:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000966:	603b      	str	r3, [r7, #0]
 8000968:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800096a:	2007      	movs	r0, #7
 800096c:	f000 faf0 	bl	8000f50 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000970:	bf00      	nop
 8000972:	3708      	adds	r7, #8
 8000974:	46bd      	mov	sp, r7
 8000976:	bd80      	pop	{r7, pc}
 8000978:	40023800 	.word	0x40023800

0800097c <HAL_RTC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hrtc: RTC handle pointer
  * @retval None
  */
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 800097c:	b580      	push	{r7, lr}
 800097e:	b088      	sub	sp, #32
 8000980:	af00      	add	r7, sp, #0
 8000982:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000984:	f107 030c 	add.w	r3, r7, #12
 8000988:	2200      	movs	r2, #0
 800098a:	601a      	str	r2, [r3, #0]
 800098c:	605a      	str	r2, [r3, #4]
 800098e:	609a      	str	r2, [r3, #8]
 8000990:	60da      	str	r2, [r3, #12]
 8000992:	611a      	str	r2, [r3, #16]
  if(hrtc->Instance==RTC)
 8000994:	687b      	ldr	r3, [r7, #4]
 8000996:	681b      	ldr	r3, [r3, #0]
 8000998:	4a10      	ldr	r2, [pc, #64]	@ (80009dc <HAL_RTC_MspInit+0x60>)
 800099a:	4293      	cmp	r3, r2
 800099c:	d119      	bne.n	80009d2 <HAL_RTC_MspInit+0x56>

    /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 800099e:	2302      	movs	r3, #2
 80009a0:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 80009a2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80009a6:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80009a8:	f107 030c 	add.w	r3, r7, #12
 80009ac:	4618      	mov	r0, r3
 80009ae:	f001 f9d5 	bl	8001d5c <HAL_RCCEx_PeriphCLKConfig>
 80009b2:	4603      	mov	r3, r0
 80009b4:	2b00      	cmp	r3, #0
 80009b6:	d001      	beq.n	80009bc <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 80009b8:	f7ff ffb2 	bl	8000920 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80009bc:	4b08      	ldr	r3, [pc, #32]	@ (80009e0 <HAL_RTC_MspInit+0x64>)
 80009be:	2201      	movs	r2, #1
 80009c0:	601a      	str	r2, [r3, #0]
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_WKUP_IRQn, 0, 0);
 80009c2:	2200      	movs	r2, #0
 80009c4:	2100      	movs	r1, #0
 80009c6:	2003      	movs	r0, #3
 80009c8:	f000 facd 	bl	8000f66 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_WKUP_IRQn);
 80009cc:	2003      	movs	r0, #3
 80009ce:	f000 fae6 	bl	8000f9e <HAL_NVIC_EnableIRQ>

    /* USER CODE END RTC_MspInit 1 */

  }

}
 80009d2:	bf00      	nop
 80009d4:	3720      	adds	r7, #32
 80009d6:	46bd      	mov	sp, r7
 80009d8:	bd80      	pop	{r7, pc}
 80009da:	bf00      	nop
 80009dc:	40002800 	.word	0x40002800
 80009e0:	42470e3c 	.word	0x42470e3c

080009e4 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80009e4:	b580      	push	{r7, lr}
 80009e6:	b08a      	sub	sp, #40	@ 0x28
 80009e8:	af00      	add	r7, sp, #0
 80009ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009ec:	f107 0314 	add.w	r3, r7, #20
 80009f0:	2200      	movs	r2, #0
 80009f2:	601a      	str	r2, [r3, #0]
 80009f4:	605a      	str	r2, [r3, #4]
 80009f6:	609a      	str	r2, [r3, #8]
 80009f8:	60da      	str	r2, [r3, #12]
 80009fa:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80009fc:	687b      	ldr	r3, [r7, #4]
 80009fe:	681b      	ldr	r3, [r3, #0]
 8000a00:	4a19      	ldr	r2, [pc, #100]	@ (8000a68 <HAL_UART_MspInit+0x84>)
 8000a02:	4293      	cmp	r3, r2
 8000a04:	d12b      	bne.n	8000a5e <HAL_UART_MspInit+0x7a>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000a06:	2300      	movs	r3, #0
 8000a08:	613b      	str	r3, [r7, #16]
 8000a0a:	4b18      	ldr	r3, [pc, #96]	@ (8000a6c <HAL_UART_MspInit+0x88>)
 8000a0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a0e:	4a17      	ldr	r2, [pc, #92]	@ (8000a6c <HAL_UART_MspInit+0x88>)
 8000a10:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000a14:	6413      	str	r3, [r2, #64]	@ 0x40
 8000a16:	4b15      	ldr	r3, [pc, #84]	@ (8000a6c <HAL_UART_MspInit+0x88>)
 8000a18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a1a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000a1e:	613b      	str	r3, [r7, #16]
 8000a20:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a22:	2300      	movs	r3, #0
 8000a24:	60fb      	str	r3, [r7, #12]
 8000a26:	4b11      	ldr	r3, [pc, #68]	@ (8000a6c <HAL_UART_MspInit+0x88>)
 8000a28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a2a:	4a10      	ldr	r2, [pc, #64]	@ (8000a6c <HAL_UART_MspInit+0x88>)
 8000a2c:	f043 0301 	orr.w	r3, r3, #1
 8000a30:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a32:	4b0e      	ldr	r3, [pc, #56]	@ (8000a6c <HAL_UART_MspInit+0x88>)
 8000a34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a36:	f003 0301 	and.w	r3, r3, #1
 8000a3a:	60fb      	str	r3, [r7, #12]
 8000a3c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000a3e:	230c      	movs	r3, #12
 8000a40:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a42:	2302      	movs	r3, #2
 8000a44:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a46:	2300      	movs	r3, #0
 8000a48:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a4a:	2300      	movs	r3, #0
 8000a4c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000a4e:	2307      	movs	r3, #7
 8000a50:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a52:	f107 0314 	add.w	r3, r7, #20
 8000a56:	4619      	mov	r1, r3
 8000a58:	4805      	ldr	r0, [pc, #20]	@ (8000a70 <HAL_UART_MspInit+0x8c>)
 8000a5a:	f000 fabb 	bl	8000fd4 <HAL_GPIO_Init>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 8000a5e:	bf00      	nop
 8000a60:	3728      	adds	r7, #40	@ 0x28
 8000a62:	46bd      	mov	sp, r7
 8000a64:	bd80      	pop	{r7, pc}
 8000a66:	bf00      	nop
 8000a68:	40004400 	.word	0x40004400
 8000a6c:	40023800 	.word	0x40023800
 8000a70:	40020000 	.word	0x40020000

08000a74 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a74:	b480      	push	{r7}
 8000a76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000a78:	bf00      	nop
 8000a7a:	e7fd      	b.n	8000a78 <NMI_Handler+0x4>

08000a7c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a7c:	b480      	push	{r7}
 8000a7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a80:	bf00      	nop
 8000a82:	e7fd      	b.n	8000a80 <HardFault_Handler+0x4>

08000a84 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a84:	b480      	push	{r7}
 8000a86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a88:	bf00      	nop
 8000a8a:	e7fd      	b.n	8000a88 <MemManage_Handler+0x4>

08000a8c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a8c:	b480      	push	{r7}
 8000a8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a90:	bf00      	nop
 8000a92:	e7fd      	b.n	8000a90 <BusFault_Handler+0x4>

08000a94 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a94:	b480      	push	{r7}
 8000a96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a98:	bf00      	nop
 8000a9a:	e7fd      	b.n	8000a98 <UsageFault_Handler+0x4>

08000a9c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a9c:	b480      	push	{r7}
 8000a9e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000aa0:	bf00      	nop
 8000aa2:	46bd      	mov	sp, r7
 8000aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa8:	4770      	bx	lr

08000aaa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000aaa:	b480      	push	{r7}
 8000aac:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000aae:	bf00      	nop
 8000ab0:	46bd      	mov	sp, r7
 8000ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab6:	4770      	bx	lr

08000ab8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ab8:	b480      	push	{r7}
 8000aba:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000abc:	bf00      	nop
 8000abe:	46bd      	mov	sp, r7
 8000ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac4:	4770      	bx	lr

08000ac6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ac6:	b580      	push	{r7, lr}
 8000ac8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000aca:	f000 f90d 	bl	8000ce8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ace:	bf00      	nop
 8000ad0:	bd80      	pop	{r7, pc}
	...

08000ad4 <RTC_WKUP_IRQHandler>:

/**
  * @brief This function handles RTC wake-up interrupt through EXTI line 22.
  */
void RTC_WKUP_IRQHandler(void)
{
 8000ad4:	b580      	push	{r7, lr}
 8000ad6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_WKUP_IRQn 0 */
	SystemClock_Config ();
 8000ad8:	f7ff fdb0 	bl	800063c <SystemClock_Config>
	HAL_ResumeTick();
 8000adc:	f000 f958 	bl	8000d90 <HAL_ResumeTick>
	sprintf(bufferTx,"WAKEUP FROM RTC\n NOW GOING IN STOP MODE AGAIN\n\n");
 8000ae0:	4909      	ldr	r1, [pc, #36]	@ (8000b08 <RTC_WKUP_IRQHandler+0x34>)
 8000ae2:	480a      	ldr	r0, [pc, #40]	@ (8000b0c <RTC_WKUP_IRQHandler+0x38>)
 8000ae4:	f002 f9be 	bl	8002e64 <siprintf>
	HAL_UART_Transmit(&huart2, bufferTx, strlen (bufferTx), 1000);
 8000ae8:	4808      	ldr	r0, [pc, #32]	@ (8000b0c <RTC_WKUP_IRQHandler+0x38>)
 8000aea:	f7ff fb79 	bl	80001e0 <strlen>
 8000aee:	4603      	mov	r3, r0
 8000af0:	b29a      	uxth	r2, r3
 8000af2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000af6:	4905      	ldr	r1, [pc, #20]	@ (8000b0c <RTC_WKUP_IRQHandler+0x38>)
 8000af8:	4805      	ldr	r0, [pc, #20]	@ (8000b10 <RTC_WKUP_IRQHandler+0x3c>)
 8000afa:	f001 fdf7 	bl	80026ec <HAL_UART_Transmit>

  /* USER CODE END RTC_WKUP_IRQn 0 */
  HAL_RTCEx_WakeUpTimerIRQHandler(&hrtc);
 8000afe:	4805      	ldr	r0, [pc, #20]	@ (8000b14 <RTC_WKUP_IRQHandler+0x40>)
 8000b00:	f001 fd76 	bl	80025f0 <HAL_RTCEx_WakeUpTimerIRQHandler>
  /* USER CODE BEGIN RTC_WKUP_IRQn 1 */

  /* USER CODE END RTC_WKUP_IRQn 1 */
}
 8000b04:	bf00      	nop
 8000b06:	bd80      	pop	{r7, pc}
 8000b08:	080037d8 	.word	0x080037d8
 8000b0c:	200000e0 	.word	0x200000e0
 8000b10:	20000098 	.word	0x20000098
 8000b14:	20000078 	.word	0x20000078

08000b18 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */
	SystemClock_Config ();
 8000b1c:	f7ff fd8e 	bl	800063c <SystemClock_Config>
	HAL_ResumeTick();
 8000b20:	f000 f936 	bl	8000d90 <HAL_ResumeTick>
	sprintf(bufferTx,"WAKEUP FROM EXTI\n NOW GOING IN STOP MODE AGAIN\n\n");
 8000b24:	490b      	ldr	r1, [pc, #44]	@ (8000b54 <EXTI15_10_IRQHandler+0x3c>)
 8000b26:	480c      	ldr	r0, [pc, #48]	@ (8000b58 <EXTI15_10_IRQHandler+0x40>)
 8000b28:	f002 f99c 	bl	8002e64 <siprintf>
	HAL_UART_Transmit(&huart2, bufferTx, strlen (bufferTx), 1000);
 8000b2c:	480a      	ldr	r0, [pc, #40]	@ (8000b58 <EXTI15_10_IRQHandler+0x40>)
 8000b2e:	f7ff fb57 	bl	80001e0 <strlen>
 8000b32:	4603      	mov	r3, r0
 8000b34:	b29a      	uxth	r2, r3
 8000b36:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000b3a:	4907      	ldr	r1, [pc, #28]	@ (8000b58 <EXTI15_10_IRQHandler+0x40>)
 8000b3c:	4807      	ldr	r0, [pc, #28]	@ (8000b5c <EXTI15_10_IRQHandler+0x44>)
 8000b3e:	f001 fdd5 	bl	80026ec <HAL_UART_Transmit>
	HAL_PWR_DisableSleepOnExit();
 8000b42:	f000 fc63 	bl	800140c <HAL_PWR_DisableSleepOnExit>

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8000b46:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8000b4a:	f000 fbfb 	bl	8001344 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000b4e:	bf00      	nop
 8000b50:	bd80      	pop	{r7, pc}
 8000b52:	bf00      	nop
 8000b54:	08003808 	.word	0x08003808
 8000b58:	200000e0 	.word	0x200000e0
 8000b5c:	20000098 	.word	0x20000098

08000b60 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000b60:	b580      	push	{r7, lr}
 8000b62:	b086      	sub	sp, #24
 8000b64:	af00      	add	r7, sp, #0
 8000b66:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000b68:	4a14      	ldr	r2, [pc, #80]	@ (8000bbc <_sbrk+0x5c>)
 8000b6a:	4b15      	ldr	r3, [pc, #84]	@ (8000bc0 <_sbrk+0x60>)
 8000b6c:	1ad3      	subs	r3, r2, r3
 8000b6e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000b70:	697b      	ldr	r3, [r7, #20]
 8000b72:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000b74:	4b13      	ldr	r3, [pc, #76]	@ (8000bc4 <_sbrk+0x64>)
 8000b76:	681b      	ldr	r3, [r3, #0]
 8000b78:	2b00      	cmp	r3, #0
 8000b7a:	d102      	bne.n	8000b82 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000b7c:	4b11      	ldr	r3, [pc, #68]	@ (8000bc4 <_sbrk+0x64>)
 8000b7e:	4a12      	ldr	r2, [pc, #72]	@ (8000bc8 <_sbrk+0x68>)
 8000b80:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000b82:	4b10      	ldr	r3, [pc, #64]	@ (8000bc4 <_sbrk+0x64>)
 8000b84:	681a      	ldr	r2, [r3, #0]
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	4413      	add	r3, r2
 8000b8a:	693a      	ldr	r2, [r7, #16]
 8000b8c:	429a      	cmp	r2, r3
 8000b8e:	d207      	bcs.n	8000ba0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000b90:	f002 f992 	bl	8002eb8 <__errno>
 8000b94:	4603      	mov	r3, r0
 8000b96:	220c      	movs	r2, #12
 8000b98:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000b9a:	f04f 33ff 	mov.w	r3, #4294967295
 8000b9e:	e009      	b.n	8000bb4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000ba0:	4b08      	ldr	r3, [pc, #32]	@ (8000bc4 <_sbrk+0x64>)
 8000ba2:	681b      	ldr	r3, [r3, #0]
 8000ba4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000ba6:	4b07      	ldr	r3, [pc, #28]	@ (8000bc4 <_sbrk+0x64>)
 8000ba8:	681a      	ldr	r2, [r3, #0]
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	4413      	add	r3, r2
 8000bae:	4a05      	ldr	r2, [pc, #20]	@ (8000bc4 <_sbrk+0x64>)
 8000bb0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000bb2:	68fb      	ldr	r3, [r7, #12]
}
 8000bb4:	4618      	mov	r0, r3
 8000bb6:	3718      	adds	r7, #24
 8000bb8:	46bd      	mov	sp, r7
 8000bba:	bd80      	pop	{r7, pc}
 8000bbc:	20018000 	.word	0x20018000
 8000bc0:	00000400 	.word	0x00000400
 8000bc4:	20000144 	.word	0x20000144
 8000bc8:	20000298 	.word	0x20000298

08000bcc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000bcc:	b480      	push	{r7}
 8000bce:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000bd0:	4b06      	ldr	r3, [pc, #24]	@ (8000bec <SystemInit+0x20>)
 8000bd2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000bd6:	4a05      	ldr	r2, [pc, #20]	@ (8000bec <SystemInit+0x20>)
 8000bd8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000bdc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000be0:	bf00      	nop
 8000be2:	46bd      	mov	sp, r7
 8000be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be8:	4770      	bx	lr
 8000bea:	bf00      	nop
 8000bec:	e000ed00 	.word	0xe000ed00

08000bf0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000bf0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000c28 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000bf4:	480d      	ldr	r0, [pc, #52]	@ (8000c2c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000bf6:	490e      	ldr	r1, [pc, #56]	@ (8000c30 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000bf8:	4a0e      	ldr	r2, [pc, #56]	@ (8000c34 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000bfa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000bfc:	e002      	b.n	8000c04 <LoopCopyDataInit>

08000bfe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000bfe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c00:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c02:	3304      	adds	r3, #4

08000c04 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c04:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c06:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c08:	d3f9      	bcc.n	8000bfe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c0a:	4a0b      	ldr	r2, [pc, #44]	@ (8000c38 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000c0c:	4c0b      	ldr	r4, [pc, #44]	@ (8000c3c <LoopFillZerobss+0x26>)
  movs r3, #0
 8000c0e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c10:	e001      	b.n	8000c16 <LoopFillZerobss>

08000c12 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c12:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c14:	3204      	adds	r2, #4

08000c16 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c16:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c18:	d3fb      	bcc.n	8000c12 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000c1a:	f7ff ffd7 	bl	8000bcc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000c1e:	f002 f951 	bl	8002ec4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000c22:	f7ff fccb 	bl	80005bc <main>
  bx  lr    
 8000c26:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000c28:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000c2c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c30:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8000c34:	08003898 	.word	0x08003898
  ldr r2, =_sbss
 8000c38:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8000c3c:	20000294 	.word	0x20000294

08000c40 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000c40:	e7fe      	b.n	8000c40 <ADC_IRQHandler>
	...

08000c44 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c44:	b580      	push	{r7, lr}
 8000c46:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000c48:	4b0e      	ldr	r3, [pc, #56]	@ (8000c84 <HAL_Init+0x40>)
 8000c4a:	681b      	ldr	r3, [r3, #0]
 8000c4c:	4a0d      	ldr	r2, [pc, #52]	@ (8000c84 <HAL_Init+0x40>)
 8000c4e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000c52:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000c54:	4b0b      	ldr	r3, [pc, #44]	@ (8000c84 <HAL_Init+0x40>)
 8000c56:	681b      	ldr	r3, [r3, #0]
 8000c58:	4a0a      	ldr	r2, [pc, #40]	@ (8000c84 <HAL_Init+0x40>)
 8000c5a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000c5e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c60:	4b08      	ldr	r3, [pc, #32]	@ (8000c84 <HAL_Init+0x40>)
 8000c62:	681b      	ldr	r3, [r3, #0]
 8000c64:	4a07      	ldr	r2, [pc, #28]	@ (8000c84 <HAL_Init+0x40>)
 8000c66:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000c6a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c6c:	2003      	movs	r0, #3
 8000c6e:	f000 f96f 	bl	8000f50 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000c72:	2000      	movs	r0, #0
 8000c74:	f000 f808 	bl	8000c88 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000c78:	f7ff fe58 	bl	800092c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c7c:	2300      	movs	r3, #0
}
 8000c7e:	4618      	mov	r0, r3
 8000c80:	bd80      	pop	{r7, pc}
 8000c82:	bf00      	nop
 8000c84:	40023c00 	.word	0x40023c00

08000c88 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	b082      	sub	sp, #8
 8000c8c:	af00      	add	r7, sp, #0
 8000c8e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000c90:	4b12      	ldr	r3, [pc, #72]	@ (8000cdc <HAL_InitTick+0x54>)
 8000c92:	681a      	ldr	r2, [r3, #0]
 8000c94:	4b12      	ldr	r3, [pc, #72]	@ (8000ce0 <HAL_InitTick+0x58>)
 8000c96:	781b      	ldrb	r3, [r3, #0]
 8000c98:	4619      	mov	r1, r3
 8000c9a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000c9e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000ca2:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ca6:	4618      	mov	r0, r3
 8000ca8:	f000 f987 	bl	8000fba <HAL_SYSTICK_Config>
 8000cac:	4603      	mov	r3, r0
 8000cae:	2b00      	cmp	r3, #0
 8000cb0:	d001      	beq.n	8000cb6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000cb2:	2301      	movs	r3, #1
 8000cb4:	e00e      	b.n	8000cd4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	2b0f      	cmp	r3, #15
 8000cba:	d80a      	bhi.n	8000cd2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	6879      	ldr	r1, [r7, #4]
 8000cc0:	f04f 30ff 	mov.w	r0, #4294967295
 8000cc4:	f000 f94f 	bl	8000f66 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000cc8:	4a06      	ldr	r2, [pc, #24]	@ (8000ce4 <HAL_InitTick+0x5c>)
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000cce:	2300      	movs	r3, #0
 8000cd0:	e000      	b.n	8000cd4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000cd2:	2301      	movs	r3, #1
}
 8000cd4:	4618      	mov	r0, r3
 8000cd6:	3708      	adds	r7, #8
 8000cd8:	46bd      	mov	sp, r7
 8000cda:	bd80      	pop	{r7, pc}
 8000cdc:	20000000 	.word	0x20000000
 8000ce0:	20000008 	.word	0x20000008
 8000ce4:	20000004 	.word	0x20000004

08000ce8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ce8:	b480      	push	{r7}
 8000cea:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000cec:	4b06      	ldr	r3, [pc, #24]	@ (8000d08 <HAL_IncTick+0x20>)
 8000cee:	781b      	ldrb	r3, [r3, #0]
 8000cf0:	461a      	mov	r2, r3
 8000cf2:	4b06      	ldr	r3, [pc, #24]	@ (8000d0c <HAL_IncTick+0x24>)
 8000cf4:	681b      	ldr	r3, [r3, #0]
 8000cf6:	4413      	add	r3, r2
 8000cf8:	4a04      	ldr	r2, [pc, #16]	@ (8000d0c <HAL_IncTick+0x24>)
 8000cfa:	6013      	str	r3, [r2, #0]
}
 8000cfc:	bf00      	nop
 8000cfe:	46bd      	mov	sp, r7
 8000d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d04:	4770      	bx	lr
 8000d06:	bf00      	nop
 8000d08:	20000008 	.word	0x20000008
 8000d0c:	20000148 	.word	0x20000148

08000d10 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d10:	b480      	push	{r7}
 8000d12:	af00      	add	r7, sp, #0
  return uwTick;
 8000d14:	4b03      	ldr	r3, [pc, #12]	@ (8000d24 <HAL_GetTick+0x14>)
 8000d16:	681b      	ldr	r3, [r3, #0]
}
 8000d18:	4618      	mov	r0, r3
 8000d1a:	46bd      	mov	sp, r7
 8000d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d20:	4770      	bx	lr
 8000d22:	bf00      	nop
 8000d24:	20000148 	.word	0x20000148

08000d28 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	b084      	sub	sp, #16
 8000d2c:	af00      	add	r7, sp, #0
 8000d2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000d30:	f7ff ffee 	bl	8000d10 <HAL_GetTick>
 8000d34:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000d3a:	68fb      	ldr	r3, [r7, #12]
 8000d3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000d40:	d005      	beq.n	8000d4e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000d42:	4b0a      	ldr	r3, [pc, #40]	@ (8000d6c <HAL_Delay+0x44>)
 8000d44:	781b      	ldrb	r3, [r3, #0]
 8000d46:	461a      	mov	r2, r3
 8000d48:	68fb      	ldr	r3, [r7, #12]
 8000d4a:	4413      	add	r3, r2
 8000d4c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000d4e:	bf00      	nop
 8000d50:	f7ff ffde 	bl	8000d10 <HAL_GetTick>
 8000d54:	4602      	mov	r2, r0
 8000d56:	68bb      	ldr	r3, [r7, #8]
 8000d58:	1ad3      	subs	r3, r2, r3
 8000d5a:	68fa      	ldr	r2, [r7, #12]
 8000d5c:	429a      	cmp	r2, r3
 8000d5e:	d8f7      	bhi.n	8000d50 <HAL_Delay+0x28>
  {
  }
}
 8000d60:	bf00      	nop
 8000d62:	bf00      	nop
 8000d64:	3710      	adds	r7, #16
 8000d66:	46bd      	mov	sp, r7
 8000d68:	bd80      	pop	{r7, pc}
 8000d6a:	bf00      	nop
 8000d6c:	20000008 	.word	0x20000008

08000d70 <HAL_SuspendTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
 8000d70:	b480      	push	{r7}
 8000d72:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  SysTick->CTRL &= ~SysTick_CTRL_TICKINT_Msk;
 8000d74:	4b05      	ldr	r3, [pc, #20]	@ (8000d8c <HAL_SuspendTick+0x1c>)
 8000d76:	681b      	ldr	r3, [r3, #0]
 8000d78:	4a04      	ldr	r2, [pc, #16]	@ (8000d8c <HAL_SuspendTick+0x1c>)
 8000d7a:	f023 0302 	bic.w	r3, r3, #2
 8000d7e:	6013      	str	r3, [r2, #0]
}
 8000d80:	bf00      	nop
 8000d82:	46bd      	mov	sp, r7
 8000d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d88:	4770      	bx	lr
 8000d8a:	bf00      	nop
 8000d8c:	e000e010 	.word	0xe000e010

08000d90 <HAL_ResumeTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
 8000d90:	b480      	push	{r7}
 8000d92:	af00      	add	r7, sp, #0
  /* Enable SysTick Interrupt */
  SysTick->CTRL  |= SysTick_CTRL_TICKINT_Msk;
 8000d94:	4b05      	ldr	r3, [pc, #20]	@ (8000dac <HAL_ResumeTick+0x1c>)
 8000d96:	681b      	ldr	r3, [r3, #0]
 8000d98:	4a04      	ldr	r2, [pc, #16]	@ (8000dac <HAL_ResumeTick+0x1c>)
 8000d9a:	f043 0302 	orr.w	r3, r3, #2
 8000d9e:	6013      	str	r3, [r2, #0]
}
 8000da0:	bf00      	nop
 8000da2:	46bd      	mov	sp, r7
 8000da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da8:	4770      	bx	lr
 8000daa:	bf00      	nop
 8000dac:	e000e010 	.word	0xe000e010

08000db0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000db0:	b480      	push	{r7}
 8000db2:	b085      	sub	sp, #20
 8000db4:	af00      	add	r7, sp, #0
 8000db6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	f003 0307 	and.w	r3, r3, #7
 8000dbe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000dc0:	4b0c      	ldr	r3, [pc, #48]	@ (8000df4 <__NVIC_SetPriorityGrouping+0x44>)
 8000dc2:	68db      	ldr	r3, [r3, #12]
 8000dc4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000dc6:	68ba      	ldr	r2, [r7, #8]
 8000dc8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000dcc:	4013      	ands	r3, r2
 8000dce:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000dd0:	68fb      	ldr	r3, [r7, #12]
 8000dd2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000dd4:	68bb      	ldr	r3, [r7, #8]
 8000dd6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000dd8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000ddc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000de0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000de2:	4a04      	ldr	r2, [pc, #16]	@ (8000df4 <__NVIC_SetPriorityGrouping+0x44>)
 8000de4:	68bb      	ldr	r3, [r7, #8]
 8000de6:	60d3      	str	r3, [r2, #12]
}
 8000de8:	bf00      	nop
 8000dea:	3714      	adds	r7, #20
 8000dec:	46bd      	mov	sp, r7
 8000dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df2:	4770      	bx	lr
 8000df4:	e000ed00 	.word	0xe000ed00

08000df8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000df8:	b480      	push	{r7}
 8000dfa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000dfc:	4b04      	ldr	r3, [pc, #16]	@ (8000e10 <__NVIC_GetPriorityGrouping+0x18>)
 8000dfe:	68db      	ldr	r3, [r3, #12]
 8000e00:	0a1b      	lsrs	r3, r3, #8
 8000e02:	f003 0307 	and.w	r3, r3, #7
}
 8000e06:	4618      	mov	r0, r3
 8000e08:	46bd      	mov	sp, r7
 8000e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e0e:	4770      	bx	lr
 8000e10:	e000ed00 	.word	0xe000ed00

08000e14 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e14:	b480      	push	{r7}
 8000e16:	b083      	sub	sp, #12
 8000e18:	af00      	add	r7, sp, #0
 8000e1a:	4603      	mov	r3, r0
 8000e1c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e22:	2b00      	cmp	r3, #0
 8000e24:	db0b      	blt.n	8000e3e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000e26:	79fb      	ldrb	r3, [r7, #7]
 8000e28:	f003 021f 	and.w	r2, r3, #31
 8000e2c:	4907      	ldr	r1, [pc, #28]	@ (8000e4c <__NVIC_EnableIRQ+0x38>)
 8000e2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e32:	095b      	lsrs	r3, r3, #5
 8000e34:	2001      	movs	r0, #1
 8000e36:	fa00 f202 	lsl.w	r2, r0, r2
 8000e3a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000e3e:	bf00      	nop
 8000e40:	370c      	adds	r7, #12
 8000e42:	46bd      	mov	sp, r7
 8000e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e48:	4770      	bx	lr
 8000e4a:	bf00      	nop
 8000e4c:	e000e100 	.word	0xe000e100

08000e50 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e50:	b480      	push	{r7}
 8000e52:	b083      	sub	sp, #12
 8000e54:	af00      	add	r7, sp, #0
 8000e56:	4603      	mov	r3, r0
 8000e58:	6039      	str	r1, [r7, #0]
 8000e5a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e5c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e60:	2b00      	cmp	r3, #0
 8000e62:	db0a      	blt.n	8000e7a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e64:	683b      	ldr	r3, [r7, #0]
 8000e66:	b2da      	uxtb	r2, r3
 8000e68:	490c      	ldr	r1, [pc, #48]	@ (8000e9c <__NVIC_SetPriority+0x4c>)
 8000e6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e6e:	0112      	lsls	r2, r2, #4
 8000e70:	b2d2      	uxtb	r2, r2
 8000e72:	440b      	add	r3, r1
 8000e74:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e78:	e00a      	b.n	8000e90 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e7a:	683b      	ldr	r3, [r7, #0]
 8000e7c:	b2da      	uxtb	r2, r3
 8000e7e:	4908      	ldr	r1, [pc, #32]	@ (8000ea0 <__NVIC_SetPriority+0x50>)
 8000e80:	79fb      	ldrb	r3, [r7, #7]
 8000e82:	f003 030f 	and.w	r3, r3, #15
 8000e86:	3b04      	subs	r3, #4
 8000e88:	0112      	lsls	r2, r2, #4
 8000e8a:	b2d2      	uxtb	r2, r2
 8000e8c:	440b      	add	r3, r1
 8000e8e:	761a      	strb	r2, [r3, #24]
}
 8000e90:	bf00      	nop
 8000e92:	370c      	adds	r7, #12
 8000e94:	46bd      	mov	sp, r7
 8000e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e9a:	4770      	bx	lr
 8000e9c:	e000e100 	.word	0xe000e100
 8000ea0:	e000ed00 	.word	0xe000ed00

08000ea4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ea4:	b480      	push	{r7}
 8000ea6:	b089      	sub	sp, #36	@ 0x24
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	60f8      	str	r0, [r7, #12]
 8000eac:	60b9      	str	r1, [r7, #8]
 8000eae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000eb0:	68fb      	ldr	r3, [r7, #12]
 8000eb2:	f003 0307 	and.w	r3, r3, #7
 8000eb6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000eb8:	69fb      	ldr	r3, [r7, #28]
 8000eba:	f1c3 0307 	rsb	r3, r3, #7
 8000ebe:	2b04      	cmp	r3, #4
 8000ec0:	bf28      	it	cs
 8000ec2:	2304      	movcs	r3, #4
 8000ec4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000ec6:	69fb      	ldr	r3, [r7, #28]
 8000ec8:	3304      	adds	r3, #4
 8000eca:	2b06      	cmp	r3, #6
 8000ecc:	d902      	bls.n	8000ed4 <NVIC_EncodePriority+0x30>
 8000ece:	69fb      	ldr	r3, [r7, #28]
 8000ed0:	3b03      	subs	r3, #3
 8000ed2:	e000      	b.n	8000ed6 <NVIC_EncodePriority+0x32>
 8000ed4:	2300      	movs	r3, #0
 8000ed6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ed8:	f04f 32ff 	mov.w	r2, #4294967295
 8000edc:	69bb      	ldr	r3, [r7, #24]
 8000ede:	fa02 f303 	lsl.w	r3, r2, r3
 8000ee2:	43da      	mvns	r2, r3
 8000ee4:	68bb      	ldr	r3, [r7, #8]
 8000ee6:	401a      	ands	r2, r3
 8000ee8:	697b      	ldr	r3, [r7, #20]
 8000eea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000eec:	f04f 31ff 	mov.w	r1, #4294967295
 8000ef0:	697b      	ldr	r3, [r7, #20]
 8000ef2:	fa01 f303 	lsl.w	r3, r1, r3
 8000ef6:	43d9      	mvns	r1, r3
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000efc:	4313      	orrs	r3, r2
         );
}
 8000efe:	4618      	mov	r0, r3
 8000f00:	3724      	adds	r7, #36	@ 0x24
 8000f02:	46bd      	mov	sp, r7
 8000f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f08:	4770      	bx	lr
	...

08000f0c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	b082      	sub	sp, #8
 8000f10:	af00      	add	r7, sp, #0
 8000f12:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	3b01      	subs	r3, #1
 8000f18:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000f1c:	d301      	bcc.n	8000f22 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000f1e:	2301      	movs	r3, #1
 8000f20:	e00f      	b.n	8000f42 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f22:	4a0a      	ldr	r2, [pc, #40]	@ (8000f4c <SysTick_Config+0x40>)
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	3b01      	subs	r3, #1
 8000f28:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000f2a:	210f      	movs	r1, #15
 8000f2c:	f04f 30ff 	mov.w	r0, #4294967295
 8000f30:	f7ff ff8e 	bl	8000e50 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000f34:	4b05      	ldr	r3, [pc, #20]	@ (8000f4c <SysTick_Config+0x40>)
 8000f36:	2200      	movs	r2, #0
 8000f38:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000f3a:	4b04      	ldr	r3, [pc, #16]	@ (8000f4c <SysTick_Config+0x40>)
 8000f3c:	2207      	movs	r2, #7
 8000f3e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000f40:	2300      	movs	r3, #0
}
 8000f42:	4618      	mov	r0, r3
 8000f44:	3708      	adds	r7, #8
 8000f46:	46bd      	mov	sp, r7
 8000f48:	bd80      	pop	{r7, pc}
 8000f4a:	bf00      	nop
 8000f4c:	e000e010 	.word	0xe000e010

08000f50 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f50:	b580      	push	{r7, lr}
 8000f52:	b082      	sub	sp, #8
 8000f54:	af00      	add	r7, sp, #0
 8000f56:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f58:	6878      	ldr	r0, [r7, #4]
 8000f5a:	f7ff ff29 	bl	8000db0 <__NVIC_SetPriorityGrouping>
}
 8000f5e:	bf00      	nop
 8000f60:	3708      	adds	r7, #8
 8000f62:	46bd      	mov	sp, r7
 8000f64:	bd80      	pop	{r7, pc}

08000f66 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000f66:	b580      	push	{r7, lr}
 8000f68:	b086      	sub	sp, #24
 8000f6a:	af00      	add	r7, sp, #0
 8000f6c:	4603      	mov	r3, r0
 8000f6e:	60b9      	str	r1, [r7, #8]
 8000f70:	607a      	str	r2, [r7, #4]
 8000f72:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000f74:	2300      	movs	r3, #0
 8000f76:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000f78:	f7ff ff3e 	bl	8000df8 <__NVIC_GetPriorityGrouping>
 8000f7c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f7e:	687a      	ldr	r2, [r7, #4]
 8000f80:	68b9      	ldr	r1, [r7, #8]
 8000f82:	6978      	ldr	r0, [r7, #20]
 8000f84:	f7ff ff8e 	bl	8000ea4 <NVIC_EncodePriority>
 8000f88:	4602      	mov	r2, r0
 8000f8a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f8e:	4611      	mov	r1, r2
 8000f90:	4618      	mov	r0, r3
 8000f92:	f7ff ff5d 	bl	8000e50 <__NVIC_SetPriority>
}
 8000f96:	bf00      	nop
 8000f98:	3718      	adds	r7, #24
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	bd80      	pop	{r7, pc}

08000f9e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f9e:	b580      	push	{r7, lr}
 8000fa0:	b082      	sub	sp, #8
 8000fa2:	af00      	add	r7, sp, #0
 8000fa4:	4603      	mov	r3, r0
 8000fa6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000fa8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fac:	4618      	mov	r0, r3
 8000fae:	f7ff ff31 	bl	8000e14 <__NVIC_EnableIRQ>
}
 8000fb2:	bf00      	nop
 8000fb4:	3708      	adds	r7, #8
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	bd80      	pop	{r7, pc}

08000fba <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000fba:	b580      	push	{r7, lr}
 8000fbc:	b082      	sub	sp, #8
 8000fbe:	af00      	add	r7, sp, #0
 8000fc0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000fc2:	6878      	ldr	r0, [r7, #4]
 8000fc4:	f7ff ffa2 	bl	8000f0c <SysTick_Config>
 8000fc8:	4603      	mov	r3, r0
}
 8000fca:	4618      	mov	r0, r3
 8000fcc:	3708      	adds	r7, #8
 8000fce:	46bd      	mov	sp, r7
 8000fd0:	bd80      	pop	{r7, pc}
	...

08000fd4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000fd4:	b480      	push	{r7}
 8000fd6:	b089      	sub	sp, #36	@ 0x24
 8000fd8:	af00      	add	r7, sp, #0
 8000fda:	6078      	str	r0, [r7, #4]
 8000fdc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000fde:	2300      	movs	r3, #0
 8000fe0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000fea:	2300      	movs	r3, #0
 8000fec:	61fb      	str	r3, [r7, #28]
 8000fee:	e159      	b.n	80012a4 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000ff0:	2201      	movs	r2, #1
 8000ff2:	69fb      	ldr	r3, [r7, #28]
 8000ff4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ff8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000ffa:	683b      	ldr	r3, [r7, #0]
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	697a      	ldr	r2, [r7, #20]
 8001000:	4013      	ands	r3, r2
 8001002:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001004:	693a      	ldr	r2, [r7, #16]
 8001006:	697b      	ldr	r3, [r7, #20]
 8001008:	429a      	cmp	r2, r3
 800100a:	f040 8148 	bne.w	800129e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800100e:	683b      	ldr	r3, [r7, #0]
 8001010:	685b      	ldr	r3, [r3, #4]
 8001012:	f003 0303 	and.w	r3, r3, #3
 8001016:	2b01      	cmp	r3, #1
 8001018:	d005      	beq.n	8001026 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800101a:	683b      	ldr	r3, [r7, #0]
 800101c:	685b      	ldr	r3, [r3, #4]
 800101e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001022:	2b02      	cmp	r3, #2
 8001024:	d130      	bne.n	8001088 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	689b      	ldr	r3, [r3, #8]
 800102a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800102c:	69fb      	ldr	r3, [r7, #28]
 800102e:	005b      	lsls	r3, r3, #1
 8001030:	2203      	movs	r2, #3
 8001032:	fa02 f303 	lsl.w	r3, r2, r3
 8001036:	43db      	mvns	r3, r3
 8001038:	69ba      	ldr	r2, [r7, #24]
 800103a:	4013      	ands	r3, r2
 800103c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800103e:	683b      	ldr	r3, [r7, #0]
 8001040:	68da      	ldr	r2, [r3, #12]
 8001042:	69fb      	ldr	r3, [r7, #28]
 8001044:	005b      	lsls	r3, r3, #1
 8001046:	fa02 f303 	lsl.w	r3, r2, r3
 800104a:	69ba      	ldr	r2, [r7, #24]
 800104c:	4313      	orrs	r3, r2
 800104e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	69ba      	ldr	r2, [r7, #24]
 8001054:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	685b      	ldr	r3, [r3, #4]
 800105a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800105c:	2201      	movs	r2, #1
 800105e:	69fb      	ldr	r3, [r7, #28]
 8001060:	fa02 f303 	lsl.w	r3, r2, r3
 8001064:	43db      	mvns	r3, r3
 8001066:	69ba      	ldr	r2, [r7, #24]
 8001068:	4013      	ands	r3, r2
 800106a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800106c:	683b      	ldr	r3, [r7, #0]
 800106e:	685b      	ldr	r3, [r3, #4]
 8001070:	091b      	lsrs	r3, r3, #4
 8001072:	f003 0201 	and.w	r2, r3, #1
 8001076:	69fb      	ldr	r3, [r7, #28]
 8001078:	fa02 f303 	lsl.w	r3, r2, r3
 800107c:	69ba      	ldr	r2, [r7, #24]
 800107e:	4313      	orrs	r3, r2
 8001080:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	69ba      	ldr	r2, [r7, #24]
 8001086:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001088:	683b      	ldr	r3, [r7, #0]
 800108a:	685b      	ldr	r3, [r3, #4]
 800108c:	f003 0303 	and.w	r3, r3, #3
 8001090:	2b03      	cmp	r3, #3
 8001092:	d017      	beq.n	80010c4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	68db      	ldr	r3, [r3, #12]
 8001098:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800109a:	69fb      	ldr	r3, [r7, #28]
 800109c:	005b      	lsls	r3, r3, #1
 800109e:	2203      	movs	r2, #3
 80010a0:	fa02 f303 	lsl.w	r3, r2, r3
 80010a4:	43db      	mvns	r3, r3
 80010a6:	69ba      	ldr	r2, [r7, #24]
 80010a8:	4013      	ands	r3, r2
 80010aa:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80010ac:	683b      	ldr	r3, [r7, #0]
 80010ae:	689a      	ldr	r2, [r3, #8]
 80010b0:	69fb      	ldr	r3, [r7, #28]
 80010b2:	005b      	lsls	r3, r3, #1
 80010b4:	fa02 f303 	lsl.w	r3, r2, r3
 80010b8:	69ba      	ldr	r2, [r7, #24]
 80010ba:	4313      	orrs	r3, r2
 80010bc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	69ba      	ldr	r2, [r7, #24]
 80010c2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80010c4:	683b      	ldr	r3, [r7, #0]
 80010c6:	685b      	ldr	r3, [r3, #4]
 80010c8:	f003 0303 	and.w	r3, r3, #3
 80010cc:	2b02      	cmp	r3, #2
 80010ce:	d123      	bne.n	8001118 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80010d0:	69fb      	ldr	r3, [r7, #28]
 80010d2:	08da      	lsrs	r2, r3, #3
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	3208      	adds	r2, #8
 80010d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80010dc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80010de:	69fb      	ldr	r3, [r7, #28]
 80010e0:	f003 0307 	and.w	r3, r3, #7
 80010e4:	009b      	lsls	r3, r3, #2
 80010e6:	220f      	movs	r2, #15
 80010e8:	fa02 f303 	lsl.w	r3, r2, r3
 80010ec:	43db      	mvns	r3, r3
 80010ee:	69ba      	ldr	r2, [r7, #24]
 80010f0:	4013      	ands	r3, r2
 80010f2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80010f4:	683b      	ldr	r3, [r7, #0]
 80010f6:	691a      	ldr	r2, [r3, #16]
 80010f8:	69fb      	ldr	r3, [r7, #28]
 80010fa:	f003 0307 	and.w	r3, r3, #7
 80010fe:	009b      	lsls	r3, r3, #2
 8001100:	fa02 f303 	lsl.w	r3, r2, r3
 8001104:	69ba      	ldr	r2, [r7, #24]
 8001106:	4313      	orrs	r3, r2
 8001108:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800110a:	69fb      	ldr	r3, [r7, #28]
 800110c:	08da      	lsrs	r2, r3, #3
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	3208      	adds	r2, #8
 8001112:	69b9      	ldr	r1, [r7, #24]
 8001114:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800111e:	69fb      	ldr	r3, [r7, #28]
 8001120:	005b      	lsls	r3, r3, #1
 8001122:	2203      	movs	r2, #3
 8001124:	fa02 f303 	lsl.w	r3, r2, r3
 8001128:	43db      	mvns	r3, r3
 800112a:	69ba      	ldr	r2, [r7, #24]
 800112c:	4013      	ands	r3, r2
 800112e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001130:	683b      	ldr	r3, [r7, #0]
 8001132:	685b      	ldr	r3, [r3, #4]
 8001134:	f003 0203 	and.w	r2, r3, #3
 8001138:	69fb      	ldr	r3, [r7, #28]
 800113a:	005b      	lsls	r3, r3, #1
 800113c:	fa02 f303 	lsl.w	r3, r2, r3
 8001140:	69ba      	ldr	r2, [r7, #24]
 8001142:	4313      	orrs	r3, r2
 8001144:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	69ba      	ldr	r2, [r7, #24]
 800114a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800114c:	683b      	ldr	r3, [r7, #0]
 800114e:	685b      	ldr	r3, [r3, #4]
 8001150:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001154:	2b00      	cmp	r3, #0
 8001156:	f000 80a2 	beq.w	800129e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800115a:	2300      	movs	r3, #0
 800115c:	60fb      	str	r3, [r7, #12]
 800115e:	4b57      	ldr	r3, [pc, #348]	@ (80012bc <HAL_GPIO_Init+0x2e8>)
 8001160:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001162:	4a56      	ldr	r2, [pc, #344]	@ (80012bc <HAL_GPIO_Init+0x2e8>)
 8001164:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001168:	6453      	str	r3, [r2, #68]	@ 0x44
 800116a:	4b54      	ldr	r3, [pc, #336]	@ (80012bc <HAL_GPIO_Init+0x2e8>)
 800116c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800116e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001172:	60fb      	str	r3, [r7, #12]
 8001174:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001176:	4a52      	ldr	r2, [pc, #328]	@ (80012c0 <HAL_GPIO_Init+0x2ec>)
 8001178:	69fb      	ldr	r3, [r7, #28]
 800117a:	089b      	lsrs	r3, r3, #2
 800117c:	3302      	adds	r3, #2
 800117e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001182:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001184:	69fb      	ldr	r3, [r7, #28]
 8001186:	f003 0303 	and.w	r3, r3, #3
 800118a:	009b      	lsls	r3, r3, #2
 800118c:	220f      	movs	r2, #15
 800118e:	fa02 f303 	lsl.w	r3, r2, r3
 8001192:	43db      	mvns	r3, r3
 8001194:	69ba      	ldr	r2, [r7, #24]
 8001196:	4013      	ands	r3, r2
 8001198:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	4a49      	ldr	r2, [pc, #292]	@ (80012c4 <HAL_GPIO_Init+0x2f0>)
 800119e:	4293      	cmp	r3, r2
 80011a0:	d019      	beq.n	80011d6 <HAL_GPIO_Init+0x202>
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	4a48      	ldr	r2, [pc, #288]	@ (80012c8 <HAL_GPIO_Init+0x2f4>)
 80011a6:	4293      	cmp	r3, r2
 80011a8:	d013      	beq.n	80011d2 <HAL_GPIO_Init+0x1fe>
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	4a47      	ldr	r2, [pc, #284]	@ (80012cc <HAL_GPIO_Init+0x2f8>)
 80011ae:	4293      	cmp	r3, r2
 80011b0:	d00d      	beq.n	80011ce <HAL_GPIO_Init+0x1fa>
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	4a46      	ldr	r2, [pc, #280]	@ (80012d0 <HAL_GPIO_Init+0x2fc>)
 80011b6:	4293      	cmp	r3, r2
 80011b8:	d007      	beq.n	80011ca <HAL_GPIO_Init+0x1f6>
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	4a45      	ldr	r2, [pc, #276]	@ (80012d4 <HAL_GPIO_Init+0x300>)
 80011be:	4293      	cmp	r3, r2
 80011c0:	d101      	bne.n	80011c6 <HAL_GPIO_Init+0x1f2>
 80011c2:	2304      	movs	r3, #4
 80011c4:	e008      	b.n	80011d8 <HAL_GPIO_Init+0x204>
 80011c6:	2307      	movs	r3, #7
 80011c8:	e006      	b.n	80011d8 <HAL_GPIO_Init+0x204>
 80011ca:	2303      	movs	r3, #3
 80011cc:	e004      	b.n	80011d8 <HAL_GPIO_Init+0x204>
 80011ce:	2302      	movs	r3, #2
 80011d0:	e002      	b.n	80011d8 <HAL_GPIO_Init+0x204>
 80011d2:	2301      	movs	r3, #1
 80011d4:	e000      	b.n	80011d8 <HAL_GPIO_Init+0x204>
 80011d6:	2300      	movs	r3, #0
 80011d8:	69fa      	ldr	r2, [r7, #28]
 80011da:	f002 0203 	and.w	r2, r2, #3
 80011de:	0092      	lsls	r2, r2, #2
 80011e0:	4093      	lsls	r3, r2
 80011e2:	69ba      	ldr	r2, [r7, #24]
 80011e4:	4313      	orrs	r3, r2
 80011e6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80011e8:	4935      	ldr	r1, [pc, #212]	@ (80012c0 <HAL_GPIO_Init+0x2ec>)
 80011ea:	69fb      	ldr	r3, [r7, #28]
 80011ec:	089b      	lsrs	r3, r3, #2
 80011ee:	3302      	adds	r3, #2
 80011f0:	69ba      	ldr	r2, [r7, #24]
 80011f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80011f6:	4b38      	ldr	r3, [pc, #224]	@ (80012d8 <HAL_GPIO_Init+0x304>)
 80011f8:	689b      	ldr	r3, [r3, #8]
 80011fa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011fc:	693b      	ldr	r3, [r7, #16]
 80011fe:	43db      	mvns	r3, r3
 8001200:	69ba      	ldr	r2, [r7, #24]
 8001202:	4013      	ands	r3, r2
 8001204:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001206:	683b      	ldr	r3, [r7, #0]
 8001208:	685b      	ldr	r3, [r3, #4]
 800120a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800120e:	2b00      	cmp	r3, #0
 8001210:	d003      	beq.n	800121a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001212:	69ba      	ldr	r2, [r7, #24]
 8001214:	693b      	ldr	r3, [r7, #16]
 8001216:	4313      	orrs	r3, r2
 8001218:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800121a:	4a2f      	ldr	r2, [pc, #188]	@ (80012d8 <HAL_GPIO_Init+0x304>)
 800121c:	69bb      	ldr	r3, [r7, #24]
 800121e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001220:	4b2d      	ldr	r3, [pc, #180]	@ (80012d8 <HAL_GPIO_Init+0x304>)
 8001222:	68db      	ldr	r3, [r3, #12]
 8001224:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001226:	693b      	ldr	r3, [r7, #16]
 8001228:	43db      	mvns	r3, r3
 800122a:	69ba      	ldr	r2, [r7, #24]
 800122c:	4013      	ands	r3, r2
 800122e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001230:	683b      	ldr	r3, [r7, #0]
 8001232:	685b      	ldr	r3, [r3, #4]
 8001234:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001238:	2b00      	cmp	r3, #0
 800123a:	d003      	beq.n	8001244 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800123c:	69ba      	ldr	r2, [r7, #24]
 800123e:	693b      	ldr	r3, [r7, #16]
 8001240:	4313      	orrs	r3, r2
 8001242:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001244:	4a24      	ldr	r2, [pc, #144]	@ (80012d8 <HAL_GPIO_Init+0x304>)
 8001246:	69bb      	ldr	r3, [r7, #24]
 8001248:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800124a:	4b23      	ldr	r3, [pc, #140]	@ (80012d8 <HAL_GPIO_Init+0x304>)
 800124c:	685b      	ldr	r3, [r3, #4]
 800124e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001250:	693b      	ldr	r3, [r7, #16]
 8001252:	43db      	mvns	r3, r3
 8001254:	69ba      	ldr	r2, [r7, #24]
 8001256:	4013      	ands	r3, r2
 8001258:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800125a:	683b      	ldr	r3, [r7, #0]
 800125c:	685b      	ldr	r3, [r3, #4]
 800125e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001262:	2b00      	cmp	r3, #0
 8001264:	d003      	beq.n	800126e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001266:	69ba      	ldr	r2, [r7, #24]
 8001268:	693b      	ldr	r3, [r7, #16]
 800126a:	4313      	orrs	r3, r2
 800126c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800126e:	4a1a      	ldr	r2, [pc, #104]	@ (80012d8 <HAL_GPIO_Init+0x304>)
 8001270:	69bb      	ldr	r3, [r7, #24]
 8001272:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001274:	4b18      	ldr	r3, [pc, #96]	@ (80012d8 <HAL_GPIO_Init+0x304>)
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800127a:	693b      	ldr	r3, [r7, #16]
 800127c:	43db      	mvns	r3, r3
 800127e:	69ba      	ldr	r2, [r7, #24]
 8001280:	4013      	ands	r3, r2
 8001282:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001284:	683b      	ldr	r3, [r7, #0]
 8001286:	685b      	ldr	r3, [r3, #4]
 8001288:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800128c:	2b00      	cmp	r3, #0
 800128e:	d003      	beq.n	8001298 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001290:	69ba      	ldr	r2, [r7, #24]
 8001292:	693b      	ldr	r3, [r7, #16]
 8001294:	4313      	orrs	r3, r2
 8001296:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001298:	4a0f      	ldr	r2, [pc, #60]	@ (80012d8 <HAL_GPIO_Init+0x304>)
 800129a:	69bb      	ldr	r3, [r7, #24]
 800129c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800129e:	69fb      	ldr	r3, [r7, #28]
 80012a0:	3301      	adds	r3, #1
 80012a2:	61fb      	str	r3, [r7, #28]
 80012a4:	69fb      	ldr	r3, [r7, #28]
 80012a6:	2b0f      	cmp	r3, #15
 80012a8:	f67f aea2 	bls.w	8000ff0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80012ac:	bf00      	nop
 80012ae:	bf00      	nop
 80012b0:	3724      	adds	r7, #36	@ 0x24
 80012b2:	46bd      	mov	sp, r7
 80012b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b8:	4770      	bx	lr
 80012ba:	bf00      	nop
 80012bc:	40023800 	.word	0x40023800
 80012c0:	40013800 	.word	0x40013800
 80012c4:	40020000 	.word	0x40020000
 80012c8:	40020400 	.word	0x40020400
 80012cc:	40020800 	.word	0x40020800
 80012d0:	40020c00 	.word	0x40020c00
 80012d4:	40021000 	.word	0x40021000
 80012d8:	40013c00 	.word	0x40013c00

080012dc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80012dc:	b480      	push	{r7}
 80012de:	b083      	sub	sp, #12
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	6078      	str	r0, [r7, #4]
 80012e4:	460b      	mov	r3, r1
 80012e6:	807b      	strh	r3, [r7, #2]
 80012e8:	4613      	mov	r3, r2
 80012ea:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80012ec:	787b      	ldrb	r3, [r7, #1]
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d003      	beq.n	80012fa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80012f2:	887a      	ldrh	r2, [r7, #2]
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80012f8:	e003      	b.n	8001302 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80012fa:	887b      	ldrh	r3, [r7, #2]
 80012fc:	041a      	lsls	r2, r3, #16
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	619a      	str	r2, [r3, #24]
}
 8001302:	bf00      	nop
 8001304:	370c      	adds	r7, #12
 8001306:	46bd      	mov	sp, r7
 8001308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800130c:	4770      	bx	lr

0800130e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800130e:	b480      	push	{r7}
 8001310:	b085      	sub	sp, #20
 8001312:	af00      	add	r7, sp, #0
 8001314:	6078      	str	r0, [r7, #4]
 8001316:	460b      	mov	r3, r1
 8001318:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	695b      	ldr	r3, [r3, #20]
 800131e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001320:	887a      	ldrh	r2, [r7, #2]
 8001322:	68fb      	ldr	r3, [r7, #12]
 8001324:	4013      	ands	r3, r2
 8001326:	041a      	lsls	r2, r3, #16
 8001328:	68fb      	ldr	r3, [r7, #12]
 800132a:	43d9      	mvns	r1, r3
 800132c:	887b      	ldrh	r3, [r7, #2]
 800132e:	400b      	ands	r3, r1
 8001330:	431a      	orrs	r2, r3
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	619a      	str	r2, [r3, #24]
}
 8001336:	bf00      	nop
 8001338:	3714      	adds	r7, #20
 800133a:	46bd      	mov	sp, r7
 800133c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001340:	4770      	bx	lr
	...

08001344 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001344:	b580      	push	{r7, lr}
 8001346:	b082      	sub	sp, #8
 8001348:	af00      	add	r7, sp, #0
 800134a:	4603      	mov	r3, r0
 800134c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800134e:	4b08      	ldr	r3, [pc, #32]	@ (8001370 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001350:	695a      	ldr	r2, [r3, #20]
 8001352:	88fb      	ldrh	r3, [r7, #6]
 8001354:	4013      	ands	r3, r2
 8001356:	2b00      	cmp	r3, #0
 8001358:	d006      	beq.n	8001368 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800135a:	4a05      	ldr	r2, [pc, #20]	@ (8001370 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800135c:	88fb      	ldrh	r3, [r7, #6]
 800135e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001360:	88fb      	ldrh	r3, [r7, #6]
 8001362:	4618      	mov	r0, r3
 8001364:	f000 f806 	bl	8001374 <HAL_GPIO_EXTI_Callback>
  }
}
 8001368:	bf00      	nop
 800136a:	3708      	adds	r7, #8
 800136c:	46bd      	mov	sp, r7
 800136e:	bd80      	pop	{r7, pc}
 8001370:	40013c00 	.word	0x40013c00

08001374 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001374:	b480      	push	{r7}
 8001376:	b083      	sub	sp, #12
 8001378:	af00      	add	r7, sp, #0
 800137a:	4603      	mov	r3, r0
 800137c:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800137e:	bf00      	nop
 8001380:	370c      	adds	r7, #12
 8001382:	46bd      	mov	sp, r7
 8001384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001388:	4770      	bx	lr
	...

0800138c <HAL_PWR_EnterSTOPMode>:
  *            @arg PWR_STOPENTRY_WFE_NO_EVT_CLEAR : Enter STOP mode with WFE instruction and
  *                                                  no clear of pending event before.
  * @retval None
  */
void HAL_PWR_EnterSTOPMode(uint32_t Regulator, uint8_t STOPEntry)
{
 800138c:	b480      	push	{r7}
 800138e:	b083      	sub	sp, #12
 8001390:	af00      	add	r7, sp, #0
 8001392:	6078      	str	r0, [r7, #4]
 8001394:	460b      	mov	r3, r1
 8001396:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_STOP_ENTRY(STOPEntry));
  
  /* Select the regulator state in Stop mode: Set PDDS and LPDS bits according to PWR_Regulator value */
  MODIFY_REG(PWR->CR, (PWR_CR_PDDS | PWR_CR_LPDS), Regulator);
 8001398:	4b12      	ldr	r3, [pc, #72]	@ (80013e4 <HAL_PWR_EnterSTOPMode+0x58>)
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	f023 0203 	bic.w	r2, r3, #3
 80013a0:	4910      	ldr	r1, [pc, #64]	@ (80013e4 <HAL_PWR_EnterSTOPMode+0x58>)
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	4313      	orrs	r3, r2
 80013a6:	600b      	str	r3, [r1, #0]
  
  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 80013a8:	4b0f      	ldr	r3, [pc, #60]	@ (80013e8 <HAL_PWR_EnterSTOPMode+0x5c>)
 80013aa:	691b      	ldr	r3, [r3, #16]
 80013ac:	4a0e      	ldr	r2, [pc, #56]	@ (80013e8 <HAL_PWR_EnterSTOPMode+0x5c>)
 80013ae:	f043 0304 	orr.w	r3, r3, #4
 80013b2:	6113      	str	r3, [r2, #16]
  
  /* Select Stop mode entry --------------------------------------------------*/
  if(STOPEntry == PWR_STOPENTRY_WFI)
 80013b4:	78fb      	ldrb	r3, [r7, #3]
 80013b6:	2b01      	cmp	r3, #1
 80013b8:	d101      	bne.n	80013be <HAL_PWR_EnterSTOPMode+0x32>
  {   
    /* Request Wait For Interrupt */
    __WFI();
 80013ba:	bf30      	wfi
 80013bc:	e005      	b.n	80013ca <HAL_PWR_EnterSTOPMode+0x3e>
  }
  else
  {
    if(STOPEntry != PWR_STOPENTRY_WFE_NO_EVT_CLEAR)
 80013be:	78fb      	ldrb	r3, [r7, #3]
 80013c0:	2b03      	cmp	r3, #3
 80013c2:	d001      	beq.n	80013c8 <HAL_PWR_EnterSTOPMode+0x3c>
    {
      /* Clear all pending event */
      __SEV();
 80013c4:	bf40      	sev
      __WFE();
 80013c6:	bf20      	wfe
    }
    /* Request Wait For Event */
    __WFE();
 80013c8:	bf20      	wfe
  }
  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));  
 80013ca:	4b07      	ldr	r3, [pc, #28]	@ (80013e8 <HAL_PWR_EnterSTOPMode+0x5c>)
 80013cc:	691b      	ldr	r3, [r3, #16]
 80013ce:	4a06      	ldr	r2, [pc, #24]	@ (80013e8 <HAL_PWR_EnterSTOPMode+0x5c>)
 80013d0:	f023 0304 	bic.w	r3, r3, #4
 80013d4:	6113      	str	r3, [r2, #16]
}
 80013d6:	bf00      	nop
 80013d8:	370c      	adds	r7, #12
 80013da:	46bd      	mov	sp, r7
 80013dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e0:	4770      	bx	lr
 80013e2:	bf00      	nop
 80013e4:	40007000 	.word	0x40007000
 80013e8:	e000ed00 	.word	0xe000ed00

080013ec <HAL_PWR_EnableSleepOnExit>:
  *       Setting this bit is useful when the processor is expected to run only on
  *       interruptions handling.         
  * @retval None
  */
void HAL_PWR_EnableSleepOnExit(void)
{
 80013ec:	b480      	push	{r7}
 80013ee:	af00      	add	r7, sp, #0
  /* Set SLEEPONEXIT bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPONEXIT_Msk));
 80013f0:	4b05      	ldr	r3, [pc, #20]	@ (8001408 <HAL_PWR_EnableSleepOnExit+0x1c>)
 80013f2:	691b      	ldr	r3, [r3, #16]
 80013f4:	4a04      	ldr	r2, [pc, #16]	@ (8001408 <HAL_PWR_EnableSleepOnExit+0x1c>)
 80013f6:	f043 0302 	orr.w	r3, r3, #2
 80013fa:	6113      	str	r3, [r2, #16]
}
 80013fc:	bf00      	nop
 80013fe:	46bd      	mov	sp, r7
 8001400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001404:	4770      	bx	lr
 8001406:	bf00      	nop
 8001408:	e000ed00 	.word	0xe000ed00

0800140c <HAL_PWR_DisableSleepOnExit>:
  * @note Clears SLEEPONEXIT bit of SCR register. When this bit is set, the processor 
  *       re-enters SLEEP mode when an interruption handling is over.          
  * @retval None
  */
void HAL_PWR_DisableSleepOnExit(void)
{
 800140c:	b480      	push	{r7}
 800140e:	af00      	add	r7, sp, #0
  /* Clear SLEEPONEXIT bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPONEXIT_Msk));
 8001410:	4b05      	ldr	r3, [pc, #20]	@ (8001428 <HAL_PWR_DisableSleepOnExit+0x1c>)
 8001412:	691b      	ldr	r3, [r3, #16]
 8001414:	4a04      	ldr	r2, [pc, #16]	@ (8001428 <HAL_PWR_DisableSleepOnExit+0x1c>)
 8001416:	f023 0302 	bic.w	r3, r3, #2
 800141a:	6113      	str	r3, [r2, #16]
}
 800141c:	bf00      	nop
 800141e:	46bd      	mov	sp, r7
 8001420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001424:	4770      	bx	lr
 8001426:	bf00      	nop
 8001428:	e000ed00 	.word	0xe000ed00

0800142c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800142c:	b580      	push	{r7, lr}
 800142e:	b086      	sub	sp, #24
 8001430:	af00      	add	r7, sp, #0
 8001432:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	2b00      	cmp	r3, #0
 8001438:	d101      	bne.n	800143e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800143a:	2301      	movs	r3, #1
 800143c:	e267      	b.n	800190e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	f003 0301 	and.w	r3, r3, #1
 8001446:	2b00      	cmp	r3, #0
 8001448:	d075      	beq.n	8001536 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800144a:	4b88      	ldr	r3, [pc, #544]	@ (800166c <HAL_RCC_OscConfig+0x240>)
 800144c:	689b      	ldr	r3, [r3, #8]
 800144e:	f003 030c 	and.w	r3, r3, #12
 8001452:	2b04      	cmp	r3, #4
 8001454:	d00c      	beq.n	8001470 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001456:	4b85      	ldr	r3, [pc, #532]	@ (800166c <HAL_RCC_OscConfig+0x240>)
 8001458:	689b      	ldr	r3, [r3, #8]
 800145a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800145e:	2b08      	cmp	r3, #8
 8001460:	d112      	bne.n	8001488 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001462:	4b82      	ldr	r3, [pc, #520]	@ (800166c <HAL_RCC_OscConfig+0x240>)
 8001464:	685b      	ldr	r3, [r3, #4]
 8001466:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800146a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800146e:	d10b      	bne.n	8001488 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001470:	4b7e      	ldr	r3, [pc, #504]	@ (800166c <HAL_RCC_OscConfig+0x240>)
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001478:	2b00      	cmp	r3, #0
 800147a:	d05b      	beq.n	8001534 <HAL_RCC_OscConfig+0x108>
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	685b      	ldr	r3, [r3, #4]
 8001480:	2b00      	cmp	r3, #0
 8001482:	d157      	bne.n	8001534 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001484:	2301      	movs	r3, #1
 8001486:	e242      	b.n	800190e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	685b      	ldr	r3, [r3, #4]
 800148c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001490:	d106      	bne.n	80014a0 <HAL_RCC_OscConfig+0x74>
 8001492:	4b76      	ldr	r3, [pc, #472]	@ (800166c <HAL_RCC_OscConfig+0x240>)
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	4a75      	ldr	r2, [pc, #468]	@ (800166c <HAL_RCC_OscConfig+0x240>)
 8001498:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800149c:	6013      	str	r3, [r2, #0]
 800149e:	e01d      	b.n	80014dc <HAL_RCC_OscConfig+0xb0>
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	685b      	ldr	r3, [r3, #4]
 80014a4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80014a8:	d10c      	bne.n	80014c4 <HAL_RCC_OscConfig+0x98>
 80014aa:	4b70      	ldr	r3, [pc, #448]	@ (800166c <HAL_RCC_OscConfig+0x240>)
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	4a6f      	ldr	r2, [pc, #444]	@ (800166c <HAL_RCC_OscConfig+0x240>)
 80014b0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80014b4:	6013      	str	r3, [r2, #0]
 80014b6:	4b6d      	ldr	r3, [pc, #436]	@ (800166c <HAL_RCC_OscConfig+0x240>)
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	4a6c      	ldr	r2, [pc, #432]	@ (800166c <HAL_RCC_OscConfig+0x240>)
 80014bc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80014c0:	6013      	str	r3, [r2, #0]
 80014c2:	e00b      	b.n	80014dc <HAL_RCC_OscConfig+0xb0>
 80014c4:	4b69      	ldr	r3, [pc, #420]	@ (800166c <HAL_RCC_OscConfig+0x240>)
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	4a68      	ldr	r2, [pc, #416]	@ (800166c <HAL_RCC_OscConfig+0x240>)
 80014ca:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80014ce:	6013      	str	r3, [r2, #0]
 80014d0:	4b66      	ldr	r3, [pc, #408]	@ (800166c <HAL_RCC_OscConfig+0x240>)
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	4a65      	ldr	r2, [pc, #404]	@ (800166c <HAL_RCC_OscConfig+0x240>)
 80014d6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80014da:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	685b      	ldr	r3, [r3, #4]
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d013      	beq.n	800150c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014e4:	f7ff fc14 	bl	8000d10 <HAL_GetTick>
 80014e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80014ea:	e008      	b.n	80014fe <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80014ec:	f7ff fc10 	bl	8000d10 <HAL_GetTick>
 80014f0:	4602      	mov	r2, r0
 80014f2:	693b      	ldr	r3, [r7, #16]
 80014f4:	1ad3      	subs	r3, r2, r3
 80014f6:	2b64      	cmp	r3, #100	@ 0x64
 80014f8:	d901      	bls.n	80014fe <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80014fa:	2303      	movs	r3, #3
 80014fc:	e207      	b.n	800190e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80014fe:	4b5b      	ldr	r3, [pc, #364]	@ (800166c <HAL_RCC_OscConfig+0x240>)
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001506:	2b00      	cmp	r3, #0
 8001508:	d0f0      	beq.n	80014ec <HAL_RCC_OscConfig+0xc0>
 800150a:	e014      	b.n	8001536 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800150c:	f7ff fc00 	bl	8000d10 <HAL_GetTick>
 8001510:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001512:	e008      	b.n	8001526 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001514:	f7ff fbfc 	bl	8000d10 <HAL_GetTick>
 8001518:	4602      	mov	r2, r0
 800151a:	693b      	ldr	r3, [r7, #16]
 800151c:	1ad3      	subs	r3, r2, r3
 800151e:	2b64      	cmp	r3, #100	@ 0x64
 8001520:	d901      	bls.n	8001526 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001522:	2303      	movs	r3, #3
 8001524:	e1f3      	b.n	800190e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001526:	4b51      	ldr	r3, [pc, #324]	@ (800166c <HAL_RCC_OscConfig+0x240>)
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800152e:	2b00      	cmp	r3, #0
 8001530:	d1f0      	bne.n	8001514 <HAL_RCC_OscConfig+0xe8>
 8001532:	e000      	b.n	8001536 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001534:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	f003 0302 	and.w	r3, r3, #2
 800153e:	2b00      	cmp	r3, #0
 8001540:	d063      	beq.n	800160a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8001542:	4b4a      	ldr	r3, [pc, #296]	@ (800166c <HAL_RCC_OscConfig+0x240>)
 8001544:	689b      	ldr	r3, [r3, #8]
 8001546:	f003 030c 	and.w	r3, r3, #12
 800154a:	2b00      	cmp	r3, #0
 800154c:	d00b      	beq.n	8001566 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800154e:	4b47      	ldr	r3, [pc, #284]	@ (800166c <HAL_RCC_OscConfig+0x240>)
 8001550:	689b      	ldr	r3, [r3, #8]
 8001552:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8001556:	2b08      	cmp	r3, #8
 8001558:	d11c      	bne.n	8001594 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800155a:	4b44      	ldr	r3, [pc, #272]	@ (800166c <HAL_RCC_OscConfig+0x240>)
 800155c:	685b      	ldr	r3, [r3, #4]
 800155e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001562:	2b00      	cmp	r3, #0
 8001564:	d116      	bne.n	8001594 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001566:	4b41      	ldr	r3, [pc, #260]	@ (800166c <HAL_RCC_OscConfig+0x240>)
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	f003 0302 	and.w	r3, r3, #2
 800156e:	2b00      	cmp	r3, #0
 8001570:	d005      	beq.n	800157e <HAL_RCC_OscConfig+0x152>
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	68db      	ldr	r3, [r3, #12]
 8001576:	2b01      	cmp	r3, #1
 8001578:	d001      	beq.n	800157e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800157a:	2301      	movs	r3, #1
 800157c:	e1c7      	b.n	800190e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800157e:	4b3b      	ldr	r3, [pc, #236]	@ (800166c <HAL_RCC_OscConfig+0x240>)
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	691b      	ldr	r3, [r3, #16]
 800158a:	00db      	lsls	r3, r3, #3
 800158c:	4937      	ldr	r1, [pc, #220]	@ (800166c <HAL_RCC_OscConfig+0x240>)
 800158e:	4313      	orrs	r3, r2
 8001590:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001592:	e03a      	b.n	800160a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	68db      	ldr	r3, [r3, #12]
 8001598:	2b00      	cmp	r3, #0
 800159a:	d020      	beq.n	80015de <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800159c:	4b34      	ldr	r3, [pc, #208]	@ (8001670 <HAL_RCC_OscConfig+0x244>)
 800159e:	2201      	movs	r2, #1
 80015a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015a2:	f7ff fbb5 	bl	8000d10 <HAL_GetTick>
 80015a6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80015a8:	e008      	b.n	80015bc <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80015aa:	f7ff fbb1 	bl	8000d10 <HAL_GetTick>
 80015ae:	4602      	mov	r2, r0
 80015b0:	693b      	ldr	r3, [r7, #16]
 80015b2:	1ad3      	subs	r3, r2, r3
 80015b4:	2b02      	cmp	r3, #2
 80015b6:	d901      	bls.n	80015bc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80015b8:	2303      	movs	r3, #3
 80015ba:	e1a8      	b.n	800190e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80015bc:	4b2b      	ldr	r3, [pc, #172]	@ (800166c <HAL_RCC_OscConfig+0x240>)
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	f003 0302 	and.w	r3, r3, #2
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d0f0      	beq.n	80015aa <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80015c8:	4b28      	ldr	r3, [pc, #160]	@ (800166c <HAL_RCC_OscConfig+0x240>)
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	691b      	ldr	r3, [r3, #16]
 80015d4:	00db      	lsls	r3, r3, #3
 80015d6:	4925      	ldr	r1, [pc, #148]	@ (800166c <HAL_RCC_OscConfig+0x240>)
 80015d8:	4313      	orrs	r3, r2
 80015da:	600b      	str	r3, [r1, #0]
 80015dc:	e015      	b.n	800160a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80015de:	4b24      	ldr	r3, [pc, #144]	@ (8001670 <HAL_RCC_OscConfig+0x244>)
 80015e0:	2200      	movs	r2, #0
 80015e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015e4:	f7ff fb94 	bl	8000d10 <HAL_GetTick>
 80015e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80015ea:	e008      	b.n	80015fe <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80015ec:	f7ff fb90 	bl	8000d10 <HAL_GetTick>
 80015f0:	4602      	mov	r2, r0
 80015f2:	693b      	ldr	r3, [r7, #16]
 80015f4:	1ad3      	subs	r3, r2, r3
 80015f6:	2b02      	cmp	r3, #2
 80015f8:	d901      	bls.n	80015fe <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80015fa:	2303      	movs	r3, #3
 80015fc:	e187      	b.n	800190e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80015fe:	4b1b      	ldr	r3, [pc, #108]	@ (800166c <HAL_RCC_OscConfig+0x240>)
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	f003 0302 	and.w	r3, r3, #2
 8001606:	2b00      	cmp	r3, #0
 8001608:	d1f0      	bne.n	80015ec <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	f003 0308 	and.w	r3, r3, #8
 8001612:	2b00      	cmp	r3, #0
 8001614:	d036      	beq.n	8001684 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	695b      	ldr	r3, [r3, #20]
 800161a:	2b00      	cmp	r3, #0
 800161c:	d016      	beq.n	800164c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800161e:	4b15      	ldr	r3, [pc, #84]	@ (8001674 <HAL_RCC_OscConfig+0x248>)
 8001620:	2201      	movs	r2, #1
 8001622:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001624:	f7ff fb74 	bl	8000d10 <HAL_GetTick>
 8001628:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800162a:	e008      	b.n	800163e <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800162c:	f7ff fb70 	bl	8000d10 <HAL_GetTick>
 8001630:	4602      	mov	r2, r0
 8001632:	693b      	ldr	r3, [r7, #16]
 8001634:	1ad3      	subs	r3, r2, r3
 8001636:	2b02      	cmp	r3, #2
 8001638:	d901      	bls.n	800163e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800163a:	2303      	movs	r3, #3
 800163c:	e167      	b.n	800190e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800163e:	4b0b      	ldr	r3, [pc, #44]	@ (800166c <HAL_RCC_OscConfig+0x240>)
 8001640:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001642:	f003 0302 	and.w	r3, r3, #2
 8001646:	2b00      	cmp	r3, #0
 8001648:	d0f0      	beq.n	800162c <HAL_RCC_OscConfig+0x200>
 800164a:	e01b      	b.n	8001684 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800164c:	4b09      	ldr	r3, [pc, #36]	@ (8001674 <HAL_RCC_OscConfig+0x248>)
 800164e:	2200      	movs	r2, #0
 8001650:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001652:	f7ff fb5d 	bl	8000d10 <HAL_GetTick>
 8001656:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001658:	e00e      	b.n	8001678 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800165a:	f7ff fb59 	bl	8000d10 <HAL_GetTick>
 800165e:	4602      	mov	r2, r0
 8001660:	693b      	ldr	r3, [r7, #16]
 8001662:	1ad3      	subs	r3, r2, r3
 8001664:	2b02      	cmp	r3, #2
 8001666:	d907      	bls.n	8001678 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001668:	2303      	movs	r3, #3
 800166a:	e150      	b.n	800190e <HAL_RCC_OscConfig+0x4e2>
 800166c:	40023800 	.word	0x40023800
 8001670:	42470000 	.word	0x42470000
 8001674:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001678:	4b88      	ldr	r3, [pc, #544]	@ (800189c <HAL_RCC_OscConfig+0x470>)
 800167a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800167c:	f003 0302 	and.w	r3, r3, #2
 8001680:	2b00      	cmp	r3, #0
 8001682:	d1ea      	bne.n	800165a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	f003 0304 	and.w	r3, r3, #4
 800168c:	2b00      	cmp	r3, #0
 800168e:	f000 8097 	beq.w	80017c0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001692:	2300      	movs	r3, #0
 8001694:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001696:	4b81      	ldr	r3, [pc, #516]	@ (800189c <HAL_RCC_OscConfig+0x470>)
 8001698:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800169a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d10f      	bne.n	80016c2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80016a2:	2300      	movs	r3, #0
 80016a4:	60bb      	str	r3, [r7, #8]
 80016a6:	4b7d      	ldr	r3, [pc, #500]	@ (800189c <HAL_RCC_OscConfig+0x470>)
 80016a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016aa:	4a7c      	ldr	r2, [pc, #496]	@ (800189c <HAL_RCC_OscConfig+0x470>)
 80016ac:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80016b0:	6413      	str	r3, [r2, #64]	@ 0x40
 80016b2:	4b7a      	ldr	r3, [pc, #488]	@ (800189c <HAL_RCC_OscConfig+0x470>)
 80016b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016b6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80016ba:	60bb      	str	r3, [r7, #8]
 80016bc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80016be:	2301      	movs	r3, #1
 80016c0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80016c2:	4b77      	ldr	r3, [pc, #476]	@ (80018a0 <HAL_RCC_OscConfig+0x474>)
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d118      	bne.n	8001700 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80016ce:	4b74      	ldr	r3, [pc, #464]	@ (80018a0 <HAL_RCC_OscConfig+0x474>)
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	4a73      	ldr	r2, [pc, #460]	@ (80018a0 <HAL_RCC_OscConfig+0x474>)
 80016d4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80016d8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80016da:	f7ff fb19 	bl	8000d10 <HAL_GetTick>
 80016de:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80016e0:	e008      	b.n	80016f4 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80016e2:	f7ff fb15 	bl	8000d10 <HAL_GetTick>
 80016e6:	4602      	mov	r2, r0
 80016e8:	693b      	ldr	r3, [r7, #16]
 80016ea:	1ad3      	subs	r3, r2, r3
 80016ec:	2b02      	cmp	r3, #2
 80016ee:	d901      	bls.n	80016f4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80016f0:	2303      	movs	r3, #3
 80016f2:	e10c      	b.n	800190e <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80016f4:	4b6a      	ldr	r3, [pc, #424]	@ (80018a0 <HAL_RCC_OscConfig+0x474>)
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d0f0      	beq.n	80016e2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	689b      	ldr	r3, [r3, #8]
 8001704:	2b01      	cmp	r3, #1
 8001706:	d106      	bne.n	8001716 <HAL_RCC_OscConfig+0x2ea>
 8001708:	4b64      	ldr	r3, [pc, #400]	@ (800189c <HAL_RCC_OscConfig+0x470>)
 800170a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800170c:	4a63      	ldr	r2, [pc, #396]	@ (800189c <HAL_RCC_OscConfig+0x470>)
 800170e:	f043 0301 	orr.w	r3, r3, #1
 8001712:	6713      	str	r3, [r2, #112]	@ 0x70
 8001714:	e01c      	b.n	8001750 <HAL_RCC_OscConfig+0x324>
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	689b      	ldr	r3, [r3, #8]
 800171a:	2b05      	cmp	r3, #5
 800171c:	d10c      	bne.n	8001738 <HAL_RCC_OscConfig+0x30c>
 800171e:	4b5f      	ldr	r3, [pc, #380]	@ (800189c <HAL_RCC_OscConfig+0x470>)
 8001720:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001722:	4a5e      	ldr	r2, [pc, #376]	@ (800189c <HAL_RCC_OscConfig+0x470>)
 8001724:	f043 0304 	orr.w	r3, r3, #4
 8001728:	6713      	str	r3, [r2, #112]	@ 0x70
 800172a:	4b5c      	ldr	r3, [pc, #368]	@ (800189c <HAL_RCC_OscConfig+0x470>)
 800172c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800172e:	4a5b      	ldr	r2, [pc, #364]	@ (800189c <HAL_RCC_OscConfig+0x470>)
 8001730:	f043 0301 	orr.w	r3, r3, #1
 8001734:	6713      	str	r3, [r2, #112]	@ 0x70
 8001736:	e00b      	b.n	8001750 <HAL_RCC_OscConfig+0x324>
 8001738:	4b58      	ldr	r3, [pc, #352]	@ (800189c <HAL_RCC_OscConfig+0x470>)
 800173a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800173c:	4a57      	ldr	r2, [pc, #348]	@ (800189c <HAL_RCC_OscConfig+0x470>)
 800173e:	f023 0301 	bic.w	r3, r3, #1
 8001742:	6713      	str	r3, [r2, #112]	@ 0x70
 8001744:	4b55      	ldr	r3, [pc, #340]	@ (800189c <HAL_RCC_OscConfig+0x470>)
 8001746:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001748:	4a54      	ldr	r2, [pc, #336]	@ (800189c <HAL_RCC_OscConfig+0x470>)
 800174a:	f023 0304 	bic.w	r3, r3, #4
 800174e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	689b      	ldr	r3, [r3, #8]
 8001754:	2b00      	cmp	r3, #0
 8001756:	d015      	beq.n	8001784 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001758:	f7ff fada 	bl	8000d10 <HAL_GetTick>
 800175c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800175e:	e00a      	b.n	8001776 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001760:	f7ff fad6 	bl	8000d10 <HAL_GetTick>
 8001764:	4602      	mov	r2, r0
 8001766:	693b      	ldr	r3, [r7, #16]
 8001768:	1ad3      	subs	r3, r2, r3
 800176a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800176e:	4293      	cmp	r3, r2
 8001770:	d901      	bls.n	8001776 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001772:	2303      	movs	r3, #3
 8001774:	e0cb      	b.n	800190e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001776:	4b49      	ldr	r3, [pc, #292]	@ (800189c <HAL_RCC_OscConfig+0x470>)
 8001778:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800177a:	f003 0302 	and.w	r3, r3, #2
 800177e:	2b00      	cmp	r3, #0
 8001780:	d0ee      	beq.n	8001760 <HAL_RCC_OscConfig+0x334>
 8001782:	e014      	b.n	80017ae <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001784:	f7ff fac4 	bl	8000d10 <HAL_GetTick>
 8001788:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800178a:	e00a      	b.n	80017a2 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800178c:	f7ff fac0 	bl	8000d10 <HAL_GetTick>
 8001790:	4602      	mov	r2, r0
 8001792:	693b      	ldr	r3, [r7, #16]
 8001794:	1ad3      	subs	r3, r2, r3
 8001796:	f241 3288 	movw	r2, #5000	@ 0x1388
 800179a:	4293      	cmp	r3, r2
 800179c:	d901      	bls.n	80017a2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800179e:	2303      	movs	r3, #3
 80017a0:	e0b5      	b.n	800190e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80017a2:	4b3e      	ldr	r3, [pc, #248]	@ (800189c <HAL_RCC_OscConfig+0x470>)
 80017a4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80017a6:	f003 0302 	and.w	r3, r3, #2
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d1ee      	bne.n	800178c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80017ae:	7dfb      	ldrb	r3, [r7, #23]
 80017b0:	2b01      	cmp	r3, #1
 80017b2:	d105      	bne.n	80017c0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80017b4:	4b39      	ldr	r3, [pc, #228]	@ (800189c <HAL_RCC_OscConfig+0x470>)
 80017b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017b8:	4a38      	ldr	r2, [pc, #224]	@ (800189c <HAL_RCC_OscConfig+0x470>)
 80017ba:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80017be:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	699b      	ldr	r3, [r3, #24]
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	f000 80a1 	beq.w	800190c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80017ca:	4b34      	ldr	r3, [pc, #208]	@ (800189c <HAL_RCC_OscConfig+0x470>)
 80017cc:	689b      	ldr	r3, [r3, #8]
 80017ce:	f003 030c 	and.w	r3, r3, #12
 80017d2:	2b08      	cmp	r3, #8
 80017d4:	d05c      	beq.n	8001890 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	699b      	ldr	r3, [r3, #24]
 80017da:	2b02      	cmp	r3, #2
 80017dc:	d141      	bne.n	8001862 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80017de:	4b31      	ldr	r3, [pc, #196]	@ (80018a4 <HAL_RCC_OscConfig+0x478>)
 80017e0:	2200      	movs	r2, #0
 80017e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017e4:	f7ff fa94 	bl	8000d10 <HAL_GetTick>
 80017e8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80017ea:	e008      	b.n	80017fe <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80017ec:	f7ff fa90 	bl	8000d10 <HAL_GetTick>
 80017f0:	4602      	mov	r2, r0
 80017f2:	693b      	ldr	r3, [r7, #16]
 80017f4:	1ad3      	subs	r3, r2, r3
 80017f6:	2b02      	cmp	r3, #2
 80017f8:	d901      	bls.n	80017fe <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80017fa:	2303      	movs	r3, #3
 80017fc:	e087      	b.n	800190e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80017fe:	4b27      	ldr	r3, [pc, #156]	@ (800189c <HAL_RCC_OscConfig+0x470>)
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001806:	2b00      	cmp	r3, #0
 8001808:	d1f0      	bne.n	80017ec <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	69da      	ldr	r2, [r3, #28]
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	6a1b      	ldr	r3, [r3, #32]
 8001812:	431a      	orrs	r2, r3
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001818:	019b      	lsls	r3, r3, #6
 800181a:	431a      	orrs	r2, r3
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001820:	085b      	lsrs	r3, r3, #1
 8001822:	3b01      	subs	r3, #1
 8001824:	041b      	lsls	r3, r3, #16
 8001826:	431a      	orrs	r2, r3
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800182c:	061b      	lsls	r3, r3, #24
 800182e:	491b      	ldr	r1, [pc, #108]	@ (800189c <HAL_RCC_OscConfig+0x470>)
 8001830:	4313      	orrs	r3, r2
 8001832:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001834:	4b1b      	ldr	r3, [pc, #108]	@ (80018a4 <HAL_RCC_OscConfig+0x478>)
 8001836:	2201      	movs	r2, #1
 8001838:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800183a:	f7ff fa69 	bl	8000d10 <HAL_GetTick>
 800183e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001840:	e008      	b.n	8001854 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001842:	f7ff fa65 	bl	8000d10 <HAL_GetTick>
 8001846:	4602      	mov	r2, r0
 8001848:	693b      	ldr	r3, [r7, #16]
 800184a:	1ad3      	subs	r3, r2, r3
 800184c:	2b02      	cmp	r3, #2
 800184e:	d901      	bls.n	8001854 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001850:	2303      	movs	r3, #3
 8001852:	e05c      	b.n	800190e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001854:	4b11      	ldr	r3, [pc, #68]	@ (800189c <HAL_RCC_OscConfig+0x470>)
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800185c:	2b00      	cmp	r3, #0
 800185e:	d0f0      	beq.n	8001842 <HAL_RCC_OscConfig+0x416>
 8001860:	e054      	b.n	800190c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001862:	4b10      	ldr	r3, [pc, #64]	@ (80018a4 <HAL_RCC_OscConfig+0x478>)
 8001864:	2200      	movs	r2, #0
 8001866:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001868:	f7ff fa52 	bl	8000d10 <HAL_GetTick>
 800186c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800186e:	e008      	b.n	8001882 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001870:	f7ff fa4e 	bl	8000d10 <HAL_GetTick>
 8001874:	4602      	mov	r2, r0
 8001876:	693b      	ldr	r3, [r7, #16]
 8001878:	1ad3      	subs	r3, r2, r3
 800187a:	2b02      	cmp	r3, #2
 800187c:	d901      	bls.n	8001882 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800187e:	2303      	movs	r3, #3
 8001880:	e045      	b.n	800190e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001882:	4b06      	ldr	r3, [pc, #24]	@ (800189c <HAL_RCC_OscConfig+0x470>)
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800188a:	2b00      	cmp	r3, #0
 800188c:	d1f0      	bne.n	8001870 <HAL_RCC_OscConfig+0x444>
 800188e:	e03d      	b.n	800190c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	699b      	ldr	r3, [r3, #24]
 8001894:	2b01      	cmp	r3, #1
 8001896:	d107      	bne.n	80018a8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001898:	2301      	movs	r3, #1
 800189a:	e038      	b.n	800190e <HAL_RCC_OscConfig+0x4e2>
 800189c:	40023800 	.word	0x40023800
 80018a0:	40007000 	.word	0x40007000
 80018a4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80018a8:	4b1b      	ldr	r3, [pc, #108]	@ (8001918 <HAL_RCC_OscConfig+0x4ec>)
 80018aa:	685b      	ldr	r3, [r3, #4]
 80018ac:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	699b      	ldr	r3, [r3, #24]
 80018b2:	2b01      	cmp	r3, #1
 80018b4:	d028      	beq.n	8001908 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80018b6:	68fb      	ldr	r3, [r7, #12]
 80018b8:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80018c0:	429a      	cmp	r2, r3
 80018c2:	d121      	bne.n	8001908 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80018c4:	68fb      	ldr	r3, [r7, #12]
 80018c6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80018ce:	429a      	cmp	r2, r3
 80018d0:	d11a      	bne.n	8001908 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80018d2:	68fa      	ldr	r2, [r7, #12]
 80018d4:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80018d8:	4013      	ands	r3, r2
 80018da:	687a      	ldr	r2, [r7, #4]
 80018dc:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80018de:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80018e0:	4293      	cmp	r3, r2
 80018e2:	d111      	bne.n	8001908 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80018e4:	68fb      	ldr	r3, [r7, #12]
 80018e6:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80018ee:	085b      	lsrs	r3, r3, #1
 80018f0:	3b01      	subs	r3, #1
 80018f2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80018f4:	429a      	cmp	r2, r3
 80018f6:	d107      	bne.n	8001908 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80018f8:	68fb      	ldr	r3, [r7, #12]
 80018fa:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001902:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001904:	429a      	cmp	r2, r3
 8001906:	d001      	beq.n	800190c <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8001908:	2301      	movs	r3, #1
 800190a:	e000      	b.n	800190e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800190c:	2300      	movs	r3, #0
}
 800190e:	4618      	mov	r0, r3
 8001910:	3718      	adds	r7, #24
 8001912:	46bd      	mov	sp, r7
 8001914:	bd80      	pop	{r7, pc}
 8001916:	bf00      	nop
 8001918:	40023800 	.word	0x40023800

0800191c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800191c:	b580      	push	{r7, lr}
 800191e:	b084      	sub	sp, #16
 8001920:	af00      	add	r7, sp, #0
 8001922:	6078      	str	r0, [r7, #4]
 8001924:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	2b00      	cmp	r3, #0
 800192a:	d101      	bne.n	8001930 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800192c:	2301      	movs	r3, #1
 800192e:	e0cc      	b.n	8001aca <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001930:	4b68      	ldr	r3, [pc, #416]	@ (8001ad4 <HAL_RCC_ClockConfig+0x1b8>)
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	f003 0307 	and.w	r3, r3, #7
 8001938:	683a      	ldr	r2, [r7, #0]
 800193a:	429a      	cmp	r2, r3
 800193c:	d90c      	bls.n	8001958 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800193e:	4b65      	ldr	r3, [pc, #404]	@ (8001ad4 <HAL_RCC_ClockConfig+0x1b8>)
 8001940:	683a      	ldr	r2, [r7, #0]
 8001942:	b2d2      	uxtb	r2, r2
 8001944:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001946:	4b63      	ldr	r3, [pc, #396]	@ (8001ad4 <HAL_RCC_ClockConfig+0x1b8>)
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	f003 0307 	and.w	r3, r3, #7
 800194e:	683a      	ldr	r2, [r7, #0]
 8001950:	429a      	cmp	r2, r3
 8001952:	d001      	beq.n	8001958 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001954:	2301      	movs	r3, #1
 8001956:	e0b8      	b.n	8001aca <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	f003 0302 	and.w	r3, r3, #2
 8001960:	2b00      	cmp	r3, #0
 8001962:	d020      	beq.n	80019a6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	f003 0304 	and.w	r3, r3, #4
 800196c:	2b00      	cmp	r3, #0
 800196e:	d005      	beq.n	800197c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001970:	4b59      	ldr	r3, [pc, #356]	@ (8001ad8 <HAL_RCC_ClockConfig+0x1bc>)
 8001972:	689b      	ldr	r3, [r3, #8]
 8001974:	4a58      	ldr	r2, [pc, #352]	@ (8001ad8 <HAL_RCC_ClockConfig+0x1bc>)
 8001976:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800197a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	f003 0308 	and.w	r3, r3, #8
 8001984:	2b00      	cmp	r3, #0
 8001986:	d005      	beq.n	8001994 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001988:	4b53      	ldr	r3, [pc, #332]	@ (8001ad8 <HAL_RCC_ClockConfig+0x1bc>)
 800198a:	689b      	ldr	r3, [r3, #8]
 800198c:	4a52      	ldr	r2, [pc, #328]	@ (8001ad8 <HAL_RCC_ClockConfig+0x1bc>)
 800198e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8001992:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001994:	4b50      	ldr	r3, [pc, #320]	@ (8001ad8 <HAL_RCC_ClockConfig+0x1bc>)
 8001996:	689b      	ldr	r3, [r3, #8]
 8001998:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	689b      	ldr	r3, [r3, #8]
 80019a0:	494d      	ldr	r1, [pc, #308]	@ (8001ad8 <HAL_RCC_ClockConfig+0x1bc>)
 80019a2:	4313      	orrs	r3, r2
 80019a4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	f003 0301 	and.w	r3, r3, #1
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d044      	beq.n	8001a3c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	685b      	ldr	r3, [r3, #4]
 80019b6:	2b01      	cmp	r3, #1
 80019b8:	d107      	bne.n	80019ca <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80019ba:	4b47      	ldr	r3, [pc, #284]	@ (8001ad8 <HAL_RCC_ClockConfig+0x1bc>)
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d119      	bne.n	80019fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80019c6:	2301      	movs	r3, #1
 80019c8:	e07f      	b.n	8001aca <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	685b      	ldr	r3, [r3, #4]
 80019ce:	2b02      	cmp	r3, #2
 80019d0:	d003      	beq.n	80019da <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80019d6:	2b03      	cmp	r3, #3
 80019d8:	d107      	bne.n	80019ea <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80019da:	4b3f      	ldr	r3, [pc, #252]	@ (8001ad8 <HAL_RCC_ClockConfig+0x1bc>)
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d109      	bne.n	80019fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80019e6:	2301      	movs	r3, #1
 80019e8:	e06f      	b.n	8001aca <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80019ea:	4b3b      	ldr	r3, [pc, #236]	@ (8001ad8 <HAL_RCC_ClockConfig+0x1bc>)
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	f003 0302 	and.w	r3, r3, #2
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d101      	bne.n	80019fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80019f6:	2301      	movs	r3, #1
 80019f8:	e067      	b.n	8001aca <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80019fa:	4b37      	ldr	r3, [pc, #220]	@ (8001ad8 <HAL_RCC_ClockConfig+0x1bc>)
 80019fc:	689b      	ldr	r3, [r3, #8]
 80019fe:	f023 0203 	bic.w	r2, r3, #3
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	685b      	ldr	r3, [r3, #4]
 8001a06:	4934      	ldr	r1, [pc, #208]	@ (8001ad8 <HAL_RCC_ClockConfig+0x1bc>)
 8001a08:	4313      	orrs	r3, r2
 8001a0a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001a0c:	f7ff f980 	bl	8000d10 <HAL_GetTick>
 8001a10:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a12:	e00a      	b.n	8001a2a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a14:	f7ff f97c 	bl	8000d10 <HAL_GetTick>
 8001a18:	4602      	mov	r2, r0
 8001a1a:	68fb      	ldr	r3, [r7, #12]
 8001a1c:	1ad3      	subs	r3, r2, r3
 8001a1e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001a22:	4293      	cmp	r3, r2
 8001a24:	d901      	bls.n	8001a2a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001a26:	2303      	movs	r3, #3
 8001a28:	e04f      	b.n	8001aca <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a2a:	4b2b      	ldr	r3, [pc, #172]	@ (8001ad8 <HAL_RCC_ClockConfig+0x1bc>)
 8001a2c:	689b      	ldr	r3, [r3, #8]
 8001a2e:	f003 020c 	and.w	r2, r3, #12
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	685b      	ldr	r3, [r3, #4]
 8001a36:	009b      	lsls	r3, r3, #2
 8001a38:	429a      	cmp	r2, r3
 8001a3a:	d1eb      	bne.n	8001a14 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001a3c:	4b25      	ldr	r3, [pc, #148]	@ (8001ad4 <HAL_RCC_ClockConfig+0x1b8>)
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	f003 0307 	and.w	r3, r3, #7
 8001a44:	683a      	ldr	r2, [r7, #0]
 8001a46:	429a      	cmp	r2, r3
 8001a48:	d20c      	bcs.n	8001a64 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a4a:	4b22      	ldr	r3, [pc, #136]	@ (8001ad4 <HAL_RCC_ClockConfig+0x1b8>)
 8001a4c:	683a      	ldr	r2, [r7, #0]
 8001a4e:	b2d2      	uxtb	r2, r2
 8001a50:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a52:	4b20      	ldr	r3, [pc, #128]	@ (8001ad4 <HAL_RCC_ClockConfig+0x1b8>)
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	f003 0307 	and.w	r3, r3, #7
 8001a5a:	683a      	ldr	r2, [r7, #0]
 8001a5c:	429a      	cmp	r2, r3
 8001a5e:	d001      	beq.n	8001a64 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001a60:	2301      	movs	r3, #1
 8001a62:	e032      	b.n	8001aca <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	f003 0304 	and.w	r3, r3, #4
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d008      	beq.n	8001a82 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001a70:	4b19      	ldr	r3, [pc, #100]	@ (8001ad8 <HAL_RCC_ClockConfig+0x1bc>)
 8001a72:	689b      	ldr	r3, [r3, #8]
 8001a74:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	68db      	ldr	r3, [r3, #12]
 8001a7c:	4916      	ldr	r1, [pc, #88]	@ (8001ad8 <HAL_RCC_ClockConfig+0x1bc>)
 8001a7e:	4313      	orrs	r3, r2
 8001a80:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	f003 0308 	and.w	r3, r3, #8
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d009      	beq.n	8001aa2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001a8e:	4b12      	ldr	r3, [pc, #72]	@ (8001ad8 <HAL_RCC_ClockConfig+0x1bc>)
 8001a90:	689b      	ldr	r3, [r3, #8]
 8001a92:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	691b      	ldr	r3, [r3, #16]
 8001a9a:	00db      	lsls	r3, r3, #3
 8001a9c:	490e      	ldr	r1, [pc, #56]	@ (8001ad8 <HAL_RCC_ClockConfig+0x1bc>)
 8001a9e:	4313      	orrs	r3, r2
 8001aa0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001aa2:	f000 f821 	bl	8001ae8 <HAL_RCC_GetSysClockFreq>
 8001aa6:	4602      	mov	r2, r0
 8001aa8:	4b0b      	ldr	r3, [pc, #44]	@ (8001ad8 <HAL_RCC_ClockConfig+0x1bc>)
 8001aaa:	689b      	ldr	r3, [r3, #8]
 8001aac:	091b      	lsrs	r3, r3, #4
 8001aae:	f003 030f 	and.w	r3, r3, #15
 8001ab2:	490a      	ldr	r1, [pc, #40]	@ (8001adc <HAL_RCC_ClockConfig+0x1c0>)
 8001ab4:	5ccb      	ldrb	r3, [r1, r3]
 8001ab6:	fa22 f303 	lsr.w	r3, r2, r3
 8001aba:	4a09      	ldr	r2, [pc, #36]	@ (8001ae0 <HAL_RCC_ClockConfig+0x1c4>)
 8001abc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8001abe:	4b09      	ldr	r3, [pc, #36]	@ (8001ae4 <HAL_RCC_ClockConfig+0x1c8>)
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	4618      	mov	r0, r3
 8001ac4:	f7ff f8e0 	bl	8000c88 <HAL_InitTick>

  return HAL_OK;
 8001ac8:	2300      	movs	r3, #0
}
 8001aca:	4618      	mov	r0, r3
 8001acc:	3710      	adds	r7, #16
 8001ace:	46bd      	mov	sp, r7
 8001ad0:	bd80      	pop	{r7, pc}
 8001ad2:	bf00      	nop
 8001ad4:	40023c00 	.word	0x40023c00
 8001ad8:	40023800 	.word	0x40023800
 8001adc:	0800383c 	.word	0x0800383c
 8001ae0:	20000000 	.word	0x20000000
 8001ae4:	20000004 	.word	0x20000004

08001ae8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001ae8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001aec:	b094      	sub	sp, #80	@ 0x50
 8001aee:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001af0:	2300      	movs	r3, #0
 8001af2:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8001af4:	2300      	movs	r3, #0
 8001af6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8001af8:	2300      	movs	r3, #0
 8001afa:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8001afc:	2300      	movs	r3, #0
 8001afe:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001b00:	4b79      	ldr	r3, [pc, #484]	@ (8001ce8 <HAL_RCC_GetSysClockFreq+0x200>)
 8001b02:	689b      	ldr	r3, [r3, #8]
 8001b04:	f003 030c 	and.w	r3, r3, #12
 8001b08:	2b08      	cmp	r3, #8
 8001b0a:	d00d      	beq.n	8001b28 <HAL_RCC_GetSysClockFreq+0x40>
 8001b0c:	2b08      	cmp	r3, #8
 8001b0e:	f200 80e1 	bhi.w	8001cd4 <HAL_RCC_GetSysClockFreq+0x1ec>
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d002      	beq.n	8001b1c <HAL_RCC_GetSysClockFreq+0x34>
 8001b16:	2b04      	cmp	r3, #4
 8001b18:	d003      	beq.n	8001b22 <HAL_RCC_GetSysClockFreq+0x3a>
 8001b1a:	e0db      	b.n	8001cd4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001b1c:	4b73      	ldr	r3, [pc, #460]	@ (8001cec <HAL_RCC_GetSysClockFreq+0x204>)
 8001b1e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001b20:	e0db      	b.n	8001cda <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001b22:	4b73      	ldr	r3, [pc, #460]	@ (8001cf0 <HAL_RCC_GetSysClockFreq+0x208>)
 8001b24:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001b26:	e0d8      	b.n	8001cda <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001b28:	4b6f      	ldr	r3, [pc, #444]	@ (8001ce8 <HAL_RCC_GetSysClockFreq+0x200>)
 8001b2a:	685b      	ldr	r3, [r3, #4]
 8001b2c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001b30:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001b32:	4b6d      	ldr	r3, [pc, #436]	@ (8001ce8 <HAL_RCC_GetSysClockFreq+0x200>)
 8001b34:	685b      	ldr	r3, [r3, #4]
 8001b36:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d063      	beq.n	8001c06 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001b3e:	4b6a      	ldr	r3, [pc, #424]	@ (8001ce8 <HAL_RCC_GetSysClockFreq+0x200>)
 8001b40:	685b      	ldr	r3, [r3, #4]
 8001b42:	099b      	lsrs	r3, r3, #6
 8001b44:	2200      	movs	r2, #0
 8001b46:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001b48:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8001b4a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001b4c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001b50:	633b      	str	r3, [r7, #48]	@ 0x30
 8001b52:	2300      	movs	r3, #0
 8001b54:	637b      	str	r3, [r7, #52]	@ 0x34
 8001b56:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8001b5a:	4622      	mov	r2, r4
 8001b5c:	462b      	mov	r3, r5
 8001b5e:	f04f 0000 	mov.w	r0, #0
 8001b62:	f04f 0100 	mov.w	r1, #0
 8001b66:	0159      	lsls	r1, r3, #5
 8001b68:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001b6c:	0150      	lsls	r0, r2, #5
 8001b6e:	4602      	mov	r2, r0
 8001b70:	460b      	mov	r3, r1
 8001b72:	4621      	mov	r1, r4
 8001b74:	1a51      	subs	r1, r2, r1
 8001b76:	6139      	str	r1, [r7, #16]
 8001b78:	4629      	mov	r1, r5
 8001b7a:	eb63 0301 	sbc.w	r3, r3, r1
 8001b7e:	617b      	str	r3, [r7, #20]
 8001b80:	f04f 0200 	mov.w	r2, #0
 8001b84:	f04f 0300 	mov.w	r3, #0
 8001b88:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001b8c:	4659      	mov	r1, fp
 8001b8e:	018b      	lsls	r3, r1, #6
 8001b90:	4651      	mov	r1, sl
 8001b92:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001b96:	4651      	mov	r1, sl
 8001b98:	018a      	lsls	r2, r1, #6
 8001b9a:	4651      	mov	r1, sl
 8001b9c:	ebb2 0801 	subs.w	r8, r2, r1
 8001ba0:	4659      	mov	r1, fp
 8001ba2:	eb63 0901 	sbc.w	r9, r3, r1
 8001ba6:	f04f 0200 	mov.w	r2, #0
 8001baa:	f04f 0300 	mov.w	r3, #0
 8001bae:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001bb2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001bb6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001bba:	4690      	mov	r8, r2
 8001bbc:	4699      	mov	r9, r3
 8001bbe:	4623      	mov	r3, r4
 8001bc0:	eb18 0303 	adds.w	r3, r8, r3
 8001bc4:	60bb      	str	r3, [r7, #8]
 8001bc6:	462b      	mov	r3, r5
 8001bc8:	eb49 0303 	adc.w	r3, r9, r3
 8001bcc:	60fb      	str	r3, [r7, #12]
 8001bce:	f04f 0200 	mov.w	r2, #0
 8001bd2:	f04f 0300 	mov.w	r3, #0
 8001bd6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001bda:	4629      	mov	r1, r5
 8001bdc:	024b      	lsls	r3, r1, #9
 8001bde:	4621      	mov	r1, r4
 8001be0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001be4:	4621      	mov	r1, r4
 8001be6:	024a      	lsls	r2, r1, #9
 8001be8:	4610      	mov	r0, r2
 8001bea:	4619      	mov	r1, r3
 8001bec:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001bee:	2200      	movs	r2, #0
 8001bf0:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001bf2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001bf4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8001bf8:	f7fe fb4a 	bl	8000290 <__aeabi_uldivmod>
 8001bfc:	4602      	mov	r2, r0
 8001bfe:	460b      	mov	r3, r1
 8001c00:	4613      	mov	r3, r2
 8001c02:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001c04:	e058      	b.n	8001cb8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001c06:	4b38      	ldr	r3, [pc, #224]	@ (8001ce8 <HAL_RCC_GetSysClockFreq+0x200>)
 8001c08:	685b      	ldr	r3, [r3, #4]
 8001c0a:	099b      	lsrs	r3, r3, #6
 8001c0c:	2200      	movs	r2, #0
 8001c0e:	4618      	mov	r0, r3
 8001c10:	4611      	mov	r1, r2
 8001c12:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001c16:	623b      	str	r3, [r7, #32]
 8001c18:	2300      	movs	r3, #0
 8001c1a:	627b      	str	r3, [r7, #36]	@ 0x24
 8001c1c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001c20:	4642      	mov	r2, r8
 8001c22:	464b      	mov	r3, r9
 8001c24:	f04f 0000 	mov.w	r0, #0
 8001c28:	f04f 0100 	mov.w	r1, #0
 8001c2c:	0159      	lsls	r1, r3, #5
 8001c2e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001c32:	0150      	lsls	r0, r2, #5
 8001c34:	4602      	mov	r2, r0
 8001c36:	460b      	mov	r3, r1
 8001c38:	4641      	mov	r1, r8
 8001c3a:	ebb2 0a01 	subs.w	sl, r2, r1
 8001c3e:	4649      	mov	r1, r9
 8001c40:	eb63 0b01 	sbc.w	fp, r3, r1
 8001c44:	f04f 0200 	mov.w	r2, #0
 8001c48:	f04f 0300 	mov.w	r3, #0
 8001c4c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001c50:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001c54:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001c58:	ebb2 040a 	subs.w	r4, r2, sl
 8001c5c:	eb63 050b 	sbc.w	r5, r3, fp
 8001c60:	f04f 0200 	mov.w	r2, #0
 8001c64:	f04f 0300 	mov.w	r3, #0
 8001c68:	00eb      	lsls	r3, r5, #3
 8001c6a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001c6e:	00e2      	lsls	r2, r4, #3
 8001c70:	4614      	mov	r4, r2
 8001c72:	461d      	mov	r5, r3
 8001c74:	4643      	mov	r3, r8
 8001c76:	18e3      	adds	r3, r4, r3
 8001c78:	603b      	str	r3, [r7, #0]
 8001c7a:	464b      	mov	r3, r9
 8001c7c:	eb45 0303 	adc.w	r3, r5, r3
 8001c80:	607b      	str	r3, [r7, #4]
 8001c82:	f04f 0200 	mov.w	r2, #0
 8001c86:	f04f 0300 	mov.w	r3, #0
 8001c8a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001c8e:	4629      	mov	r1, r5
 8001c90:	028b      	lsls	r3, r1, #10
 8001c92:	4621      	mov	r1, r4
 8001c94:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001c98:	4621      	mov	r1, r4
 8001c9a:	028a      	lsls	r2, r1, #10
 8001c9c:	4610      	mov	r0, r2
 8001c9e:	4619      	mov	r1, r3
 8001ca0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001ca2:	2200      	movs	r2, #0
 8001ca4:	61bb      	str	r3, [r7, #24]
 8001ca6:	61fa      	str	r2, [r7, #28]
 8001ca8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001cac:	f7fe faf0 	bl	8000290 <__aeabi_uldivmod>
 8001cb0:	4602      	mov	r2, r0
 8001cb2:	460b      	mov	r3, r1
 8001cb4:	4613      	mov	r3, r2
 8001cb6:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8001cb8:	4b0b      	ldr	r3, [pc, #44]	@ (8001ce8 <HAL_RCC_GetSysClockFreq+0x200>)
 8001cba:	685b      	ldr	r3, [r3, #4]
 8001cbc:	0c1b      	lsrs	r3, r3, #16
 8001cbe:	f003 0303 	and.w	r3, r3, #3
 8001cc2:	3301      	adds	r3, #1
 8001cc4:	005b      	lsls	r3, r3, #1
 8001cc6:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8001cc8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8001cca:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001ccc:	fbb2 f3f3 	udiv	r3, r2, r3
 8001cd0:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001cd2:	e002      	b.n	8001cda <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001cd4:	4b05      	ldr	r3, [pc, #20]	@ (8001cec <HAL_RCC_GetSysClockFreq+0x204>)
 8001cd6:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001cd8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001cda:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8001cdc:	4618      	mov	r0, r3
 8001cde:	3750      	adds	r7, #80	@ 0x50
 8001ce0:	46bd      	mov	sp, r7
 8001ce2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001ce6:	bf00      	nop
 8001ce8:	40023800 	.word	0x40023800
 8001cec:	00f42400 	.word	0x00f42400
 8001cf0:	007a1200 	.word	0x007a1200

08001cf4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001cf4:	b480      	push	{r7}
 8001cf6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001cf8:	4b03      	ldr	r3, [pc, #12]	@ (8001d08 <HAL_RCC_GetHCLKFreq+0x14>)
 8001cfa:	681b      	ldr	r3, [r3, #0]
}
 8001cfc:	4618      	mov	r0, r3
 8001cfe:	46bd      	mov	sp, r7
 8001d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d04:	4770      	bx	lr
 8001d06:	bf00      	nop
 8001d08:	20000000 	.word	0x20000000

08001d0c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001d0c:	b580      	push	{r7, lr}
 8001d0e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001d10:	f7ff fff0 	bl	8001cf4 <HAL_RCC_GetHCLKFreq>
 8001d14:	4602      	mov	r2, r0
 8001d16:	4b05      	ldr	r3, [pc, #20]	@ (8001d2c <HAL_RCC_GetPCLK1Freq+0x20>)
 8001d18:	689b      	ldr	r3, [r3, #8]
 8001d1a:	0a9b      	lsrs	r3, r3, #10
 8001d1c:	f003 0307 	and.w	r3, r3, #7
 8001d20:	4903      	ldr	r1, [pc, #12]	@ (8001d30 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001d22:	5ccb      	ldrb	r3, [r1, r3]
 8001d24:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001d28:	4618      	mov	r0, r3
 8001d2a:	bd80      	pop	{r7, pc}
 8001d2c:	40023800 	.word	0x40023800
 8001d30:	0800384c 	.word	0x0800384c

08001d34 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001d34:	b580      	push	{r7, lr}
 8001d36:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001d38:	f7ff ffdc 	bl	8001cf4 <HAL_RCC_GetHCLKFreq>
 8001d3c:	4602      	mov	r2, r0
 8001d3e:	4b05      	ldr	r3, [pc, #20]	@ (8001d54 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001d40:	689b      	ldr	r3, [r3, #8]
 8001d42:	0b5b      	lsrs	r3, r3, #13
 8001d44:	f003 0307 	and.w	r3, r3, #7
 8001d48:	4903      	ldr	r1, [pc, #12]	@ (8001d58 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001d4a:	5ccb      	ldrb	r3, [r1, r3]
 8001d4c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001d50:	4618      	mov	r0, r3
 8001d52:	bd80      	pop	{r7, pc}
 8001d54:	40023800 	.word	0x40023800
 8001d58:	0800384c 	.word	0x0800384c

08001d5c <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001d5c:	b580      	push	{r7, lr}
 8001d5e:	b086      	sub	sp, #24
 8001d60:	af00      	add	r7, sp, #0
 8001d62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001d64:	2300      	movs	r3, #0
 8001d66:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8001d68:	2300      	movs	r3, #0
 8001d6a:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	f003 0301 	and.w	r3, r3, #1
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d105      	bne.n	8001d84 <HAL_RCCEx_PeriphCLKConfig+0x28>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	f003 0304 	and.w	r3, r3, #4
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d035      	beq.n	8001df0 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8001d84:	4b67      	ldr	r3, [pc, #412]	@ (8001f24 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8001d86:	2200      	movs	r2, #0
 8001d88:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8001d8a:	f7fe ffc1 	bl	8000d10 <HAL_GetTick>
 8001d8e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8001d90:	e008      	b.n	8001da4 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8001d92:	f7fe ffbd 	bl	8000d10 <HAL_GetTick>
 8001d96:	4602      	mov	r2, r0
 8001d98:	697b      	ldr	r3, [r7, #20]
 8001d9a:	1ad3      	subs	r3, r2, r3
 8001d9c:	2b02      	cmp	r3, #2
 8001d9e:	d901      	bls.n	8001da4 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8001da0:	2303      	movs	r3, #3
 8001da2:	e0ba      	b.n	8001f1a <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8001da4:	4b60      	ldr	r3, [pc, #384]	@ (8001f28 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d1f0      	bne.n	8001d92 <HAL_RCCEx_PeriphCLKConfig+0x36>
                                   PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	685b      	ldr	r3, [r3, #4]
 8001db4:	019a      	lsls	r2, r3, #6
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	689b      	ldr	r3, [r3, #8]
 8001dba:	071b      	lsls	r3, r3, #28
 8001dbc:	495a      	ldr	r1, [pc, #360]	@ (8001f28 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8001dbe:	4313      	orrs	r3, r2
 8001dc0:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8001dc4:	4b57      	ldr	r3, [pc, #348]	@ (8001f24 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8001dc6:	2201      	movs	r2, #1
 8001dc8:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8001dca:	f7fe ffa1 	bl	8000d10 <HAL_GetTick>
 8001dce:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8001dd0:	e008      	b.n	8001de4 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8001dd2:	f7fe ff9d 	bl	8000d10 <HAL_GetTick>
 8001dd6:	4602      	mov	r2, r0
 8001dd8:	697b      	ldr	r3, [r7, #20]
 8001dda:	1ad3      	subs	r3, r2, r3
 8001ddc:	2b02      	cmp	r3, #2
 8001dde:	d901      	bls.n	8001de4 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8001de0:	2303      	movs	r3, #3
 8001de2:	e09a      	b.n	8001f1a <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8001de4:	4b50      	ldr	r3, [pc, #320]	@ (8001f28 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d0f0      	beq.n	8001dd2 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	f003 0302 	and.w	r3, r3, #2
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	f000 8083 	beq.w	8001f04 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8001dfe:	2300      	movs	r3, #0
 8001e00:	60fb      	str	r3, [r7, #12]
 8001e02:	4b49      	ldr	r3, [pc, #292]	@ (8001f28 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8001e04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e06:	4a48      	ldr	r2, [pc, #288]	@ (8001f28 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8001e08:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001e0c:	6413      	str	r3, [r2, #64]	@ 0x40
 8001e0e:	4b46      	ldr	r3, [pc, #280]	@ (8001f28 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8001e10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e12:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001e16:	60fb      	str	r3, [r7, #12]
 8001e18:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8001e1a:	4b44      	ldr	r3, [pc, #272]	@ (8001f2c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	4a43      	ldr	r2, [pc, #268]	@ (8001f2c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001e20:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001e24:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001e26:	f7fe ff73 	bl	8000d10 <HAL_GetTick>
 8001e2a:	6178      	str	r0, [r7, #20]

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8001e2c:	e008      	b.n	8001e40 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001e2e:	f7fe ff6f 	bl	8000d10 <HAL_GetTick>
 8001e32:	4602      	mov	r2, r0
 8001e34:	697b      	ldr	r3, [r7, #20]
 8001e36:	1ad3      	subs	r3, r2, r3
 8001e38:	2b02      	cmp	r3, #2
 8001e3a:	d901      	bls.n	8001e40 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8001e3c:	2303      	movs	r3, #3
 8001e3e:	e06c      	b.n	8001f1a <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8001e40:	4b3a      	ldr	r3, [pc, #232]	@ (8001f2c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d0f0      	beq.n	8001e2e <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001e4c:	4b36      	ldr	r3, [pc, #216]	@ (8001f28 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8001e4e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001e50:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001e54:	613b      	str	r3, [r7, #16]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001e56:	693b      	ldr	r3, [r7, #16]
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d02f      	beq.n	8001ebc <HAL_RCCEx_PeriphCLKConfig+0x160>
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	68db      	ldr	r3, [r3, #12]
 8001e60:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001e64:	693a      	ldr	r2, [r7, #16]
 8001e66:	429a      	cmp	r2, r3
 8001e68:	d028      	beq.n	8001ebc <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001e6a:	4b2f      	ldr	r3, [pc, #188]	@ (8001f28 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8001e6c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001e6e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001e72:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001e74:	4b2e      	ldr	r3, [pc, #184]	@ (8001f30 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8001e76:	2201      	movs	r2, #1
 8001e78:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001e7a:	4b2d      	ldr	r3, [pc, #180]	@ (8001f30 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8001e7c:	2200      	movs	r2, #0
 8001e7e:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8001e80:	4a29      	ldr	r2, [pc, #164]	@ (8001f28 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8001e82:	693b      	ldr	r3, [r7, #16]
 8001e84:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8001e86:	4b28      	ldr	r3, [pc, #160]	@ (8001f28 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8001e88:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001e8a:	f003 0301 	and.w	r3, r3, #1
 8001e8e:	2b01      	cmp	r3, #1
 8001e90:	d114      	bne.n	8001ebc <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8001e92:	f7fe ff3d 	bl	8000d10 <HAL_GetTick>
 8001e96:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e98:	e00a      	b.n	8001eb0 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e9a:	f7fe ff39 	bl	8000d10 <HAL_GetTick>
 8001e9e:	4602      	mov	r2, r0
 8001ea0:	697b      	ldr	r3, [r7, #20]
 8001ea2:	1ad3      	subs	r3, r2, r3
 8001ea4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001ea8:	4293      	cmp	r3, r2
 8001eaa:	d901      	bls.n	8001eb0 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8001eac:	2303      	movs	r3, #3
 8001eae:	e034      	b.n	8001f1a <HAL_RCCEx_PeriphCLKConfig+0x1be>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001eb0:	4b1d      	ldr	r3, [pc, #116]	@ (8001f28 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8001eb2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001eb4:	f003 0302 	and.w	r3, r3, #2
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d0ee      	beq.n	8001e9a <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	68db      	ldr	r3, [r3, #12]
 8001ec0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001ec4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8001ec8:	d10d      	bne.n	8001ee6 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8001eca:	4b17      	ldr	r3, [pc, #92]	@ (8001f28 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8001ecc:	689b      	ldr	r3, [r3, #8]
 8001ece:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	68db      	ldr	r3, [r3, #12]
 8001ed6:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8001eda:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001ede:	4912      	ldr	r1, [pc, #72]	@ (8001f28 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8001ee0:	4313      	orrs	r3, r2
 8001ee2:	608b      	str	r3, [r1, #8]
 8001ee4:	e005      	b.n	8001ef2 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8001ee6:	4b10      	ldr	r3, [pc, #64]	@ (8001f28 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8001ee8:	689b      	ldr	r3, [r3, #8]
 8001eea:	4a0f      	ldr	r2, [pc, #60]	@ (8001f28 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8001eec:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8001ef0:	6093      	str	r3, [r2, #8]
 8001ef2:	4b0d      	ldr	r3, [pc, #52]	@ (8001f28 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8001ef4:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	68db      	ldr	r3, [r3, #12]
 8001efa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001efe:	490a      	ldr	r1, [pc, #40]	@ (8001f28 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8001f00:	4313      	orrs	r3, r2
 8001f02:	670b      	str	r3, [r1, #112]	@ 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	f003 0308 	and.w	r3, r3, #8
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d003      	beq.n	8001f18 <HAL_RCCEx_PeriphCLKConfig+0x1bc>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	7c1a      	ldrb	r2, [r3, #16]
 8001f14:	4b07      	ldr	r3, [pc, #28]	@ (8001f34 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8001f16:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8001f18:	2300      	movs	r3, #0
}
 8001f1a:	4618      	mov	r0, r3
 8001f1c:	3718      	adds	r7, #24
 8001f1e:	46bd      	mov	sp, r7
 8001f20:	bd80      	pop	{r7, pc}
 8001f22:	bf00      	nop
 8001f24:	42470068 	.word	0x42470068
 8001f28:	40023800 	.word	0x40023800
 8001f2c:	40007000 	.word	0x40007000
 8001f30:	42470e40 	.word	0x42470e40
 8001f34:	424711e0 	.word	0x424711e0

08001f38 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8001f38:	b580      	push	{r7, lr}
 8001f3a:	b084      	sub	sp, #16
 8001f3c:	af00      	add	r7, sp, #0
 8001f3e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8001f40:	2301      	movs	r3, #1
 8001f42:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d101      	bne.n	8001f4e <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 8001f4a:	2301      	movs	r3, #1
 8001f4c:	e073      	b.n	8002036 <HAL_RTC_Init+0xfe>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	7f5b      	ldrb	r3, [r3, #29]
 8001f52:	b2db      	uxtb	r3, r3
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d105      	bne.n	8001f64 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	2200      	movs	r2, #0
 8001f5c:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8001f5e:	6878      	ldr	r0, [r7, #4]
 8001f60:	f7fe fd0c 	bl	800097c <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	2202      	movs	r2, #2
 8001f68:	775a      	strb	r2, [r3, #29]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	68db      	ldr	r3, [r3, #12]
 8001f70:	f003 0310 	and.w	r3, r3, #16
 8001f74:	2b10      	cmp	r3, #16
 8001f76:	d055      	beq.n	8002024 <HAL_RTC_Init+0xec>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	22ca      	movs	r2, #202	@ 0xca
 8001f7e:	625a      	str	r2, [r3, #36]	@ 0x24
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	2253      	movs	r2, #83	@ 0x53
 8001f86:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8001f88:	6878      	ldr	r0, [r7, #4]
 8001f8a:	f000 f99d 	bl	80022c8 <RTC_EnterInitMode>
 8001f8e:	4603      	mov	r3, r0
 8001f90:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 8001f92:	7bfb      	ldrb	r3, [r7, #15]
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d12c      	bne.n	8001ff2 <HAL_RTC_Init+0xba>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	689b      	ldr	r3, [r3, #8]
 8001f9e:	687a      	ldr	r2, [r7, #4]
 8001fa0:	6812      	ldr	r2, [r2, #0]
 8001fa2:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8001fa6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8001faa:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	6899      	ldr	r1, [r3, #8]
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	685a      	ldr	r2, [r3, #4]
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	691b      	ldr	r3, [r3, #16]
 8001fba:	431a      	orrs	r2, r3
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	695b      	ldr	r3, [r3, #20]
 8001fc0:	431a      	orrs	r2, r3
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	430a      	orrs	r2, r1
 8001fc8:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	687a      	ldr	r2, [r7, #4]
 8001fd0:	68d2      	ldr	r2, [r2, #12]
 8001fd2:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	6919      	ldr	r1, [r3, #16]
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	689b      	ldr	r3, [r3, #8]
 8001fde:	041a      	lsls	r2, r3, #16
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	430a      	orrs	r2, r1
 8001fe6:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8001fe8:	6878      	ldr	r0, [r7, #4]
 8001fea:	f000 f9a4 	bl	8002336 <RTC_ExitInitMode>
 8001fee:	4603      	mov	r3, r0
 8001ff0:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 8001ff2:	7bfb      	ldrb	r3, [r7, #15]
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d110      	bne.n	800201a <HAL_RTC_Init+0xe2>
    {
      hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8002006:	641a      	str	r2, [r3, #64]	@ 0x40
      hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	699a      	ldr	r2, [r3, #24]
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	430a      	orrs	r2, r1
 8002018:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	22ff      	movs	r2, #255	@ 0xff
 8002020:	625a      	str	r2, [r3, #36]	@ 0x24
 8002022:	e001      	b.n	8002028 <HAL_RTC_Init+0xf0>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 8002024:	2300      	movs	r3, #0
 8002026:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8002028:	7bfb      	ldrb	r3, [r7, #15]
 800202a:	2b00      	cmp	r3, #0
 800202c:	d102      	bne.n	8002034 <HAL_RTC_Init+0xfc>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	2201      	movs	r2, #1
 8002032:	775a      	strb	r2, [r3, #29]
  }

  return status;
 8002034:	7bfb      	ldrb	r3, [r7, #15]
}
 8002036:	4618      	mov	r0, r3
 8002038:	3710      	adds	r7, #16
 800203a:	46bd      	mov	sp, r7
 800203c:	bd80      	pop	{r7, pc}

0800203e <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800203e:	b590      	push	{r4, r7, lr}
 8002040:	b087      	sub	sp, #28
 8002042:	af00      	add	r7, sp, #0
 8002044:	60f8      	str	r0, [r7, #12]
 8002046:	60b9      	str	r1, [r7, #8]
 8002048:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 800204a:	2300      	movs	r3, #0
 800204c:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	7f1b      	ldrb	r3, [r3, #28]
 8002052:	2b01      	cmp	r3, #1
 8002054:	d101      	bne.n	800205a <HAL_RTC_SetTime+0x1c>
 8002056:	2302      	movs	r3, #2
 8002058:	e087      	b.n	800216a <HAL_RTC_SetTime+0x12c>
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	2201      	movs	r2, #1
 800205e:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	2202      	movs	r2, #2
 8002064:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	2b00      	cmp	r3, #0
 800206a:	d126      	bne.n	80020ba <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	689b      	ldr	r3, [r3, #8]
 8002072:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002076:	2b00      	cmp	r3, #0
 8002078:	d102      	bne.n	8002080 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 800207a:	68bb      	ldr	r3, [r7, #8]
 800207c:	2200      	movs	r2, #0
 800207e:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8002080:	68bb      	ldr	r3, [r7, #8]
 8002082:	781b      	ldrb	r3, [r3, #0]
 8002084:	4618      	mov	r0, r3
 8002086:	f000 f97b 	bl	8002380 <RTC_ByteToBcd2>
 800208a:	4603      	mov	r3, r0
 800208c:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800208e:	68bb      	ldr	r3, [r7, #8]
 8002090:	785b      	ldrb	r3, [r3, #1]
 8002092:	4618      	mov	r0, r3
 8002094:	f000 f974 	bl	8002380 <RTC_ByteToBcd2>
 8002098:	4603      	mov	r3, r0
 800209a:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800209c:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 800209e:	68bb      	ldr	r3, [r7, #8]
 80020a0:	789b      	ldrb	r3, [r3, #2]
 80020a2:	4618      	mov	r0, r3
 80020a4:	f000 f96c 	bl	8002380 <RTC_ByteToBcd2>
 80020a8:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80020aa:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 80020ae:	68bb      	ldr	r3, [r7, #8]
 80020b0:	78db      	ldrb	r3, [r3, #3]
 80020b2:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80020b4:	4313      	orrs	r3, r2
 80020b6:	617b      	str	r3, [r7, #20]
 80020b8:	e018      	b.n	80020ec <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	689b      	ldr	r3, [r3, #8]
 80020c0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d102      	bne.n	80020ce <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 80020c8:	68bb      	ldr	r3, [r7, #8]
 80020ca:	2200      	movs	r2, #0
 80020cc:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 80020ce:	68bb      	ldr	r3, [r7, #8]
 80020d0:	781b      	ldrb	r3, [r3, #0]
 80020d2:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 80020d4:	68bb      	ldr	r3, [r7, #8]
 80020d6:	785b      	ldrb	r3, [r3, #1]
 80020d8:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 80020da:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 80020dc:	68ba      	ldr	r2, [r7, #8]
 80020de:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 80020e0:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 80020e2:	68bb      	ldr	r3, [r7, #8]
 80020e4:	78db      	ldrb	r3, [r3, #3]
 80020e6:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 80020e8:	4313      	orrs	r3, r2
 80020ea:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	22ca      	movs	r2, #202	@ 0xca
 80020f2:	625a      	str	r2, [r3, #36]	@ 0x24
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	2253      	movs	r2, #83	@ 0x53
 80020fa:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80020fc:	68f8      	ldr	r0, [r7, #12]
 80020fe:	f000 f8e3 	bl	80022c8 <RTC_EnterInitMode>
 8002102:	4603      	mov	r3, r0
 8002104:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8002106:	7cfb      	ldrb	r3, [r7, #19]
 8002108:	2b00      	cmp	r3, #0
 800210a:	d120      	bne.n	800214e <HAL_RTC_SetTime+0x110>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	681a      	ldr	r2, [r3, #0]
 8002110:	697b      	ldr	r3, [r7, #20]
 8002112:	f003 337f 	and.w	r3, r3, #2139062143	@ 0x7f7f7f7f
 8002116:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 800211a:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	689a      	ldr	r2, [r3, #8]
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 800212a:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	6899      	ldr	r1, [r3, #8]
 8002132:	68bb      	ldr	r3, [r7, #8]
 8002134:	68da      	ldr	r2, [r3, #12]
 8002136:	68bb      	ldr	r3, [r7, #8]
 8002138:	691b      	ldr	r3, [r3, #16]
 800213a:	431a      	orrs	r2, r3
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	430a      	orrs	r2, r1
 8002142:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8002144:	68f8      	ldr	r0, [r7, #12]
 8002146:	f000 f8f6 	bl	8002336 <RTC_ExitInitMode>
 800214a:	4603      	mov	r3, r0
 800214c:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 800214e:	7cfb      	ldrb	r3, [r7, #19]
 8002150:	2b00      	cmp	r3, #0
 8002152:	d102      	bne.n	800215a <HAL_RTC_SetTime+0x11c>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	2201      	movs	r2, #1
 8002158:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	22ff      	movs	r2, #255	@ 0xff
 8002160:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	2200      	movs	r2, #0
 8002166:	771a      	strb	r2, [r3, #28]

  return status;
 8002168:	7cfb      	ldrb	r3, [r7, #19]
}
 800216a:	4618      	mov	r0, r3
 800216c:	371c      	adds	r7, #28
 800216e:	46bd      	mov	sp, r7
 8002170:	bd90      	pop	{r4, r7, pc}

08002172 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8002172:	b590      	push	{r4, r7, lr}
 8002174:	b087      	sub	sp, #28
 8002176:	af00      	add	r7, sp, #0
 8002178:	60f8      	str	r0, [r7, #12]
 800217a:	60b9      	str	r1, [r7, #8]
 800217c:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 800217e:	2300      	movs	r3, #0
 8002180:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	7f1b      	ldrb	r3, [r3, #28]
 8002186:	2b01      	cmp	r3, #1
 8002188:	d101      	bne.n	800218e <HAL_RTC_SetDate+0x1c>
 800218a:	2302      	movs	r3, #2
 800218c:	e071      	b.n	8002272 <HAL_RTC_SetDate+0x100>
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	2201      	movs	r2, #1
 8002192:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	2202      	movs	r2, #2
 8002198:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	2b00      	cmp	r3, #0
 800219e:	d10e      	bne.n	80021be <HAL_RTC_SetDate+0x4c>
 80021a0:	68bb      	ldr	r3, [r7, #8]
 80021a2:	785b      	ldrb	r3, [r3, #1]
 80021a4:	f003 0310 	and.w	r3, r3, #16
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d008      	beq.n	80021be <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 80021ac:	68bb      	ldr	r3, [r7, #8]
 80021ae:	785b      	ldrb	r3, [r3, #1]
 80021b0:	f023 0310 	bic.w	r3, r3, #16
 80021b4:	b2db      	uxtb	r3, r3
 80021b6:	330a      	adds	r3, #10
 80021b8:	b2da      	uxtb	r2, r3
 80021ba:	68bb      	ldr	r3, [r7, #8]
 80021bc:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d11c      	bne.n	80021fe <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80021c4:	68bb      	ldr	r3, [r7, #8]
 80021c6:	78db      	ldrb	r3, [r3, #3]
 80021c8:	4618      	mov	r0, r3
 80021ca:	f000 f8d9 	bl	8002380 <RTC_ByteToBcd2>
 80021ce:	4603      	mov	r3, r0
 80021d0:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80021d2:	68bb      	ldr	r3, [r7, #8]
 80021d4:	785b      	ldrb	r3, [r3, #1]
 80021d6:	4618      	mov	r0, r3
 80021d8:	f000 f8d2 	bl	8002380 <RTC_ByteToBcd2>
 80021dc:	4603      	mov	r3, r0
 80021de:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80021e0:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 80021e2:	68bb      	ldr	r3, [r7, #8]
 80021e4:	789b      	ldrb	r3, [r3, #2]
 80021e6:	4618      	mov	r0, r3
 80021e8:	f000 f8ca 	bl	8002380 <RTC_ByteToBcd2>
 80021ec:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80021ee:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 80021f2:	68bb      	ldr	r3, [r7, #8]
 80021f4:	781b      	ldrb	r3, [r3, #0]
 80021f6:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80021f8:	4313      	orrs	r3, r2
 80021fa:	617b      	str	r3, [r7, #20]
 80021fc:	e00e      	b.n	800221c <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 80021fe:	68bb      	ldr	r3, [r7, #8]
 8002200:	78db      	ldrb	r3, [r3, #3]
 8002202:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8002204:	68bb      	ldr	r3, [r7, #8]
 8002206:	785b      	ldrb	r3, [r3, #1]
 8002208:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800220a:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 800220c:	68ba      	ldr	r2, [r7, #8]
 800220e:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8002210:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8002212:	68bb      	ldr	r3, [r7, #8]
 8002214:	781b      	ldrb	r3, [r3, #0]
 8002216:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8002218:	4313      	orrs	r3, r2
 800221a:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	22ca      	movs	r2, #202	@ 0xca
 8002222:	625a      	str	r2, [r3, #36]	@ 0x24
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	2253      	movs	r2, #83	@ 0x53
 800222a:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800222c:	68f8      	ldr	r0, [r7, #12]
 800222e:	f000 f84b 	bl	80022c8 <RTC_EnterInitMode>
 8002232:	4603      	mov	r3, r0
 8002234:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8002236:	7cfb      	ldrb	r3, [r7, #19]
 8002238:	2b00      	cmp	r3, #0
 800223a:	d10c      	bne.n	8002256 <HAL_RTC_SetDate+0xe4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	681a      	ldr	r2, [r3, #0]
 8002240:	697b      	ldr	r3, [r7, #20]
 8002242:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8002246:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800224a:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800224c:	68f8      	ldr	r0, [r7, #12]
 800224e:	f000 f872 	bl	8002336 <RTC_ExitInitMode>
 8002252:	4603      	mov	r3, r0
 8002254:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8002256:	7cfb      	ldrb	r3, [r7, #19]
 8002258:	2b00      	cmp	r3, #0
 800225a:	d102      	bne.n	8002262 <HAL_RTC_SetDate+0xf0>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	2201      	movs	r2, #1
 8002260:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	22ff      	movs	r2, #255	@ 0xff
 8002268:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	2200      	movs	r2, #0
 800226e:	771a      	strb	r2, [r3, #28]

  return status;
 8002270:	7cfb      	ldrb	r3, [r7, #19]
}
 8002272:	4618      	mov	r0, r3
 8002274:	371c      	adds	r7, #28
 8002276:	46bd      	mov	sp, r7
 8002278:	bd90      	pop	{r4, r7, pc}
	...

0800227c <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800227c:	b580      	push	{r7, lr}
 800227e:	b084      	sub	sp, #16
 8002280:	af00      	add	r7, sp, #0
 8002282:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002284:	2300      	movs	r3, #0
 8002286:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	4a0d      	ldr	r2, [pc, #52]	@ (80022c4 <HAL_RTC_WaitForSynchro+0x48>)
 800228e:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002290:	f7fe fd3e 	bl	8000d10 <HAL_GetTick>
 8002294:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8002296:	e009      	b.n	80022ac <HAL_RTC_WaitForSynchro+0x30>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8002298:	f7fe fd3a 	bl	8000d10 <HAL_GetTick>
 800229c:	4602      	mov	r2, r0
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	1ad3      	subs	r3, r2, r3
 80022a2:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80022a6:	d901      	bls.n	80022ac <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 80022a8:	2303      	movs	r3, #3
 80022aa:	e007      	b.n	80022bc <HAL_RTC_WaitForSynchro+0x40>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	68db      	ldr	r3, [r3, #12]
 80022b2:	f003 0320 	and.w	r3, r3, #32
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d0ee      	beq.n	8002298 <HAL_RTC_WaitForSynchro+0x1c>
    }
  }

  return HAL_OK;
 80022ba:	2300      	movs	r3, #0
}
 80022bc:	4618      	mov	r0, r3
 80022be:	3710      	adds	r7, #16
 80022c0:	46bd      	mov	sp, r7
 80022c2:	bd80      	pop	{r7, pc}
 80022c4:	00013f5f 	.word	0x00013f5f

080022c8 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80022c8:	b580      	push	{r7, lr}
 80022ca:	b084      	sub	sp, #16
 80022cc:	af00      	add	r7, sp, #0
 80022ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80022d0:	2300      	movs	r3, #0
 80022d2:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 80022d4:	2300      	movs	r3, #0
 80022d6:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	68db      	ldr	r3, [r3, #12]
 80022de:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d122      	bne.n	800232c <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	68da      	ldr	r2, [r3, #12]
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80022f4:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 80022f6:	f7fe fd0b 	bl	8000d10 <HAL_GetTick>
 80022fa:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 80022fc:	e00c      	b.n	8002318 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80022fe:	f7fe fd07 	bl	8000d10 <HAL_GetTick>
 8002302:	4602      	mov	r2, r0
 8002304:	68bb      	ldr	r3, [r7, #8]
 8002306:	1ad3      	subs	r3, r2, r3
 8002308:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800230c:	d904      	bls.n	8002318 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	2204      	movs	r2, #4
 8002312:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 8002314:	2301      	movs	r3, #1
 8002316:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	68db      	ldr	r3, [r3, #12]
 800231e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002322:	2b00      	cmp	r3, #0
 8002324:	d102      	bne.n	800232c <RTC_EnterInitMode+0x64>
 8002326:	7bfb      	ldrb	r3, [r7, #15]
 8002328:	2b01      	cmp	r3, #1
 800232a:	d1e8      	bne.n	80022fe <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 800232c:	7bfb      	ldrb	r3, [r7, #15]
}
 800232e:	4618      	mov	r0, r3
 8002330:	3710      	adds	r7, #16
 8002332:	46bd      	mov	sp, r7
 8002334:	bd80      	pop	{r7, pc}

08002336 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8002336:	b580      	push	{r7, lr}
 8002338:	b084      	sub	sp, #16
 800233a:	af00      	add	r7, sp, #0
 800233c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800233e:	2300      	movs	r3, #0
 8002340:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	68da      	ldr	r2, [r3, #12]
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002350:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	689b      	ldr	r3, [r3, #8]
 8002358:	f003 0320 	and.w	r3, r3, #32
 800235c:	2b00      	cmp	r3, #0
 800235e:	d10a      	bne.n	8002376 <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8002360:	6878      	ldr	r0, [r7, #4]
 8002362:	f7ff ff8b 	bl	800227c <HAL_RTC_WaitForSynchro>
 8002366:	4603      	mov	r3, r0
 8002368:	2b00      	cmp	r3, #0
 800236a:	d004      	beq.n	8002376 <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	2204      	movs	r2, #4
 8002370:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 8002372:	2301      	movs	r3, #1
 8002374:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8002376:	7bfb      	ldrb	r3, [r7, #15]
}
 8002378:	4618      	mov	r0, r3
 800237a:	3710      	adds	r7, #16
 800237c:	46bd      	mov	sp, r7
 800237e:	bd80      	pop	{r7, pc}

08002380 <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 8002380:	b480      	push	{r7}
 8002382:	b085      	sub	sp, #20
 8002384:	af00      	add	r7, sp, #0
 8002386:	4603      	mov	r3, r0
 8002388:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 800238a:	2300      	movs	r3, #0
 800238c:	60fb      	str	r3, [r7, #12]

  while (number >= 10U)
 800238e:	e005      	b.n	800239c <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	3301      	adds	r3, #1
 8002394:	60fb      	str	r3, [r7, #12]
    number -= 10U;
 8002396:	79fb      	ldrb	r3, [r7, #7]
 8002398:	3b0a      	subs	r3, #10
 800239a:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 800239c:	79fb      	ldrb	r3, [r7, #7]
 800239e:	2b09      	cmp	r3, #9
 80023a0:	d8f6      	bhi.n	8002390 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	b2db      	uxtb	r3, r3
 80023a6:	011b      	lsls	r3, r3, #4
 80023a8:	b2da      	uxtb	r2, r3
 80023aa:	79fb      	ldrb	r3, [r7, #7]
 80023ac:	4313      	orrs	r3, r2
 80023ae:	b2db      	uxtb	r3, r3
}
 80023b0:	4618      	mov	r0, r3
 80023b2:	3714      	adds	r7, #20
 80023b4:	46bd      	mov	sp, r7
 80023b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ba:	4770      	bx	lr

080023bc <HAL_RTCEx_SetWakeUpTimer_IT>:
  * @param  WakeUpCounter Wakeup counter
  * @param  WakeUpClock Wakeup clock
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
{
 80023bc:	b480      	push	{r7}
 80023be:	b087      	sub	sp, #28
 80023c0:	af00      	add	r7, sp, #0
 80023c2:	60f8      	str	r0, [r7, #12]
 80023c4:	60b9      	str	r1, [r7, #8]
 80023c6:	607a      	str	r2, [r7, #4]
  __IO uint32_t count  = RTC_TIMEOUT_VALUE * (SystemCoreClock / 32U / 1000U);
 80023c8:	4b5a      	ldr	r3, [pc, #360]	@ (8002534 <HAL_RTCEx_SetWakeUpTimer_IT+0x178>)
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	4a5a      	ldr	r2, [pc, #360]	@ (8002538 <HAL_RTCEx_SetWakeUpTimer_IT+0x17c>)
 80023ce:	fba2 2303 	umull	r2, r3, r2, r3
 80023d2:	0adb      	lsrs	r3, r3, #11
 80023d4:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80023d8:	fb02 f303 	mul.w	r3, r2, r3
 80023dc:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_CLOCK(WakeUpClock));
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	7f1b      	ldrb	r3, [r3, #28]
 80023e2:	2b01      	cmp	r3, #1
 80023e4:	d101      	bne.n	80023ea <HAL_RTCEx_SetWakeUpTimer_IT+0x2e>
 80023e6:	2302      	movs	r3, #2
 80023e8:	e09d      	b.n	8002526 <HAL_RTCEx_SetWakeUpTimer_IT+0x16a>
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	2201      	movs	r2, #1
 80023ee:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	2202      	movs	r2, #2
 80023f4:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	22ca      	movs	r2, #202	@ 0xca
 80023fc:	625a      	str	r2, [r3, #36]	@ 0x24
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	2253      	movs	r2, #83	@ 0x53
 8002404:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Check RTC WUTWF flag is reset only when wakeup timer enabled */
  if ((hrtc->Instance->CR & RTC_CR_WUTE) != 0U)
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	689b      	ldr	r3, [r3, #8]
 800240c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002410:	2b00      	cmp	r3, #0
 8002412:	d018      	beq.n	8002446 <HAL_RTCEx_SetWakeUpTimer_IT+0x8a>
  {
    /* Wait till RTC WUTWF flag is reset and if timeout is reached exit */
    do
    {
      count = count - 1U;
 8002414:	697b      	ldr	r3, [r7, #20]
 8002416:	3b01      	subs	r3, #1
 8002418:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 800241a:	697b      	ldr	r3, [r7, #20]
 800241c:	2b00      	cmp	r3, #0
 800241e:	d10b      	bne.n	8002438 <HAL_RTCEx_SetWakeUpTimer_IT+0x7c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	22ff      	movs	r2, #255	@ 0xff
 8002426:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	2203      	movs	r2, #3
 800242c:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	2200      	movs	r2, #0
 8002432:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8002434:	2303      	movs	r3, #3
 8002436:	e076      	b.n	8002526 <HAL_RTCEx_SetWakeUpTimer_IT+0x16a>
      }
    } while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) != 0U);
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	68db      	ldr	r3, [r3, #12]
 800243e:	f003 0304 	and.w	r3, r3, #4
 8002442:	2b00      	cmp	r3, #0
 8002444:	d1e6      	bne.n	8002414 <HAL_RTCEx_SetWakeUpTimer_IT+0x58>
  }

  /* Disable the Wakeup timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	689a      	ldr	r2, [r3, #8]
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002454:	609a      	str	r2, [r3, #8]

  /* Clear the Wakeup flag */
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	68db      	ldr	r3, [r3, #12]
 800245c:	b2da      	uxtb	r2, r3
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	f462 6290 	orn	r2, r2, #1152	@ 0x480
 8002466:	60da      	str	r2, [r3, #12]

  /* Reload the counter */
  count = RTC_TIMEOUT_VALUE * (SystemCoreClock / 32U / 1000U);
 8002468:	4b32      	ldr	r3, [pc, #200]	@ (8002534 <HAL_RTCEx_SetWakeUpTimer_IT+0x178>)
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	4a32      	ldr	r2, [pc, #200]	@ (8002538 <HAL_RTCEx_SetWakeUpTimer_IT+0x17c>)
 800246e:	fba2 2303 	umull	r2, r3, r2, r3
 8002472:	0adb      	lsrs	r3, r3, #11
 8002474:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8002478:	fb02 f303 	mul.w	r3, r2, r3
 800247c:	617b      	str	r3, [r7, #20]

  /* Wait till RTC WUTWF flag is set and if timeout is reached exit */
  do
  {
    count = count - 1U;
 800247e:	697b      	ldr	r3, [r7, #20]
 8002480:	3b01      	subs	r3, #1
 8002482:	617b      	str	r3, [r7, #20]
    if (count == 0U)
 8002484:	697b      	ldr	r3, [r7, #20]
 8002486:	2b00      	cmp	r3, #0
 8002488:	d10b      	bne.n	80024a2 <HAL_RTCEx_SetWakeUpTimer_IT+0xe6>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	22ff      	movs	r2, #255	@ 0xff
 8002490:	625a      	str	r2, [r3, #36]	@ 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	2203      	movs	r2, #3
 8002496:	775a      	strb	r2, [r3, #29]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	2200      	movs	r2, #0
 800249c:	771a      	strb	r2, [r3, #28]

      return HAL_TIMEOUT;
 800249e:	2303      	movs	r3, #3
 80024a0:	e041      	b.n	8002526 <HAL_RTCEx_SetWakeUpTimer_IT+0x16a>
    }
  } while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U);
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	68db      	ldr	r3, [r3, #12]
 80024a8:	f003 0304 	and.w	r3, r3, #4
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d0e6      	beq.n	800247e <HAL_RTCEx_SetWakeUpTimer_IT+0xc2>

  /* Clear the Wakeup Timer clock source bits in CR register */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	689a      	ldr	r2, [r3, #8]
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	f022 0207 	bic.w	r2, r2, #7
 80024be:	609a      	str	r2, [r3, #8]

  /* Configure the clock source */
  hrtc->Instance->CR |= (uint32_t)WakeUpClock;
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	6899      	ldr	r1, [r3, #8]
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	687a      	ldr	r2, [r7, #4]
 80024cc:	430a      	orrs	r2, r1
 80024ce:	609a      	str	r2, [r3, #8]

  /* Configure the Wakeup Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	68ba      	ldr	r2, [r7, #8]
 80024d6:	615a      	str	r2, [r3, #20]

  /* RTC wakeup timer Interrupt Configuration: EXTI configuration */
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
 80024d8:	4b18      	ldr	r3, [pc, #96]	@ (800253c <HAL_RTCEx_SetWakeUpTimer_IT+0x180>)
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	4a17      	ldr	r2, [pc, #92]	@ (800253c <HAL_RTCEx_SetWakeUpTimer_IT+0x180>)
 80024de:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80024e2:	6013      	str	r3, [r2, #0]
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_RISING_EDGE();
 80024e4:	4b15      	ldr	r3, [pc, #84]	@ (800253c <HAL_RTCEx_SetWakeUpTimer_IT+0x180>)
 80024e6:	689b      	ldr	r3, [r3, #8]
 80024e8:	4a14      	ldr	r2, [pc, #80]	@ (800253c <HAL_RTCEx_SetWakeUpTimer_IT+0x180>)
 80024ea:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80024ee:	6093      	str	r3, [r2, #8]

  /* Configure the interrupt in the RTC_CR register */
  __HAL_RTC_WAKEUPTIMER_ENABLE_IT(hrtc, RTC_IT_WUT);
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	689a      	ldr	r2, [r3, #8]
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80024fe:	609a      	str	r2, [r3, #8]

  /* Enable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	689a      	ldr	r2, [r3, #8]
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800250e:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	22ff      	movs	r2, #255	@ 0xff
 8002516:	625a      	str	r2, [r3, #36]	@ 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	2201      	movs	r2, #1
 800251c:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	2200      	movs	r2, #0
 8002522:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 8002524:	2300      	movs	r3, #0
}
 8002526:	4618      	mov	r0, r3
 8002528:	371c      	adds	r7, #28
 800252a:	46bd      	mov	sp, r7
 800252c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002530:	4770      	bx	lr
 8002532:	bf00      	nop
 8002534:	20000000 	.word	0x20000000
 8002538:	10624dd3 	.word	0x10624dd3
 800253c:	40013c00 	.word	0x40013c00

08002540 <HAL_RTCEx_DeactivateWakeUpTimer>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_DeactivateWakeUpTimer(RTC_HandleTypeDef *hrtc)
{
 8002540:	b580      	push	{r7, lr}
 8002542:	b084      	sub	sp, #16
 8002544:	af00      	add	r7, sp, #0
 8002546:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002548:	2300      	movs	r3, #0
 800254a:	60fb      	str	r3, [r7, #12]

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	7f1b      	ldrb	r3, [r3, #28]
 8002550:	2b01      	cmp	r3, #1
 8002552:	d101      	bne.n	8002558 <HAL_RTCEx_DeactivateWakeUpTimer+0x18>
 8002554:	2302      	movs	r3, #2
 8002556:	e047      	b.n	80025e8 <HAL_RTCEx_DeactivateWakeUpTimer+0xa8>
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	2201      	movs	r2, #1
 800255c:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	2202      	movs	r2, #2
 8002562:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	22ca      	movs	r2, #202	@ 0xca
 800256a:	625a      	str	r2, [r3, #36]	@ 0x24
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	2253      	movs	r2, #83	@ 0x53
 8002572:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Disable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	689a      	ldr	r2, [r3, #8]
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002582:	609a      	str	r2, [r3, #8]

  /* In case of interrupt mode is used, the interrupt source must disabled */
  __HAL_RTC_WAKEUPTIMER_DISABLE_IT(hrtc, RTC_IT_WUT);
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	689a      	ldr	r2, [r3, #8]
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8002592:	609a      	str	r2, [r3, #8]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002594:	f7fe fbbc 	bl	8000d10 <HAL_GetTick>
 8002598:	60f8      	str	r0, [r7, #12]

  /* Wait till RTC WUTWF flag is set and if timeout is reached exit */
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 800259a:	e013      	b.n	80025c4 <HAL_RTCEx_DeactivateWakeUpTimer+0x84>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800259c:	f7fe fbb8 	bl	8000d10 <HAL_GetTick>
 80025a0:	4602      	mov	r2, r0
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	1ad3      	subs	r3, r2, r3
 80025a6:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80025aa:	d90b      	bls.n	80025c4 <HAL_RTCEx_DeactivateWakeUpTimer+0x84>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	22ff      	movs	r2, #255	@ 0xff
 80025b2:	625a      	str	r2, [r3, #36]	@ 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	2203      	movs	r2, #3
 80025b8:	775a      	strb	r2, [r3, #29]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	2200      	movs	r2, #0
 80025be:	771a      	strb	r2, [r3, #28]

      return HAL_TIMEOUT;
 80025c0:	2303      	movs	r3, #3
 80025c2:	e011      	b.n	80025e8 <HAL_RTCEx_DeactivateWakeUpTimer+0xa8>
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	68db      	ldr	r3, [r3, #12]
 80025ca:	f003 0304 	and.w	r3, r3, #4
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d0e4      	beq.n	800259c <HAL_RTCEx_DeactivateWakeUpTimer+0x5c>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	22ff      	movs	r2, #255	@ 0xff
 80025d8:	625a      	str	r2, [r3, #36]	@ 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	2201      	movs	r2, #1
 80025de:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	2200      	movs	r2, #0
 80025e4:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 80025e6:	2300      	movs	r3, #0
}
 80025e8:	4618      	mov	r0, r3
 80025ea:	3710      	adds	r7, #16
 80025ec:	46bd      	mov	sp, r7
 80025ee:	bd80      	pop	{r7, pc}

080025f0 <HAL_RTCEx_WakeUpTimerIRQHandler>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
void HAL_RTCEx_WakeUpTimerIRQHandler(RTC_HandleTypeDef *hrtc)
{
 80025f0:	b580      	push	{r7, lr}
 80025f2:	b082      	sub	sp, #8
 80025f4:	af00      	add	r7, sp, #0
 80025f6:	6078      	str	r0, [r7, #4]
  /* Clear the EXTI's line Flag for RTC WakeUpTimer */
  __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG();
 80025f8:	4b0e      	ldr	r3, [pc, #56]	@ (8002634 <HAL_RTCEx_WakeUpTimerIRQHandler+0x44>)
 80025fa:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 80025fe:	615a      	str	r2, [r3, #20]

  /* Get the pending status of the Wakeup timer Interrupt */
  if (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTF) != 0U)
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	68db      	ldr	r3, [r3, #12]
 8002606:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800260a:	2b00      	cmp	r3, #0
 800260c:	d00b      	beq.n	8002626 <HAL_RTCEx_WakeUpTimerIRQHandler+0x36>
  {
    /* Clear the Wakeup timer interrupt pending bit */
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	68db      	ldr	r3, [r3, #12]
 8002614:	b2da      	uxtb	r2, r3
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	f462 6290 	orn	r2, r2, #1152	@ 0x480
 800261e:	60da      	str	r2, [r3, #12]

    /* Wakeup timer callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    hrtc->WakeUpTimerEventCallback(hrtc);
#else
    HAL_RTCEx_WakeUpTimerEventCallback(hrtc);
 8002620:	6878      	ldr	r0, [r7, #4]
 8002622:	f000 f809 	bl	8002638 <HAL_RTCEx_WakeUpTimerEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	2201      	movs	r2, #1
 800262a:	775a      	strb	r2, [r3, #29]
}
 800262c:	bf00      	nop
 800262e:	3708      	adds	r7, #8
 8002630:	46bd      	mov	sp, r7
 8002632:	bd80      	pop	{r7, pc}
 8002634:	40013c00 	.word	0x40013c00

08002638 <HAL_RTCEx_WakeUpTimerEventCallback>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTCEx_WakeUpTimerEventCallback(RTC_HandleTypeDef *hrtc)
{
 8002638:	b480      	push	{r7}
 800263a:	b083      	sub	sp, #12
 800263c:	af00      	add	r7, sp, #0
 800263e:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_RTCEx_WakeUpTimerEventCallback could be implemented in the user file
   */
}
 8002640:	bf00      	nop
 8002642:	370c      	adds	r7, #12
 8002644:	46bd      	mov	sp, r7
 8002646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800264a:	4770      	bx	lr

0800264c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800264c:	b580      	push	{r7, lr}
 800264e:	b082      	sub	sp, #8
 8002650:	af00      	add	r7, sp, #0
 8002652:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	2b00      	cmp	r3, #0
 8002658:	d101      	bne.n	800265e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800265a:	2301      	movs	r3, #1
 800265c:	e042      	b.n	80026e4 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002664:	b2db      	uxtb	r3, r3
 8002666:	2b00      	cmp	r3, #0
 8002668:	d106      	bne.n	8002678 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	2200      	movs	r2, #0
 800266e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002672:	6878      	ldr	r0, [r7, #4]
 8002674:	f7fe f9b6 	bl	80009e4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	2224      	movs	r2, #36	@ 0x24
 800267c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	68da      	ldr	r2, [r3, #12]
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800268e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002690:	6878      	ldr	r0, [r7, #4]
 8002692:	f000 f973 	bl	800297c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	691a      	ldr	r2, [r3, #16]
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80026a4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	695a      	ldr	r2, [r3, #20]
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80026b4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	68da      	ldr	r2, [r3, #12]
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80026c4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	2200      	movs	r2, #0
 80026ca:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	2220      	movs	r2, #32
 80026d0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	2220      	movs	r2, #32
 80026d8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	2200      	movs	r2, #0
 80026e0:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80026e2:	2300      	movs	r3, #0
}
 80026e4:	4618      	mov	r0, r3
 80026e6:	3708      	adds	r7, #8
 80026e8:	46bd      	mov	sp, r7
 80026ea:	bd80      	pop	{r7, pc}

080026ec <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80026ec:	b580      	push	{r7, lr}
 80026ee:	b08a      	sub	sp, #40	@ 0x28
 80026f0:	af02      	add	r7, sp, #8
 80026f2:	60f8      	str	r0, [r7, #12]
 80026f4:	60b9      	str	r1, [r7, #8]
 80026f6:	603b      	str	r3, [r7, #0]
 80026f8:	4613      	mov	r3, r2
 80026fa:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80026fc:	2300      	movs	r3, #0
 80026fe:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002706:	b2db      	uxtb	r3, r3
 8002708:	2b20      	cmp	r3, #32
 800270a:	d175      	bne.n	80027f8 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 800270c:	68bb      	ldr	r3, [r7, #8]
 800270e:	2b00      	cmp	r3, #0
 8002710:	d002      	beq.n	8002718 <HAL_UART_Transmit+0x2c>
 8002712:	88fb      	ldrh	r3, [r7, #6]
 8002714:	2b00      	cmp	r3, #0
 8002716:	d101      	bne.n	800271c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002718:	2301      	movs	r3, #1
 800271a:	e06e      	b.n	80027fa <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	2200      	movs	r2, #0
 8002720:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	2221      	movs	r2, #33	@ 0x21
 8002726:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800272a:	f7fe faf1 	bl	8000d10 <HAL_GetTick>
 800272e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	88fa      	ldrh	r2, [r7, #6]
 8002734:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	88fa      	ldrh	r2, [r7, #6]
 800273a:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	689b      	ldr	r3, [r3, #8]
 8002740:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002744:	d108      	bne.n	8002758 <HAL_UART_Transmit+0x6c>
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	691b      	ldr	r3, [r3, #16]
 800274a:	2b00      	cmp	r3, #0
 800274c:	d104      	bne.n	8002758 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800274e:	2300      	movs	r3, #0
 8002750:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002752:	68bb      	ldr	r3, [r7, #8]
 8002754:	61bb      	str	r3, [r7, #24]
 8002756:	e003      	b.n	8002760 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8002758:	68bb      	ldr	r3, [r7, #8]
 800275a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800275c:	2300      	movs	r3, #0
 800275e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002760:	e02e      	b.n	80027c0 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002762:	683b      	ldr	r3, [r7, #0]
 8002764:	9300      	str	r3, [sp, #0]
 8002766:	697b      	ldr	r3, [r7, #20]
 8002768:	2200      	movs	r2, #0
 800276a:	2180      	movs	r1, #128	@ 0x80
 800276c:	68f8      	ldr	r0, [r7, #12]
 800276e:	f000 f848 	bl	8002802 <UART_WaitOnFlagUntilTimeout>
 8002772:	4603      	mov	r3, r0
 8002774:	2b00      	cmp	r3, #0
 8002776:	d005      	beq.n	8002784 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	2220      	movs	r2, #32
 800277c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8002780:	2303      	movs	r3, #3
 8002782:	e03a      	b.n	80027fa <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8002784:	69fb      	ldr	r3, [r7, #28]
 8002786:	2b00      	cmp	r3, #0
 8002788:	d10b      	bne.n	80027a2 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800278a:	69bb      	ldr	r3, [r7, #24]
 800278c:	881b      	ldrh	r3, [r3, #0]
 800278e:	461a      	mov	r2, r3
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002798:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800279a:	69bb      	ldr	r3, [r7, #24]
 800279c:	3302      	adds	r3, #2
 800279e:	61bb      	str	r3, [r7, #24]
 80027a0:	e007      	b.n	80027b2 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80027a2:	69fb      	ldr	r3, [r7, #28]
 80027a4:	781a      	ldrb	r2, [r3, #0]
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80027ac:	69fb      	ldr	r3, [r7, #28]
 80027ae:	3301      	adds	r3, #1
 80027b0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80027b6:	b29b      	uxth	r3, r3
 80027b8:	3b01      	subs	r3, #1
 80027ba:	b29a      	uxth	r2, r3
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80027c4:	b29b      	uxth	r3, r3
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d1cb      	bne.n	8002762 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80027ca:	683b      	ldr	r3, [r7, #0]
 80027cc:	9300      	str	r3, [sp, #0]
 80027ce:	697b      	ldr	r3, [r7, #20]
 80027d0:	2200      	movs	r2, #0
 80027d2:	2140      	movs	r1, #64	@ 0x40
 80027d4:	68f8      	ldr	r0, [r7, #12]
 80027d6:	f000 f814 	bl	8002802 <UART_WaitOnFlagUntilTimeout>
 80027da:	4603      	mov	r3, r0
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d005      	beq.n	80027ec <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	2220      	movs	r2, #32
 80027e4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 80027e8:	2303      	movs	r3, #3
 80027ea:	e006      	b.n	80027fa <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	2220      	movs	r2, #32
 80027f0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 80027f4:	2300      	movs	r3, #0
 80027f6:	e000      	b.n	80027fa <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80027f8:	2302      	movs	r3, #2
  }
}
 80027fa:	4618      	mov	r0, r3
 80027fc:	3720      	adds	r7, #32
 80027fe:	46bd      	mov	sp, r7
 8002800:	bd80      	pop	{r7, pc}

08002802 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002802:	b580      	push	{r7, lr}
 8002804:	b086      	sub	sp, #24
 8002806:	af00      	add	r7, sp, #0
 8002808:	60f8      	str	r0, [r7, #12]
 800280a:	60b9      	str	r1, [r7, #8]
 800280c:	603b      	str	r3, [r7, #0]
 800280e:	4613      	mov	r3, r2
 8002810:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002812:	e03b      	b.n	800288c <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002814:	6a3b      	ldr	r3, [r7, #32]
 8002816:	f1b3 3fff 	cmp.w	r3, #4294967295
 800281a:	d037      	beq.n	800288c <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800281c:	f7fe fa78 	bl	8000d10 <HAL_GetTick>
 8002820:	4602      	mov	r2, r0
 8002822:	683b      	ldr	r3, [r7, #0]
 8002824:	1ad3      	subs	r3, r2, r3
 8002826:	6a3a      	ldr	r2, [r7, #32]
 8002828:	429a      	cmp	r2, r3
 800282a:	d302      	bcc.n	8002832 <UART_WaitOnFlagUntilTimeout+0x30>
 800282c:	6a3b      	ldr	r3, [r7, #32]
 800282e:	2b00      	cmp	r3, #0
 8002830:	d101      	bne.n	8002836 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8002832:	2303      	movs	r3, #3
 8002834:	e03a      	b.n	80028ac <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	68db      	ldr	r3, [r3, #12]
 800283c:	f003 0304 	and.w	r3, r3, #4
 8002840:	2b00      	cmp	r3, #0
 8002842:	d023      	beq.n	800288c <UART_WaitOnFlagUntilTimeout+0x8a>
 8002844:	68bb      	ldr	r3, [r7, #8]
 8002846:	2b80      	cmp	r3, #128	@ 0x80
 8002848:	d020      	beq.n	800288c <UART_WaitOnFlagUntilTimeout+0x8a>
 800284a:	68bb      	ldr	r3, [r7, #8]
 800284c:	2b40      	cmp	r3, #64	@ 0x40
 800284e:	d01d      	beq.n	800288c <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	f003 0308 	and.w	r3, r3, #8
 800285a:	2b08      	cmp	r3, #8
 800285c:	d116      	bne.n	800288c <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 800285e:	2300      	movs	r3, #0
 8002860:	617b      	str	r3, [r7, #20]
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	617b      	str	r3, [r7, #20]
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	685b      	ldr	r3, [r3, #4]
 8002870:	617b      	str	r3, [r7, #20]
 8002872:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002874:	68f8      	ldr	r0, [r7, #12]
 8002876:	f000 f81d 	bl	80028b4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	2208      	movs	r2, #8
 800287e:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	2200      	movs	r2, #0
 8002884:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8002888:	2301      	movs	r3, #1
 800288a:	e00f      	b.n	80028ac <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	681a      	ldr	r2, [r3, #0]
 8002892:	68bb      	ldr	r3, [r7, #8]
 8002894:	4013      	ands	r3, r2
 8002896:	68ba      	ldr	r2, [r7, #8]
 8002898:	429a      	cmp	r2, r3
 800289a:	bf0c      	ite	eq
 800289c:	2301      	moveq	r3, #1
 800289e:	2300      	movne	r3, #0
 80028a0:	b2db      	uxtb	r3, r3
 80028a2:	461a      	mov	r2, r3
 80028a4:	79fb      	ldrb	r3, [r7, #7]
 80028a6:	429a      	cmp	r2, r3
 80028a8:	d0b4      	beq.n	8002814 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80028aa:	2300      	movs	r3, #0
}
 80028ac:	4618      	mov	r0, r3
 80028ae:	3718      	adds	r7, #24
 80028b0:	46bd      	mov	sp, r7
 80028b2:	bd80      	pop	{r7, pc}

080028b4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80028b4:	b480      	push	{r7}
 80028b6:	b095      	sub	sp, #84	@ 0x54
 80028b8:	af00      	add	r7, sp, #0
 80028ba:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	330c      	adds	r3, #12
 80028c2:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80028c4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80028c6:	e853 3f00 	ldrex	r3, [r3]
 80028ca:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80028cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80028ce:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80028d2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	330c      	adds	r3, #12
 80028da:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80028dc:	643a      	str	r2, [r7, #64]	@ 0x40
 80028de:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80028e0:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80028e2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80028e4:	e841 2300 	strex	r3, r2, [r1]
 80028e8:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80028ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d1e5      	bne.n	80028bc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	3314      	adds	r3, #20
 80028f6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80028f8:	6a3b      	ldr	r3, [r7, #32]
 80028fa:	e853 3f00 	ldrex	r3, [r3]
 80028fe:	61fb      	str	r3, [r7, #28]
   return(result);
 8002900:	69fb      	ldr	r3, [r7, #28]
 8002902:	f023 0301 	bic.w	r3, r3, #1
 8002906:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	3314      	adds	r3, #20
 800290e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002910:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002912:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002914:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002916:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002918:	e841 2300 	strex	r3, r2, [r1]
 800291c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800291e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002920:	2b00      	cmp	r3, #0
 8002922:	d1e5      	bne.n	80028f0 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002928:	2b01      	cmp	r3, #1
 800292a:	d119      	bne.n	8002960 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	330c      	adds	r3, #12
 8002932:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	e853 3f00 	ldrex	r3, [r3]
 800293a:	60bb      	str	r3, [r7, #8]
   return(result);
 800293c:	68bb      	ldr	r3, [r7, #8]
 800293e:	f023 0310 	bic.w	r3, r3, #16
 8002942:	647b      	str	r3, [r7, #68]	@ 0x44
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	330c      	adds	r3, #12
 800294a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800294c:	61ba      	str	r2, [r7, #24]
 800294e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002950:	6979      	ldr	r1, [r7, #20]
 8002952:	69ba      	ldr	r2, [r7, #24]
 8002954:	e841 2300 	strex	r3, r2, [r1]
 8002958:	613b      	str	r3, [r7, #16]
   return(result);
 800295a:	693b      	ldr	r3, [r7, #16]
 800295c:	2b00      	cmp	r3, #0
 800295e:	d1e5      	bne.n	800292c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	2220      	movs	r2, #32
 8002964:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	2200      	movs	r2, #0
 800296c:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800296e:	bf00      	nop
 8002970:	3754      	adds	r7, #84	@ 0x54
 8002972:	46bd      	mov	sp, r7
 8002974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002978:	4770      	bx	lr
	...

0800297c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800297c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002980:	b0c0      	sub	sp, #256	@ 0x100
 8002982:	af00      	add	r7, sp, #0
 8002984:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002988:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	691b      	ldr	r3, [r3, #16]
 8002990:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8002994:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002998:	68d9      	ldr	r1, [r3, #12]
 800299a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800299e:	681a      	ldr	r2, [r3, #0]
 80029a0:	ea40 0301 	orr.w	r3, r0, r1
 80029a4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80029a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80029aa:	689a      	ldr	r2, [r3, #8]
 80029ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80029b0:	691b      	ldr	r3, [r3, #16]
 80029b2:	431a      	orrs	r2, r3
 80029b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80029b8:	695b      	ldr	r3, [r3, #20]
 80029ba:	431a      	orrs	r2, r3
 80029bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80029c0:	69db      	ldr	r3, [r3, #28]
 80029c2:	4313      	orrs	r3, r2
 80029c4:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80029c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	68db      	ldr	r3, [r3, #12]
 80029d0:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80029d4:	f021 010c 	bic.w	r1, r1, #12
 80029d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80029dc:	681a      	ldr	r2, [r3, #0]
 80029de:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80029e2:	430b      	orrs	r3, r1
 80029e4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80029e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	695b      	ldr	r3, [r3, #20]
 80029ee:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80029f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80029f6:	6999      	ldr	r1, [r3, #24]
 80029f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80029fc:	681a      	ldr	r2, [r3, #0]
 80029fe:	ea40 0301 	orr.w	r3, r0, r1
 8002a02:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002a04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002a08:	681a      	ldr	r2, [r3, #0]
 8002a0a:	4b8f      	ldr	r3, [pc, #572]	@ (8002c48 <UART_SetConfig+0x2cc>)
 8002a0c:	429a      	cmp	r2, r3
 8002a0e:	d005      	beq.n	8002a1c <UART_SetConfig+0xa0>
 8002a10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002a14:	681a      	ldr	r2, [r3, #0]
 8002a16:	4b8d      	ldr	r3, [pc, #564]	@ (8002c4c <UART_SetConfig+0x2d0>)
 8002a18:	429a      	cmp	r2, r3
 8002a1a:	d104      	bne.n	8002a26 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002a1c:	f7ff f98a 	bl	8001d34 <HAL_RCC_GetPCLK2Freq>
 8002a20:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8002a24:	e003      	b.n	8002a2e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002a26:	f7ff f971 	bl	8001d0c <HAL_RCC_GetPCLK1Freq>
 8002a2a:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002a2e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002a32:	69db      	ldr	r3, [r3, #28]
 8002a34:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002a38:	f040 810c 	bne.w	8002c54 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002a3c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002a40:	2200      	movs	r2, #0
 8002a42:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8002a46:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8002a4a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8002a4e:	4622      	mov	r2, r4
 8002a50:	462b      	mov	r3, r5
 8002a52:	1891      	adds	r1, r2, r2
 8002a54:	65b9      	str	r1, [r7, #88]	@ 0x58
 8002a56:	415b      	adcs	r3, r3
 8002a58:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002a5a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8002a5e:	4621      	mov	r1, r4
 8002a60:	eb12 0801 	adds.w	r8, r2, r1
 8002a64:	4629      	mov	r1, r5
 8002a66:	eb43 0901 	adc.w	r9, r3, r1
 8002a6a:	f04f 0200 	mov.w	r2, #0
 8002a6e:	f04f 0300 	mov.w	r3, #0
 8002a72:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002a76:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002a7a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002a7e:	4690      	mov	r8, r2
 8002a80:	4699      	mov	r9, r3
 8002a82:	4623      	mov	r3, r4
 8002a84:	eb18 0303 	adds.w	r3, r8, r3
 8002a88:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8002a8c:	462b      	mov	r3, r5
 8002a8e:	eb49 0303 	adc.w	r3, r9, r3
 8002a92:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8002a96:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002a9a:	685b      	ldr	r3, [r3, #4]
 8002a9c:	2200      	movs	r2, #0
 8002a9e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8002aa2:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8002aa6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8002aaa:	460b      	mov	r3, r1
 8002aac:	18db      	adds	r3, r3, r3
 8002aae:	653b      	str	r3, [r7, #80]	@ 0x50
 8002ab0:	4613      	mov	r3, r2
 8002ab2:	eb42 0303 	adc.w	r3, r2, r3
 8002ab6:	657b      	str	r3, [r7, #84]	@ 0x54
 8002ab8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8002abc:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8002ac0:	f7fd fbe6 	bl	8000290 <__aeabi_uldivmod>
 8002ac4:	4602      	mov	r2, r0
 8002ac6:	460b      	mov	r3, r1
 8002ac8:	4b61      	ldr	r3, [pc, #388]	@ (8002c50 <UART_SetConfig+0x2d4>)
 8002aca:	fba3 2302 	umull	r2, r3, r3, r2
 8002ace:	095b      	lsrs	r3, r3, #5
 8002ad0:	011c      	lsls	r4, r3, #4
 8002ad2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002ad6:	2200      	movs	r2, #0
 8002ad8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8002adc:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8002ae0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8002ae4:	4642      	mov	r2, r8
 8002ae6:	464b      	mov	r3, r9
 8002ae8:	1891      	adds	r1, r2, r2
 8002aea:	64b9      	str	r1, [r7, #72]	@ 0x48
 8002aec:	415b      	adcs	r3, r3
 8002aee:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002af0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8002af4:	4641      	mov	r1, r8
 8002af6:	eb12 0a01 	adds.w	sl, r2, r1
 8002afa:	4649      	mov	r1, r9
 8002afc:	eb43 0b01 	adc.w	fp, r3, r1
 8002b00:	f04f 0200 	mov.w	r2, #0
 8002b04:	f04f 0300 	mov.w	r3, #0
 8002b08:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002b0c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002b10:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002b14:	4692      	mov	sl, r2
 8002b16:	469b      	mov	fp, r3
 8002b18:	4643      	mov	r3, r8
 8002b1a:	eb1a 0303 	adds.w	r3, sl, r3
 8002b1e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8002b22:	464b      	mov	r3, r9
 8002b24:	eb4b 0303 	adc.w	r3, fp, r3
 8002b28:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8002b2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002b30:	685b      	ldr	r3, [r3, #4]
 8002b32:	2200      	movs	r2, #0
 8002b34:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8002b38:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8002b3c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8002b40:	460b      	mov	r3, r1
 8002b42:	18db      	adds	r3, r3, r3
 8002b44:	643b      	str	r3, [r7, #64]	@ 0x40
 8002b46:	4613      	mov	r3, r2
 8002b48:	eb42 0303 	adc.w	r3, r2, r3
 8002b4c:	647b      	str	r3, [r7, #68]	@ 0x44
 8002b4e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8002b52:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8002b56:	f7fd fb9b 	bl	8000290 <__aeabi_uldivmod>
 8002b5a:	4602      	mov	r2, r0
 8002b5c:	460b      	mov	r3, r1
 8002b5e:	4611      	mov	r1, r2
 8002b60:	4b3b      	ldr	r3, [pc, #236]	@ (8002c50 <UART_SetConfig+0x2d4>)
 8002b62:	fba3 2301 	umull	r2, r3, r3, r1
 8002b66:	095b      	lsrs	r3, r3, #5
 8002b68:	2264      	movs	r2, #100	@ 0x64
 8002b6a:	fb02 f303 	mul.w	r3, r2, r3
 8002b6e:	1acb      	subs	r3, r1, r3
 8002b70:	00db      	lsls	r3, r3, #3
 8002b72:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8002b76:	4b36      	ldr	r3, [pc, #216]	@ (8002c50 <UART_SetConfig+0x2d4>)
 8002b78:	fba3 2302 	umull	r2, r3, r3, r2
 8002b7c:	095b      	lsrs	r3, r3, #5
 8002b7e:	005b      	lsls	r3, r3, #1
 8002b80:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8002b84:	441c      	add	r4, r3
 8002b86:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002b8a:	2200      	movs	r2, #0
 8002b8c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8002b90:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8002b94:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8002b98:	4642      	mov	r2, r8
 8002b9a:	464b      	mov	r3, r9
 8002b9c:	1891      	adds	r1, r2, r2
 8002b9e:	63b9      	str	r1, [r7, #56]	@ 0x38
 8002ba0:	415b      	adcs	r3, r3
 8002ba2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002ba4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8002ba8:	4641      	mov	r1, r8
 8002baa:	1851      	adds	r1, r2, r1
 8002bac:	6339      	str	r1, [r7, #48]	@ 0x30
 8002bae:	4649      	mov	r1, r9
 8002bb0:	414b      	adcs	r3, r1
 8002bb2:	637b      	str	r3, [r7, #52]	@ 0x34
 8002bb4:	f04f 0200 	mov.w	r2, #0
 8002bb8:	f04f 0300 	mov.w	r3, #0
 8002bbc:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8002bc0:	4659      	mov	r1, fp
 8002bc2:	00cb      	lsls	r3, r1, #3
 8002bc4:	4651      	mov	r1, sl
 8002bc6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002bca:	4651      	mov	r1, sl
 8002bcc:	00ca      	lsls	r2, r1, #3
 8002bce:	4610      	mov	r0, r2
 8002bd0:	4619      	mov	r1, r3
 8002bd2:	4603      	mov	r3, r0
 8002bd4:	4642      	mov	r2, r8
 8002bd6:	189b      	adds	r3, r3, r2
 8002bd8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8002bdc:	464b      	mov	r3, r9
 8002bde:	460a      	mov	r2, r1
 8002be0:	eb42 0303 	adc.w	r3, r2, r3
 8002be4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002be8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002bec:	685b      	ldr	r3, [r3, #4]
 8002bee:	2200      	movs	r2, #0
 8002bf0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8002bf4:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8002bf8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8002bfc:	460b      	mov	r3, r1
 8002bfe:	18db      	adds	r3, r3, r3
 8002c00:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002c02:	4613      	mov	r3, r2
 8002c04:	eb42 0303 	adc.w	r3, r2, r3
 8002c08:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002c0a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002c0e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8002c12:	f7fd fb3d 	bl	8000290 <__aeabi_uldivmod>
 8002c16:	4602      	mov	r2, r0
 8002c18:	460b      	mov	r3, r1
 8002c1a:	4b0d      	ldr	r3, [pc, #52]	@ (8002c50 <UART_SetConfig+0x2d4>)
 8002c1c:	fba3 1302 	umull	r1, r3, r3, r2
 8002c20:	095b      	lsrs	r3, r3, #5
 8002c22:	2164      	movs	r1, #100	@ 0x64
 8002c24:	fb01 f303 	mul.w	r3, r1, r3
 8002c28:	1ad3      	subs	r3, r2, r3
 8002c2a:	00db      	lsls	r3, r3, #3
 8002c2c:	3332      	adds	r3, #50	@ 0x32
 8002c2e:	4a08      	ldr	r2, [pc, #32]	@ (8002c50 <UART_SetConfig+0x2d4>)
 8002c30:	fba2 2303 	umull	r2, r3, r2, r3
 8002c34:	095b      	lsrs	r3, r3, #5
 8002c36:	f003 0207 	and.w	r2, r3, #7
 8002c3a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	4422      	add	r2, r4
 8002c42:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002c44:	e106      	b.n	8002e54 <UART_SetConfig+0x4d8>
 8002c46:	bf00      	nop
 8002c48:	40011000 	.word	0x40011000
 8002c4c:	40011400 	.word	0x40011400
 8002c50:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002c54:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002c58:	2200      	movs	r2, #0
 8002c5a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8002c5e:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8002c62:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8002c66:	4642      	mov	r2, r8
 8002c68:	464b      	mov	r3, r9
 8002c6a:	1891      	adds	r1, r2, r2
 8002c6c:	6239      	str	r1, [r7, #32]
 8002c6e:	415b      	adcs	r3, r3
 8002c70:	627b      	str	r3, [r7, #36]	@ 0x24
 8002c72:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002c76:	4641      	mov	r1, r8
 8002c78:	1854      	adds	r4, r2, r1
 8002c7a:	4649      	mov	r1, r9
 8002c7c:	eb43 0501 	adc.w	r5, r3, r1
 8002c80:	f04f 0200 	mov.w	r2, #0
 8002c84:	f04f 0300 	mov.w	r3, #0
 8002c88:	00eb      	lsls	r3, r5, #3
 8002c8a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002c8e:	00e2      	lsls	r2, r4, #3
 8002c90:	4614      	mov	r4, r2
 8002c92:	461d      	mov	r5, r3
 8002c94:	4643      	mov	r3, r8
 8002c96:	18e3      	adds	r3, r4, r3
 8002c98:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8002c9c:	464b      	mov	r3, r9
 8002c9e:	eb45 0303 	adc.w	r3, r5, r3
 8002ca2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8002ca6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002caa:	685b      	ldr	r3, [r3, #4]
 8002cac:	2200      	movs	r2, #0
 8002cae:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8002cb2:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8002cb6:	f04f 0200 	mov.w	r2, #0
 8002cba:	f04f 0300 	mov.w	r3, #0
 8002cbe:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8002cc2:	4629      	mov	r1, r5
 8002cc4:	008b      	lsls	r3, r1, #2
 8002cc6:	4621      	mov	r1, r4
 8002cc8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002ccc:	4621      	mov	r1, r4
 8002cce:	008a      	lsls	r2, r1, #2
 8002cd0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8002cd4:	f7fd fadc 	bl	8000290 <__aeabi_uldivmod>
 8002cd8:	4602      	mov	r2, r0
 8002cda:	460b      	mov	r3, r1
 8002cdc:	4b60      	ldr	r3, [pc, #384]	@ (8002e60 <UART_SetConfig+0x4e4>)
 8002cde:	fba3 2302 	umull	r2, r3, r3, r2
 8002ce2:	095b      	lsrs	r3, r3, #5
 8002ce4:	011c      	lsls	r4, r3, #4
 8002ce6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002cea:	2200      	movs	r2, #0
 8002cec:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8002cf0:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8002cf4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8002cf8:	4642      	mov	r2, r8
 8002cfa:	464b      	mov	r3, r9
 8002cfc:	1891      	adds	r1, r2, r2
 8002cfe:	61b9      	str	r1, [r7, #24]
 8002d00:	415b      	adcs	r3, r3
 8002d02:	61fb      	str	r3, [r7, #28]
 8002d04:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002d08:	4641      	mov	r1, r8
 8002d0a:	1851      	adds	r1, r2, r1
 8002d0c:	6139      	str	r1, [r7, #16]
 8002d0e:	4649      	mov	r1, r9
 8002d10:	414b      	adcs	r3, r1
 8002d12:	617b      	str	r3, [r7, #20]
 8002d14:	f04f 0200 	mov.w	r2, #0
 8002d18:	f04f 0300 	mov.w	r3, #0
 8002d1c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002d20:	4659      	mov	r1, fp
 8002d22:	00cb      	lsls	r3, r1, #3
 8002d24:	4651      	mov	r1, sl
 8002d26:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002d2a:	4651      	mov	r1, sl
 8002d2c:	00ca      	lsls	r2, r1, #3
 8002d2e:	4610      	mov	r0, r2
 8002d30:	4619      	mov	r1, r3
 8002d32:	4603      	mov	r3, r0
 8002d34:	4642      	mov	r2, r8
 8002d36:	189b      	adds	r3, r3, r2
 8002d38:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8002d3c:	464b      	mov	r3, r9
 8002d3e:	460a      	mov	r2, r1
 8002d40:	eb42 0303 	adc.w	r3, r2, r3
 8002d44:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8002d48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002d4c:	685b      	ldr	r3, [r3, #4]
 8002d4e:	2200      	movs	r2, #0
 8002d50:	67bb      	str	r3, [r7, #120]	@ 0x78
 8002d52:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8002d54:	f04f 0200 	mov.w	r2, #0
 8002d58:	f04f 0300 	mov.w	r3, #0
 8002d5c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8002d60:	4649      	mov	r1, r9
 8002d62:	008b      	lsls	r3, r1, #2
 8002d64:	4641      	mov	r1, r8
 8002d66:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002d6a:	4641      	mov	r1, r8
 8002d6c:	008a      	lsls	r2, r1, #2
 8002d6e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8002d72:	f7fd fa8d 	bl	8000290 <__aeabi_uldivmod>
 8002d76:	4602      	mov	r2, r0
 8002d78:	460b      	mov	r3, r1
 8002d7a:	4611      	mov	r1, r2
 8002d7c:	4b38      	ldr	r3, [pc, #224]	@ (8002e60 <UART_SetConfig+0x4e4>)
 8002d7e:	fba3 2301 	umull	r2, r3, r3, r1
 8002d82:	095b      	lsrs	r3, r3, #5
 8002d84:	2264      	movs	r2, #100	@ 0x64
 8002d86:	fb02 f303 	mul.w	r3, r2, r3
 8002d8a:	1acb      	subs	r3, r1, r3
 8002d8c:	011b      	lsls	r3, r3, #4
 8002d8e:	3332      	adds	r3, #50	@ 0x32
 8002d90:	4a33      	ldr	r2, [pc, #204]	@ (8002e60 <UART_SetConfig+0x4e4>)
 8002d92:	fba2 2303 	umull	r2, r3, r2, r3
 8002d96:	095b      	lsrs	r3, r3, #5
 8002d98:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002d9c:	441c      	add	r4, r3
 8002d9e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002da2:	2200      	movs	r2, #0
 8002da4:	673b      	str	r3, [r7, #112]	@ 0x70
 8002da6:	677a      	str	r2, [r7, #116]	@ 0x74
 8002da8:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8002dac:	4642      	mov	r2, r8
 8002dae:	464b      	mov	r3, r9
 8002db0:	1891      	adds	r1, r2, r2
 8002db2:	60b9      	str	r1, [r7, #8]
 8002db4:	415b      	adcs	r3, r3
 8002db6:	60fb      	str	r3, [r7, #12]
 8002db8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002dbc:	4641      	mov	r1, r8
 8002dbe:	1851      	adds	r1, r2, r1
 8002dc0:	6039      	str	r1, [r7, #0]
 8002dc2:	4649      	mov	r1, r9
 8002dc4:	414b      	adcs	r3, r1
 8002dc6:	607b      	str	r3, [r7, #4]
 8002dc8:	f04f 0200 	mov.w	r2, #0
 8002dcc:	f04f 0300 	mov.w	r3, #0
 8002dd0:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8002dd4:	4659      	mov	r1, fp
 8002dd6:	00cb      	lsls	r3, r1, #3
 8002dd8:	4651      	mov	r1, sl
 8002dda:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002dde:	4651      	mov	r1, sl
 8002de0:	00ca      	lsls	r2, r1, #3
 8002de2:	4610      	mov	r0, r2
 8002de4:	4619      	mov	r1, r3
 8002de6:	4603      	mov	r3, r0
 8002de8:	4642      	mov	r2, r8
 8002dea:	189b      	adds	r3, r3, r2
 8002dec:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002dee:	464b      	mov	r3, r9
 8002df0:	460a      	mov	r2, r1
 8002df2:	eb42 0303 	adc.w	r3, r2, r3
 8002df6:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8002df8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002dfc:	685b      	ldr	r3, [r3, #4]
 8002dfe:	2200      	movs	r2, #0
 8002e00:	663b      	str	r3, [r7, #96]	@ 0x60
 8002e02:	667a      	str	r2, [r7, #100]	@ 0x64
 8002e04:	f04f 0200 	mov.w	r2, #0
 8002e08:	f04f 0300 	mov.w	r3, #0
 8002e0c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8002e10:	4649      	mov	r1, r9
 8002e12:	008b      	lsls	r3, r1, #2
 8002e14:	4641      	mov	r1, r8
 8002e16:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002e1a:	4641      	mov	r1, r8
 8002e1c:	008a      	lsls	r2, r1, #2
 8002e1e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8002e22:	f7fd fa35 	bl	8000290 <__aeabi_uldivmod>
 8002e26:	4602      	mov	r2, r0
 8002e28:	460b      	mov	r3, r1
 8002e2a:	4b0d      	ldr	r3, [pc, #52]	@ (8002e60 <UART_SetConfig+0x4e4>)
 8002e2c:	fba3 1302 	umull	r1, r3, r3, r2
 8002e30:	095b      	lsrs	r3, r3, #5
 8002e32:	2164      	movs	r1, #100	@ 0x64
 8002e34:	fb01 f303 	mul.w	r3, r1, r3
 8002e38:	1ad3      	subs	r3, r2, r3
 8002e3a:	011b      	lsls	r3, r3, #4
 8002e3c:	3332      	adds	r3, #50	@ 0x32
 8002e3e:	4a08      	ldr	r2, [pc, #32]	@ (8002e60 <UART_SetConfig+0x4e4>)
 8002e40:	fba2 2303 	umull	r2, r3, r2, r3
 8002e44:	095b      	lsrs	r3, r3, #5
 8002e46:	f003 020f 	and.w	r2, r3, #15
 8002e4a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	4422      	add	r2, r4
 8002e52:	609a      	str	r2, [r3, #8]
}
 8002e54:	bf00      	nop
 8002e56:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8002e5a:	46bd      	mov	sp, r7
 8002e5c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002e60:	51eb851f 	.word	0x51eb851f

08002e64 <siprintf>:
 8002e64:	b40e      	push	{r1, r2, r3}
 8002e66:	b510      	push	{r4, lr}
 8002e68:	b09d      	sub	sp, #116	@ 0x74
 8002e6a:	ab1f      	add	r3, sp, #124	@ 0x7c
 8002e6c:	9002      	str	r0, [sp, #8]
 8002e6e:	9006      	str	r0, [sp, #24]
 8002e70:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8002e74:	480a      	ldr	r0, [pc, #40]	@ (8002ea0 <siprintf+0x3c>)
 8002e76:	9107      	str	r1, [sp, #28]
 8002e78:	9104      	str	r1, [sp, #16]
 8002e7a:	490a      	ldr	r1, [pc, #40]	@ (8002ea4 <siprintf+0x40>)
 8002e7c:	f853 2b04 	ldr.w	r2, [r3], #4
 8002e80:	9105      	str	r1, [sp, #20]
 8002e82:	2400      	movs	r4, #0
 8002e84:	a902      	add	r1, sp, #8
 8002e86:	6800      	ldr	r0, [r0, #0]
 8002e88:	9301      	str	r3, [sp, #4]
 8002e8a:	941b      	str	r4, [sp, #108]	@ 0x6c
 8002e8c:	f000 f994 	bl	80031b8 <_svfiprintf_r>
 8002e90:	9b02      	ldr	r3, [sp, #8]
 8002e92:	701c      	strb	r4, [r3, #0]
 8002e94:	b01d      	add	sp, #116	@ 0x74
 8002e96:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002e9a:	b003      	add	sp, #12
 8002e9c:	4770      	bx	lr
 8002e9e:	bf00      	nop
 8002ea0:	2000000c 	.word	0x2000000c
 8002ea4:	ffff0208 	.word	0xffff0208

08002ea8 <memset>:
 8002ea8:	4402      	add	r2, r0
 8002eaa:	4603      	mov	r3, r0
 8002eac:	4293      	cmp	r3, r2
 8002eae:	d100      	bne.n	8002eb2 <memset+0xa>
 8002eb0:	4770      	bx	lr
 8002eb2:	f803 1b01 	strb.w	r1, [r3], #1
 8002eb6:	e7f9      	b.n	8002eac <memset+0x4>

08002eb8 <__errno>:
 8002eb8:	4b01      	ldr	r3, [pc, #4]	@ (8002ec0 <__errno+0x8>)
 8002eba:	6818      	ldr	r0, [r3, #0]
 8002ebc:	4770      	bx	lr
 8002ebe:	bf00      	nop
 8002ec0:	2000000c 	.word	0x2000000c

08002ec4 <__libc_init_array>:
 8002ec4:	b570      	push	{r4, r5, r6, lr}
 8002ec6:	4d0d      	ldr	r5, [pc, #52]	@ (8002efc <__libc_init_array+0x38>)
 8002ec8:	4c0d      	ldr	r4, [pc, #52]	@ (8002f00 <__libc_init_array+0x3c>)
 8002eca:	1b64      	subs	r4, r4, r5
 8002ecc:	10a4      	asrs	r4, r4, #2
 8002ece:	2600      	movs	r6, #0
 8002ed0:	42a6      	cmp	r6, r4
 8002ed2:	d109      	bne.n	8002ee8 <__libc_init_array+0x24>
 8002ed4:	4d0b      	ldr	r5, [pc, #44]	@ (8002f04 <__libc_init_array+0x40>)
 8002ed6:	4c0c      	ldr	r4, [pc, #48]	@ (8002f08 <__libc_init_array+0x44>)
 8002ed8:	f000 fc64 	bl	80037a4 <_init>
 8002edc:	1b64      	subs	r4, r4, r5
 8002ede:	10a4      	asrs	r4, r4, #2
 8002ee0:	2600      	movs	r6, #0
 8002ee2:	42a6      	cmp	r6, r4
 8002ee4:	d105      	bne.n	8002ef2 <__libc_init_array+0x2e>
 8002ee6:	bd70      	pop	{r4, r5, r6, pc}
 8002ee8:	f855 3b04 	ldr.w	r3, [r5], #4
 8002eec:	4798      	blx	r3
 8002eee:	3601      	adds	r6, #1
 8002ef0:	e7ee      	b.n	8002ed0 <__libc_init_array+0xc>
 8002ef2:	f855 3b04 	ldr.w	r3, [r5], #4
 8002ef6:	4798      	blx	r3
 8002ef8:	3601      	adds	r6, #1
 8002efa:	e7f2      	b.n	8002ee2 <__libc_init_array+0x1e>
 8002efc:	08003890 	.word	0x08003890
 8002f00:	08003890 	.word	0x08003890
 8002f04:	08003890 	.word	0x08003890
 8002f08:	08003894 	.word	0x08003894

08002f0c <__retarget_lock_acquire_recursive>:
 8002f0c:	4770      	bx	lr

08002f0e <__retarget_lock_release_recursive>:
 8002f0e:	4770      	bx	lr

08002f10 <_free_r>:
 8002f10:	b538      	push	{r3, r4, r5, lr}
 8002f12:	4605      	mov	r5, r0
 8002f14:	2900      	cmp	r1, #0
 8002f16:	d041      	beq.n	8002f9c <_free_r+0x8c>
 8002f18:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002f1c:	1f0c      	subs	r4, r1, #4
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	bfb8      	it	lt
 8002f22:	18e4      	addlt	r4, r4, r3
 8002f24:	f000 f8e0 	bl	80030e8 <__malloc_lock>
 8002f28:	4a1d      	ldr	r2, [pc, #116]	@ (8002fa0 <_free_r+0x90>)
 8002f2a:	6813      	ldr	r3, [r2, #0]
 8002f2c:	b933      	cbnz	r3, 8002f3c <_free_r+0x2c>
 8002f2e:	6063      	str	r3, [r4, #4]
 8002f30:	6014      	str	r4, [r2, #0]
 8002f32:	4628      	mov	r0, r5
 8002f34:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002f38:	f000 b8dc 	b.w	80030f4 <__malloc_unlock>
 8002f3c:	42a3      	cmp	r3, r4
 8002f3e:	d908      	bls.n	8002f52 <_free_r+0x42>
 8002f40:	6820      	ldr	r0, [r4, #0]
 8002f42:	1821      	adds	r1, r4, r0
 8002f44:	428b      	cmp	r3, r1
 8002f46:	bf01      	itttt	eq
 8002f48:	6819      	ldreq	r1, [r3, #0]
 8002f4a:	685b      	ldreq	r3, [r3, #4]
 8002f4c:	1809      	addeq	r1, r1, r0
 8002f4e:	6021      	streq	r1, [r4, #0]
 8002f50:	e7ed      	b.n	8002f2e <_free_r+0x1e>
 8002f52:	461a      	mov	r2, r3
 8002f54:	685b      	ldr	r3, [r3, #4]
 8002f56:	b10b      	cbz	r3, 8002f5c <_free_r+0x4c>
 8002f58:	42a3      	cmp	r3, r4
 8002f5a:	d9fa      	bls.n	8002f52 <_free_r+0x42>
 8002f5c:	6811      	ldr	r1, [r2, #0]
 8002f5e:	1850      	adds	r0, r2, r1
 8002f60:	42a0      	cmp	r0, r4
 8002f62:	d10b      	bne.n	8002f7c <_free_r+0x6c>
 8002f64:	6820      	ldr	r0, [r4, #0]
 8002f66:	4401      	add	r1, r0
 8002f68:	1850      	adds	r0, r2, r1
 8002f6a:	4283      	cmp	r3, r0
 8002f6c:	6011      	str	r1, [r2, #0]
 8002f6e:	d1e0      	bne.n	8002f32 <_free_r+0x22>
 8002f70:	6818      	ldr	r0, [r3, #0]
 8002f72:	685b      	ldr	r3, [r3, #4]
 8002f74:	6053      	str	r3, [r2, #4]
 8002f76:	4408      	add	r0, r1
 8002f78:	6010      	str	r0, [r2, #0]
 8002f7a:	e7da      	b.n	8002f32 <_free_r+0x22>
 8002f7c:	d902      	bls.n	8002f84 <_free_r+0x74>
 8002f7e:	230c      	movs	r3, #12
 8002f80:	602b      	str	r3, [r5, #0]
 8002f82:	e7d6      	b.n	8002f32 <_free_r+0x22>
 8002f84:	6820      	ldr	r0, [r4, #0]
 8002f86:	1821      	adds	r1, r4, r0
 8002f88:	428b      	cmp	r3, r1
 8002f8a:	bf04      	itt	eq
 8002f8c:	6819      	ldreq	r1, [r3, #0]
 8002f8e:	685b      	ldreq	r3, [r3, #4]
 8002f90:	6063      	str	r3, [r4, #4]
 8002f92:	bf04      	itt	eq
 8002f94:	1809      	addeq	r1, r1, r0
 8002f96:	6021      	streq	r1, [r4, #0]
 8002f98:	6054      	str	r4, [r2, #4]
 8002f9a:	e7ca      	b.n	8002f32 <_free_r+0x22>
 8002f9c:	bd38      	pop	{r3, r4, r5, pc}
 8002f9e:	bf00      	nop
 8002fa0:	20000290 	.word	0x20000290

08002fa4 <sbrk_aligned>:
 8002fa4:	b570      	push	{r4, r5, r6, lr}
 8002fa6:	4e0f      	ldr	r6, [pc, #60]	@ (8002fe4 <sbrk_aligned+0x40>)
 8002fa8:	460c      	mov	r4, r1
 8002faa:	6831      	ldr	r1, [r6, #0]
 8002fac:	4605      	mov	r5, r0
 8002fae:	b911      	cbnz	r1, 8002fb6 <sbrk_aligned+0x12>
 8002fb0:	f000 fba4 	bl	80036fc <_sbrk_r>
 8002fb4:	6030      	str	r0, [r6, #0]
 8002fb6:	4621      	mov	r1, r4
 8002fb8:	4628      	mov	r0, r5
 8002fba:	f000 fb9f 	bl	80036fc <_sbrk_r>
 8002fbe:	1c43      	adds	r3, r0, #1
 8002fc0:	d103      	bne.n	8002fca <sbrk_aligned+0x26>
 8002fc2:	f04f 34ff 	mov.w	r4, #4294967295
 8002fc6:	4620      	mov	r0, r4
 8002fc8:	bd70      	pop	{r4, r5, r6, pc}
 8002fca:	1cc4      	adds	r4, r0, #3
 8002fcc:	f024 0403 	bic.w	r4, r4, #3
 8002fd0:	42a0      	cmp	r0, r4
 8002fd2:	d0f8      	beq.n	8002fc6 <sbrk_aligned+0x22>
 8002fd4:	1a21      	subs	r1, r4, r0
 8002fd6:	4628      	mov	r0, r5
 8002fd8:	f000 fb90 	bl	80036fc <_sbrk_r>
 8002fdc:	3001      	adds	r0, #1
 8002fde:	d1f2      	bne.n	8002fc6 <sbrk_aligned+0x22>
 8002fe0:	e7ef      	b.n	8002fc2 <sbrk_aligned+0x1e>
 8002fe2:	bf00      	nop
 8002fe4:	2000028c 	.word	0x2000028c

08002fe8 <_malloc_r>:
 8002fe8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002fec:	1ccd      	adds	r5, r1, #3
 8002fee:	f025 0503 	bic.w	r5, r5, #3
 8002ff2:	3508      	adds	r5, #8
 8002ff4:	2d0c      	cmp	r5, #12
 8002ff6:	bf38      	it	cc
 8002ff8:	250c      	movcc	r5, #12
 8002ffa:	2d00      	cmp	r5, #0
 8002ffc:	4606      	mov	r6, r0
 8002ffe:	db01      	blt.n	8003004 <_malloc_r+0x1c>
 8003000:	42a9      	cmp	r1, r5
 8003002:	d904      	bls.n	800300e <_malloc_r+0x26>
 8003004:	230c      	movs	r3, #12
 8003006:	6033      	str	r3, [r6, #0]
 8003008:	2000      	movs	r0, #0
 800300a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800300e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80030e4 <_malloc_r+0xfc>
 8003012:	f000 f869 	bl	80030e8 <__malloc_lock>
 8003016:	f8d8 3000 	ldr.w	r3, [r8]
 800301a:	461c      	mov	r4, r3
 800301c:	bb44      	cbnz	r4, 8003070 <_malloc_r+0x88>
 800301e:	4629      	mov	r1, r5
 8003020:	4630      	mov	r0, r6
 8003022:	f7ff ffbf 	bl	8002fa4 <sbrk_aligned>
 8003026:	1c43      	adds	r3, r0, #1
 8003028:	4604      	mov	r4, r0
 800302a:	d158      	bne.n	80030de <_malloc_r+0xf6>
 800302c:	f8d8 4000 	ldr.w	r4, [r8]
 8003030:	4627      	mov	r7, r4
 8003032:	2f00      	cmp	r7, #0
 8003034:	d143      	bne.n	80030be <_malloc_r+0xd6>
 8003036:	2c00      	cmp	r4, #0
 8003038:	d04b      	beq.n	80030d2 <_malloc_r+0xea>
 800303a:	6823      	ldr	r3, [r4, #0]
 800303c:	4639      	mov	r1, r7
 800303e:	4630      	mov	r0, r6
 8003040:	eb04 0903 	add.w	r9, r4, r3
 8003044:	f000 fb5a 	bl	80036fc <_sbrk_r>
 8003048:	4581      	cmp	r9, r0
 800304a:	d142      	bne.n	80030d2 <_malloc_r+0xea>
 800304c:	6821      	ldr	r1, [r4, #0]
 800304e:	1a6d      	subs	r5, r5, r1
 8003050:	4629      	mov	r1, r5
 8003052:	4630      	mov	r0, r6
 8003054:	f7ff ffa6 	bl	8002fa4 <sbrk_aligned>
 8003058:	3001      	adds	r0, #1
 800305a:	d03a      	beq.n	80030d2 <_malloc_r+0xea>
 800305c:	6823      	ldr	r3, [r4, #0]
 800305e:	442b      	add	r3, r5
 8003060:	6023      	str	r3, [r4, #0]
 8003062:	f8d8 3000 	ldr.w	r3, [r8]
 8003066:	685a      	ldr	r2, [r3, #4]
 8003068:	bb62      	cbnz	r2, 80030c4 <_malloc_r+0xdc>
 800306a:	f8c8 7000 	str.w	r7, [r8]
 800306e:	e00f      	b.n	8003090 <_malloc_r+0xa8>
 8003070:	6822      	ldr	r2, [r4, #0]
 8003072:	1b52      	subs	r2, r2, r5
 8003074:	d420      	bmi.n	80030b8 <_malloc_r+0xd0>
 8003076:	2a0b      	cmp	r2, #11
 8003078:	d917      	bls.n	80030aa <_malloc_r+0xc2>
 800307a:	1961      	adds	r1, r4, r5
 800307c:	42a3      	cmp	r3, r4
 800307e:	6025      	str	r5, [r4, #0]
 8003080:	bf18      	it	ne
 8003082:	6059      	strne	r1, [r3, #4]
 8003084:	6863      	ldr	r3, [r4, #4]
 8003086:	bf08      	it	eq
 8003088:	f8c8 1000 	streq.w	r1, [r8]
 800308c:	5162      	str	r2, [r4, r5]
 800308e:	604b      	str	r3, [r1, #4]
 8003090:	4630      	mov	r0, r6
 8003092:	f000 f82f 	bl	80030f4 <__malloc_unlock>
 8003096:	f104 000b 	add.w	r0, r4, #11
 800309a:	1d23      	adds	r3, r4, #4
 800309c:	f020 0007 	bic.w	r0, r0, #7
 80030a0:	1ac2      	subs	r2, r0, r3
 80030a2:	bf1c      	itt	ne
 80030a4:	1a1b      	subne	r3, r3, r0
 80030a6:	50a3      	strne	r3, [r4, r2]
 80030a8:	e7af      	b.n	800300a <_malloc_r+0x22>
 80030aa:	6862      	ldr	r2, [r4, #4]
 80030ac:	42a3      	cmp	r3, r4
 80030ae:	bf0c      	ite	eq
 80030b0:	f8c8 2000 	streq.w	r2, [r8]
 80030b4:	605a      	strne	r2, [r3, #4]
 80030b6:	e7eb      	b.n	8003090 <_malloc_r+0xa8>
 80030b8:	4623      	mov	r3, r4
 80030ba:	6864      	ldr	r4, [r4, #4]
 80030bc:	e7ae      	b.n	800301c <_malloc_r+0x34>
 80030be:	463c      	mov	r4, r7
 80030c0:	687f      	ldr	r7, [r7, #4]
 80030c2:	e7b6      	b.n	8003032 <_malloc_r+0x4a>
 80030c4:	461a      	mov	r2, r3
 80030c6:	685b      	ldr	r3, [r3, #4]
 80030c8:	42a3      	cmp	r3, r4
 80030ca:	d1fb      	bne.n	80030c4 <_malloc_r+0xdc>
 80030cc:	2300      	movs	r3, #0
 80030ce:	6053      	str	r3, [r2, #4]
 80030d0:	e7de      	b.n	8003090 <_malloc_r+0xa8>
 80030d2:	230c      	movs	r3, #12
 80030d4:	6033      	str	r3, [r6, #0]
 80030d6:	4630      	mov	r0, r6
 80030d8:	f000 f80c 	bl	80030f4 <__malloc_unlock>
 80030dc:	e794      	b.n	8003008 <_malloc_r+0x20>
 80030de:	6005      	str	r5, [r0, #0]
 80030e0:	e7d6      	b.n	8003090 <_malloc_r+0xa8>
 80030e2:	bf00      	nop
 80030e4:	20000290 	.word	0x20000290

080030e8 <__malloc_lock>:
 80030e8:	4801      	ldr	r0, [pc, #4]	@ (80030f0 <__malloc_lock+0x8>)
 80030ea:	f7ff bf0f 	b.w	8002f0c <__retarget_lock_acquire_recursive>
 80030ee:	bf00      	nop
 80030f0:	20000288 	.word	0x20000288

080030f4 <__malloc_unlock>:
 80030f4:	4801      	ldr	r0, [pc, #4]	@ (80030fc <__malloc_unlock+0x8>)
 80030f6:	f7ff bf0a 	b.w	8002f0e <__retarget_lock_release_recursive>
 80030fa:	bf00      	nop
 80030fc:	20000288 	.word	0x20000288

08003100 <__ssputs_r>:
 8003100:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003104:	688e      	ldr	r6, [r1, #8]
 8003106:	461f      	mov	r7, r3
 8003108:	42be      	cmp	r6, r7
 800310a:	680b      	ldr	r3, [r1, #0]
 800310c:	4682      	mov	sl, r0
 800310e:	460c      	mov	r4, r1
 8003110:	4690      	mov	r8, r2
 8003112:	d82d      	bhi.n	8003170 <__ssputs_r+0x70>
 8003114:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8003118:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800311c:	d026      	beq.n	800316c <__ssputs_r+0x6c>
 800311e:	6965      	ldr	r5, [r4, #20]
 8003120:	6909      	ldr	r1, [r1, #16]
 8003122:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003126:	eba3 0901 	sub.w	r9, r3, r1
 800312a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800312e:	1c7b      	adds	r3, r7, #1
 8003130:	444b      	add	r3, r9
 8003132:	106d      	asrs	r5, r5, #1
 8003134:	429d      	cmp	r5, r3
 8003136:	bf38      	it	cc
 8003138:	461d      	movcc	r5, r3
 800313a:	0553      	lsls	r3, r2, #21
 800313c:	d527      	bpl.n	800318e <__ssputs_r+0x8e>
 800313e:	4629      	mov	r1, r5
 8003140:	f7ff ff52 	bl	8002fe8 <_malloc_r>
 8003144:	4606      	mov	r6, r0
 8003146:	b360      	cbz	r0, 80031a2 <__ssputs_r+0xa2>
 8003148:	6921      	ldr	r1, [r4, #16]
 800314a:	464a      	mov	r2, r9
 800314c:	f000 fae6 	bl	800371c <memcpy>
 8003150:	89a3      	ldrh	r3, [r4, #12]
 8003152:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8003156:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800315a:	81a3      	strh	r3, [r4, #12]
 800315c:	6126      	str	r6, [r4, #16]
 800315e:	6165      	str	r5, [r4, #20]
 8003160:	444e      	add	r6, r9
 8003162:	eba5 0509 	sub.w	r5, r5, r9
 8003166:	6026      	str	r6, [r4, #0]
 8003168:	60a5      	str	r5, [r4, #8]
 800316a:	463e      	mov	r6, r7
 800316c:	42be      	cmp	r6, r7
 800316e:	d900      	bls.n	8003172 <__ssputs_r+0x72>
 8003170:	463e      	mov	r6, r7
 8003172:	6820      	ldr	r0, [r4, #0]
 8003174:	4632      	mov	r2, r6
 8003176:	4641      	mov	r1, r8
 8003178:	f000 faa6 	bl	80036c8 <memmove>
 800317c:	68a3      	ldr	r3, [r4, #8]
 800317e:	1b9b      	subs	r3, r3, r6
 8003180:	60a3      	str	r3, [r4, #8]
 8003182:	6823      	ldr	r3, [r4, #0]
 8003184:	4433      	add	r3, r6
 8003186:	6023      	str	r3, [r4, #0]
 8003188:	2000      	movs	r0, #0
 800318a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800318e:	462a      	mov	r2, r5
 8003190:	f000 fad2 	bl	8003738 <_realloc_r>
 8003194:	4606      	mov	r6, r0
 8003196:	2800      	cmp	r0, #0
 8003198:	d1e0      	bne.n	800315c <__ssputs_r+0x5c>
 800319a:	6921      	ldr	r1, [r4, #16]
 800319c:	4650      	mov	r0, sl
 800319e:	f7ff feb7 	bl	8002f10 <_free_r>
 80031a2:	230c      	movs	r3, #12
 80031a4:	f8ca 3000 	str.w	r3, [sl]
 80031a8:	89a3      	ldrh	r3, [r4, #12]
 80031aa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80031ae:	81a3      	strh	r3, [r4, #12]
 80031b0:	f04f 30ff 	mov.w	r0, #4294967295
 80031b4:	e7e9      	b.n	800318a <__ssputs_r+0x8a>
	...

080031b8 <_svfiprintf_r>:
 80031b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80031bc:	4698      	mov	r8, r3
 80031be:	898b      	ldrh	r3, [r1, #12]
 80031c0:	061b      	lsls	r3, r3, #24
 80031c2:	b09d      	sub	sp, #116	@ 0x74
 80031c4:	4607      	mov	r7, r0
 80031c6:	460d      	mov	r5, r1
 80031c8:	4614      	mov	r4, r2
 80031ca:	d510      	bpl.n	80031ee <_svfiprintf_r+0x36>
 80031cc:	690b      	ldr	r3, [r1, #16]
 80031ce:	b973      	cbnz	r3, 80031ee <_svfiprintf_r+0x36>
 80031d0:	2140      	movs	r1, #64	@ 0x40
 80031d2:	f7ff ff09 	bl	8002fe8 <_malloc_r>
 80031d6:	6028      	str	r0, [r5, #0]
 80031d8:	6128      	str	r0, [r5, #16]
 80031da:	b930      	cbnz	r0, 80031ea <_svfiprintf_r+0x32>
 80031dc:	230c      	movs	r3, #12
 80031de:	603b      	str	r3, [r7, #0]
 80031e0:	f04f 30ff 	mov.w	r0, #4294967295
 80031e4:	b01d      	add	sp, #116	@ 0x74
 80031e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80031ea:	2340      	movs	r3, #64	@ 0x40
 80031ec:	616b      	str	r3, [r5, #20]
 80031ee:	2300      	movs	r3, #0
 80031f0:	9309      	str	r3, [sp, #36]	@ 0x24
 80031f2:	2320      	movs	r3, #32
 80031f4:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80031f8:	f8cd 800c 	str.w	r8, [sp, #12]
 80031fc:	2330      	movs	r3, #48	@ 0x30
 80031fe:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800339c <_svfiprintf_r+0x1e4>
 8003202:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8003206:	f04f 0901 	mov.w	r9, #1
 800320a:	4623      	mov	r3, r4
 800320c:	469a      	mov	sl, r3
 800320e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003212:	b10a      	cbz	r2, 8003218 <_svfiprintf_r+0x60>
 8003214:	2a25      	cmp	r2, #37	@ 0x25
 8003216:	d1f9      	bne.n	800320c <_svfiprintf_r+0x54>
 8003218:	ebba 0b04 	subs.w	fp, sl, r4
 800321c:	d00b      	beq.n	8003236 <_svfiprintf_r+0x7e>
 800321e:	465b      	mov	r3, fp
 8003220:	4622      	mov	r2, r4
 8003222:	4629      	mov	r1, r5
 8003224:	4638      	mov	r0, r7
 8003226:	f7ff ff6b 	bl	8003100 <__ssputs_r>
 800322a:	3001      	adds	r0, #1
 800322c:	f000 80a7 	beq.w	800337e <_svfiprintf_r+0x1c6>
 8003230:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8003232:	445a      	add	r2, fp
 8003234:	9209      	str	r2, [sp, #36]	@ 0x24
 8003236:	f89a 3000 	ldrb.w	r3, [sl]
 800323a:	2b00      	cmp	r3, #0
 800323c:	f000 809f 	beq.w	800337e <_svfiprintf_r+0x1c6>
 8003240:	2300      	movs	r3, #0
 8003242:	f04f 32ff 	mov.w	r2, #4294967295
 8003246:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800324a:	f10a 0a01 	add.w	sl, sl, #1
 800324e:	9304      	str	r3, [sp, #16]
 8003250:	9307      	str	r3, [sp, #28]
 8003252:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8003256:	931a      	str	r3, [sp, #104]	@ 0x68
 8003258:	4654      	mov	r4, sl
 800325a:	2205      	movs	r2, #5
 800325c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003260:	484e      	ldr	r0, [pc, #312]	@ (800339c <_svfiprintf_r+0x1e4>)
 8003262:	f7fc ffc5 	bl	80001f0 <memchr>
 8003266:	9a04      	ldr	r2, [sp, #16]
 8003268:	b9d8      	cbnz	r0, 80032a2 <_svfiprintf_r+0xea>
 800326a:	06d0      	lsls	r0, r2, #27
 800326c:	bf44      	itt	mi
 800326e:	2320      	movmi	r3, #32
 8003270:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003274:	0711      	lsls	r1, r2, #28
 8003276:	bf44      	itt	mi
 8003278:	232b      	movmi	r3, #43	@ 0x2b
 800327a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800327e:	f89a 3000 	ldrb.w	r3, [sl]
 8003282:	2b2a      	cmp	r3, #42	@ 0x2a
 8003284:	d015      	beq.n	80032b2 <_svfiprintf_r+0xfa>
 8003286:	9a07      	ldr	r2, [sp, #28]
 8003288:	4654      	mov	r4, sl
 800328a:	2000      	movs	r0, #0
 800328c:	f04f 0c0a 	mov.w	ip, #10
 8003290:	4621      	mov	r1, r4
 8003292:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003296:	3b30      	subs	r3, #48	@ 0x30
 8003298:	2b09      	cmp	r3, #9
 800329a:	d94b      	bls.n	8003334 <_svfiprintf_r+0x17c>
 800329c:	b1b0      	cbz	r0, 80032cc <_svfiprintf_r+0x114>
 800329e:	9207      	str	r2, [sp, #28]
 80032a0:	e014      	b.n	80032cc <_svfiprintf_r+0x114>
 80032a2:	eba0 0308 	sub.w	r3, r0, r8
 80032a6:	fa09 f303 	lsl.w	r3, r9, r3
 80032aa:	4313      	orrs	r3, r2
 80032ac:	9304      	str	r3, [sp, #16]
 80032ae:	46a2      	mov	sl, r4
 80032b0:	e7d2      	b.n	8003258 <_svfiprintf_r+0xa0>
 80032b2:	9b03      	ldr	r3, [sp, #12]
 80032b4:	1d19      	adds	r1, r3, #4
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	9103      	str	r1, [sp, #12]
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	bfbb      	ittet	lt
 80032be:	425b      	neglt	r3, r3
 80032c0:	f042 0202 	orrlt.w	r2, r2, #2
 80032c4:	9307      	strge	r3, [sp, #28]
 80032c6:	9307      	strlt	r3, [sp, #28]
 80032c8:	bfb8      	it	lt
 80032ca:	9204      	strlt	r2, [sp, #16]
 80032cc:	7823      	ldrb	r3, [r4, #0]
 80032ce:	2b2e      	cmp	r3, #46	@ 0x2e
 80032d0:	d10a      	bne.n	80032e8 <_svfiprintf_r+0x130>
 80032d2:	7863      	ldrb	r3, [r4, #1]
 80032d4:	2b2a      	cmp	r3, #42	@ 0x2a
 80032d6:	d132      	bne.n	800333e <_svfiprintf_r+0x186>
 80032d8:	9b03      	ldr	r3, [sp, #12]
 80032da:	1d1a      	adds	r2, r3, #4
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	9203      	str	r2, [sp, #12]
 80032e0:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80032e4:	3402      	adds	r4, #2
 80032e6:	9305      	str	r3, [sp, #20]
 80032e8:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80033ac <_svfiprintf_r+0x1f4>
 80032ec:	7821      	ldrb	r1, [r4, #0]
 80032ee:	2203      	movs	r2, #3
 80032f0:	4650      	mov	r0, sl
 80032f2:	f7fc ff7d 	bl	80001f0 <memchr>
 80032f6:	b138      	cbz	r0, 8003308 <_svfiprintf_r+0x150>
 80032f8:	9b04      	ldr	r3, [sp, #16]
 80032fa:	eba0 000a 	sub.w	r0, r0, sl
 80032fe:	2240      	movs	r2, #64	@ 0x40
 8003300:	4082      	lsls	r2, r0
 8003302:	4313      	orrs	r3, r2
 8003304:	3401      	adds	r4, #1
 8003306:	9304      	str	r3, [sp, #16]
 8003308:	f814 1b01 	ldrb.w	r1, [r4], #1
 800330c:	4824      	ldr	r0, [pc, #144]	@ (80033a0 <_svfiprintf_r+0x1e8>)
 800330e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8003312:	2206      	movs	r2, #6
 8003314:	f7fc ff6c 	bl	80001f0 <memchr>
 8003318:	2800      	cmp	r0, #0
 800331a:	d036      	beq.n	800338a <_svfiprintf_r+0x1d2>
 800331c:	4b21      	ldr	r3, [pc, #132]	@ (80033a4 <_svfiprintf_r+0x1ec>)
 800331e:	bb1b      	cbnz	r3, 8003368 <_svfiprintf_r+0x1b0>
 8003320:	9b03      	ldr	r3, [sp, #12]
 8003322:	3307      	adds	r3, #7
 8003324:	f023 0307 	bic.w	r3, r3, #7
 8003328:	3308      	adds	r3, #8
 800332a:	9303      	str	r3, [sp, #12]
 800332c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800332e:	4433      	add	r3, r6
 8003330:	9309      	str	r3, [sp, #36]	@ 0x24
 8003332:	e76a      	b.n	800320a <_svfiprintf_r+0x52>
 8003334:	fb0c 3202 	mla	r2, ip, r2, r3
 8003338:	460c      	mov	r4, r1
 800333a:	2001      	movs	r0, #1
 800333c:	e7a8      	b.n	8003290 <_svfiprintf_r+0xd8>
 800333e:	2300      	movs	r3, #0
 8003340:	3401      	adds	r4, #1
 8003342:	9305      	str	r3, [sp, #20]
 8003344:	4619      	mov	r1, r3
 8003346:	f04f 0c0a 	mov.w	ip, #10
 800334a:	4620      	mov	r0, r4
 800334c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003350:	3a30      	subs	r2, #48	@ 0x30
 8003352:	2a09      	cmp	r2, #9
 8003354:	d903      	bls.n	800335e <_svfiprintf_r+0x1a6>
 8003356:	2b00      	cmp	r3, #0
 8003358:	d0c6      	beq.n	80032e8 <_svfiprintf_r+0x130>
 800335a:	9105      	str	r1, [sp, #20]
 800335c:	e7c4      	b.n	80032e8 <_svfiprintf_r+0x130>
 800335e:	fb0c 2101 	mla	r1, ip, r1, r2
 8003362:	4604      	mov	r4, r0
 8003364:	2301      	movs	r3, #1
 8003366:	e7f0      	b.n	800334a <_svfiprintf_r+0x192>
 8003368:	ab03      	add	r3, sp, #12
 800336a:	9300      	str	r3, [sp, #0]
 800336c:	462a      	mov	r2, r5
 800336e:	4b0e      	ldr	r3, [pc, #56]	@ (80033a8 <_svfiprintf_r+0x1f0>)
 8003370:	a904      	add	r1, sp, #16
 8003372:	4638      	mov	r0, r7
 8003374:	f3af 8000 	nop.w
 8003378:	1c42      	adds	r2, r0, #1
 800337a:	4606      	mov	r6, r0
 800337c:	d1d6      	bne.n	800332c <_svfiprintf_r+0x174>
 800337e:	89ab      	ldrh	r3, [r5, #12]
 8003380:	065b      	lsls	r3, r3, #25
 8003382:	f53f af2d 	bmi.w	80031e0 <_svfiprintf_r+0x28>
 8003386:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8003388:	e72c      	b.n	80031e4 <_svfiprintf_r+0x2c>
 800338a:	ab03      	add	r3, sp, #12
 800338c:	9300      	str	r3, [sp, #0]
 800338e:	462a      	mov	r2, r5
 8003390:	4b05      	ldr	r3, [pc, #20]	@ (80033a8 <_svfiprintf_r+0x1f0>)
 8003392:	a904      	add	r1, sp, #16
 8003394:	4638      	mov	r0, r7
 8003396:	f000 f879 	bl	800348c <_printf_i>
 800339a:	e7ed      	b.n	8003378 <_svfiprintf_r+0x1c0>
 800339c:	08003854 	.word	0x08003854
 80033a0:	0800385e 	.word	0x0800385e
 80033a4:	00000000 	.word	0x00000000
 80033a8:	08003101 	.word	0x08003101
 80033ac:	0800385a 	.word	0x0800385a

080033b0 <_printf_common>:
 80033b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80033b4:	4616      	mov	r6, r2
 80033b6:	4698      	mov	r8, r3
 80033b8:	688a      	ldr	r2, [r1, #8]
 80033ba:	690b      	ldr	r3, [r1, #16]
 80033bc:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80033c0:	4293      	cmp	r3, r2
 80033c2:	bfb8      	it	lt
 80033c4:	4613      	movlt	r3, r2
 80033c6:	6033      	str	r3, [r6, #0]
 80033c8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80033cc:	4607      	mov	r7, r0
 80033ce:	460c      	mov	r4, r1
 80033d0:	b10a      	cbz	r2, 80033d6 <_printf_common+0x26>
 80033d2:	3301      	adds	r3, #1
 80033d4:	6033      	str	r3, [r6, #0]
 80033d6:	6823      	ldr	r3, [r4, #0]
 80033d8:	0699      	lsls	r1, r3, #26
 80033da:	bf42      	ittt	mi
 80033dc:	6833      	ldrmi	r3, [r6, #0]
 80033de:	3302      	addmi	r3, #2
 80033e0:	6033      	strmi	r3, [r6, #0]
 80033e2:	6825      	ldr	r5, [r4, #0]
 80033e4:	f015 0506 	ands.w	r5, r5, #6
 80033e8:	d106      	bne.n	80033f8 <_printf_common+0x48>
 80033ea:	f104 0a19 	add.w	sl, r4, #25
 80033ee:	68e3      	ldr	r3, [r4, #12]
 80033f0:	6832      	ldr	r2, [r6, #0]
 80033f2:	1a9b      	subs	r3, r3, r2
 80033f4:	42ab      	cmp	r3, r5
 80033f6:	dc26      	bgt.n	8003446 <_printf_common+0x96>
 80033f8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80033fc:	6822      	ldr	r2, [r4, #0]
 80033fe:	3b00      	subs	r3, #0
 8003400:	bf18      	it	ne
 8003402:	2301      	movne	r3, #1
 8003404:	0692      	lsls	r2, r2, #26
 8003406:	d42b      	bmi.n	8003460 <_printf_common+0xb0>
 8003408:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800340c:	4641      	mov	r1, r8
 800340e:	4638      	mov	r0, r7
 8003410:	47c8      	blx	r9
 8003412:	3001      	adds	r0, #1
 8003414:	d01e      	beq.n	8003454 <_printf_common+0xa4>
 8003416:	6823      	ldr	r3, [r4, #0]
 8003418:	6922      	ldr	r2, [r4, #16]
 800341a:	f003 0306 	and.w	r3, r3, #6
 800341e:	2b04      	cmp	r3, #4
 8003420:	bf02      	ittt	eq
 8003422:	68e5      	ldreq	r5, [r4, #12]
 8003424:	6833      	ldreq	r3, [r6, #0]
 8003426:	1aed      	subeq	r5, r5, r3
 8003428:	68a3      	ldr	r3, [r4, #8]
 800342a:	bf0c      	ite	eq
 800342c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003430:	2500      	movne	r5, #0
 8003432:	4293      	cmp	r3, r2
 8003434:	bfc4      	itt	gt
 8003436:	1a9b      	subgt	r3, r3, r2
 8003438:	18ed      	addgt	r5, r5, r3
 800343a:	2600      	movs	r6, #0
 800343c:	341a      	adds	r4, #26
 800343e:	42b5      	cmp	r5, r6
 8003440:	d11a      	bne.n	8003478 <_printf_common+0xc8>
 8003442:	2000      	movs	r0, #0
 8003444:	e008      	b.n	8003458 <_printf_common+0xa8>
 8003446:	2301      	movs	r3, #1
 8003448:	4652      	mov	r2, sl
 800344a:	4641      	mov	r1, r8
 800344c:	4638      	mov	r0, r7
 800344e:	47c8      	blx	r9
 8003450:	3001      	adds	r0, #1
 8003452:	d103      	bne.n	800345c <_printf_common+0xac>
 8003454:	f04f 30ff 	mov.w	r0, #4294967295
 8003458:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800345c:	3501      	adds	r5, #1
 800345e:	e7c6      	b.n	80033ee <_printf_common+0x3e>
 8003460:	18e1      	adds	r1, r4, r3
 8003462:	1c5a      	adds	r2, r3, #1
 8003464:	2030      	movs	r0, #48	@ 0x30
 8003466:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800346a:	4422      	add	r2, r4
 800346c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8003470:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8003474:	3302      	adds	r3, #2
 8003476:	e7c7      	b.n	8003408 <_printf_common+0x58>
 8003478:	2301      	movs	r3, #1
 800347a:	4622      	mov	r2, r4
 800347c:	4641      	mov	r1, r8
 800347e:	4638      	mov	r0, r7
 8003480:	47c8      	blx	r9
 8003482:	3001      	adds	r0, #1
 8003484:	d0e6      	beq.n	8003454 <_printf_common+0xa4>
 8003486:	3601      	adds	r6, #1
 8003488:	e7d9      	b.n	800343e <_printf_common+0x8e>
	...

0800348c <_printf_i>:
 800348c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003490:	7e0f      	ldrb	r7, [r1, #24]
 8003492:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8003494:	2f78      	cmp	r7, #120	@ 0x78
 8003496:	4691      	mov	r9, r2
 8003498:	4680      	mov	r8, r0
 800349a:	460c      	mov	r4, r1
 800349c:	469a      	mov	sl, r3
 800349e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80034a2:	d807      	bhi.n	80034b4 <_printf_i+0x28>
 80034a4:	2f62      	cmp	r7, #98	@ 0x62
 80034a6:	d80a      	bhi.n	80034be <_printf_i+0x32>
 80034a8:	2f00      	cmp	r7, #0
 80034aa:	f000 80d1 	beq.w	8003650 <_printf_i+0x1c4>
 80034ae:	2f58      	cmp	r7, #88	@ 0x58
 80034b0:	f000 80b8 	beq.w	8003624 <_printf_i+0x198>
 80034b4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80034b8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80034bc:	e03a      	b.n	8003534 <_printf_i+0xa8>
 80034be:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80034c2:	2b15      	cmp	r3, #21
 80034c4:	d8f6      	bhi.n	80034b4 <_printf_i+0x28>
 80034c6:	a101      	add	r1, pc, #4	@ (adr r1, 80034cc <_printf_i+0x40>)
 80034c8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80034cc:	08003525 	.word	0x08003525
 80034d0:	08003539 	.word	0x08003539
 80034d4:	080034b5 	.word	0x080034b5
 80034d8:	080034b5 	.word	0x080034b5
 80034dc:	080034b5 	.word	0x080034b5
 80034e0:	080034b5 	.word	0x080034b5
 80034e4:	08003539 	.word	0x08003539
 80034e8:	080034b5 	.word	0x080034b5
 80034ec:	080034b5 	.word	0x080034b5
 80034f0:	080034b5 	.word	0x080034b5
 80034f4:	080034b5 	.word	0x080034b5
 80034f8:	08003637 	.word	0x08003637
 80034fc:	08003563 	.word	0x08003563
 8003500:	080035f1 	.word	0x080035f1
 8003504:	080034b5 	.word	0x080034b5
 8003508:	080034b5 	.word	0x080034b5
 800350c:	08003659 	.word	0x08003659
 8003510:	080034b5 	.word	0x080034b5
 8003514:	08003563 	.word	0x08003563
 8003518:	080034b5 	.word	0x080034b5
 800351c:	080034b5 	.word	0x080034b5
 8003520:	080035f9 	.word	0x080035f9
 8003524:	6833      	ldr	r3, [r6, #0]
 8003526:	1d1a      	adds	r2, r3, #4
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	6032      	str	r2, [r6, #0]
 800352c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003530:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8003534:	2301      	movs	r3, #1
 8003536:	e09c      	b.n	8003672 <_printf_i+0x1e6>
 8003538:	6833      	ldr	r3, [r6, #0]
 800353a:	6820      	ldr	r0, [r4, #0]
 800353c:	1d19      	adds	r1, r3, #4
 800353e:	6031      	str	r1, [r6, #0]
 8003540:	0606      	lsls	r6, r0, #24
 8003542:	d501      	bpl.n	8003548 <_printf_i+0xbc>
 8003544:	681d      	ldr	r5, [r3, #0]
 8003546:	e003      	b.n	8003550 <_printf_i+0xc4>
 8003548:	0645      	lsls	r5, r0, #25
 800354a:	d5fb      	bpl.n	8003544 <_printf_i+0xb8>
 800354c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8003550:	2d00      	cmp	r5, #0
 8003552:	da03      	bge.n	800355c <_printf_i+0xd0>
 8003554:	232d      	movs	r3, #45	@ 0x2d
 8003556:	426d      	negs	r5, r5
 8003558:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800355c:	4858      	ldr	r0, [pc, #352]	@ (80036c0 <_printf_i+0x234>)
 800355e:	230a      	movs	r3, #10
 8003560:	e011      	b.n	8003586 <_printf_i+0xfa>
 8003562:	6821      	ldr	r1, [r4, #0]
 8003564:	6833      	ldr	r3, [r6, #0]
 8003566:	0608      	lsls	r0, r1, #24
 8003568:	f853 5b04 	ldr.w	r5, [r3], #4
 800356c:	d402      	bmi.n	8003574 <_printf_i+0xe8>
 800356e:	0649      	lsls	r1, r1, #25
 8003570:	bf48      	it	mi
 8003572:	b2ad      	uxthmi	r5, r5
 8003574:	2f6f      	cmp	r7, #111	@ 0x6f
 8003576:	4852      	ldr	r0, [pc, #328]	@ (80036c0 <_printf_i+0x234>)
 8003578:	6033      	str	r3, [r6, #0]
 800357a:	bf14      	ite	ne
 800357c:	230a      	movne	r3, #10
 800357e:	2308      	moveq	r3, #8
 8003580:	2100      	movs	r1, #0
 8003582:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8003586:	6866      	ldr	r6, [r4, #4]
 8003588:	60a6      	str	r6, [r4, #8]
 800358a:	2e00      	cmp	r6, #0
 800358c:	db05      	blt.n	800359a <_printf_i+0x10e>
 800358e:	6821      	ldr	r1, [r4, #0]
 8003590:	432e      	orrs	r6, r5
 8003592:	f021 0104 	bic.w	r1, r1, #4
 8003596:	6021      	str	r1, [r4, #0]
 8003598:	d04b      	beq.n	8003632 <_printf_i+0x1a6>
 800359a:	4616      	mov	r6, r2
 800359c:	fbb5 f1f3 	udiv	r1, r5, r3
 80035a0:	fb03 5711 	mls	r7, r3, r1, r5
 80035a4:	5dc7      	ldrb	r7, [r0, r7]
 80035a6:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80035aa:	462f      	mov	r7, r5
 80035ac:	42bb      	cmp	r3, r7
 80035ae:	460d      	mov	r5, r1
 80035b0:	d9f4      	bls.n	800359c <_printf_i+0x110>
 80035b2:	2b08      	cmp	r3, #8
 80035b4:	d10b      	bne.n	80035ce <_printf_i+0x142>
 80035b6:	6823      	ldr	r3, [r4, #0]
 80035b8:	07df      	lsls	r7, r3, #31
 80035ba:	d508      	bpl.n	80035ce <_printf_i+0x142>
 80035bc:	6923      	ldr	r3, [r4, #16]
 80035be:	6861      	ldr	r1, [r4, #4]
 80035c0:	4299      	cmp	r1, r3
 80035c2:	bfde      	ittt	le
 80035c4:	2330      	movle	r3, #48	@ 0x30
 80035c6:	f806 3c01 	strble.w	r3, [r6, #-1]
 80035ca:	f106 36ff 	addle.w	r6, r6, #4294967295
 80035ce:	1b92      	subs	r2, r2, r6
 80035d0:	6122      	str	r2, [r4, #16]
 80035d2:	f8cd a000 	str.w	sl, [sp]
 80035d6:	464b      	mov	r3, r9
 80035d8:	aa03      	add	r2, sp, #12
 80035da:	4621      	mov	r1, r4
 80035dc:	4640      	mov	r0, r8
 80035de:	f7ff fee7 	bl	80033b0 <_printf_common>
 80035e2:	3001      	adds	r0, #1
 80035e4:	d14a      	bne.n	800367c <_printf_i+0x1f0>
 80035e6:	f04f 30ff 	mov.w	r0, #4294967295
 80035ea:	b004      	add	sp, #16
 80035ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80035f0:	6823      	ldr	r3, [r4, #0]
 80035f2:	f043 0320 	orr.w	r3, r3, #32
 80035f6:	6023      	str	r3, [r4, #0]
 80035f8:	4832      	ldr	r0, [pc, #200]	@ (80036c4 <_printf_i+0x238>)
 80035fa:	2778      	movs	r7, #120	@ 0x78
 80035fc:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8003600:	6823      	ldr	r3, [r4, #0]
 8003602:	6831      	ldr	r1, [r6, #0]
 8003604:	061f      	lsls	r7, r3, #24
 8003606:	f851 5b04 	ldr.w	r5, [r1], #4
 800360a:	d402      	bmi.n	8003612 <_printf_i+0x186>
 800360c:	065f      	lsls	r7, r3, #25
 800360e:	bf48      	it	mi
 8003610:	b2ad      	uxthmi	r5, r5
 8003612:	6031      	str	r1, [r6, #0]
 8003614:	07d9      	lsls	r1, r3, #31
 8003616:	bf44      	itt	mi
 8003618:	f043 0320 	orrmi.w	r3, r3, #32
 800361c:	6023      	strmi	r3, [r4, #0]
 800361e:	b11d      	cbz	r5, 8003628 <_printf_i+0x19c>
 8003620:	2310      	movs	r3, #16
 8003622:	e7ad      	b.n	8003580 <_printf_i+0xf4>
 8003624:	4826      	ldr	r0, [pc, #152]	@ (80036c0 <_printf_i+0x234>)
 8003626:	e7e9      	b.n	80035fc <_printf_i+0x170>
 8003628:	6823      	ldr	r3, [r4, #0]
 800362a:	f023 0320 	bic.w	r3, r3, #32
 800362e:	6023      	str	r3, [r4, #0]
 8003630:	e7f6      	b.n	8003620 <_printf_i+0x194>
 8003632:	4616      	mov	r6, r2
 8003634:	e7bd      	b.n	80035b2 <_printf_i+0x126>
 8003636:	6833      	ldr	r3, [r6, #0]
 8003638:	6825      	ldr	r5, [r4, #0]
 800363a:	6961      	ldr	r1, [r4, #20]
 800363c:	1d18      	adds	r0, r3, #4
 800363e:	6030      	str	r0, [r6, #0]
 8003640:	062e      	lsls	r6, r5, #24
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	d501      	bpl.n	800364a <_printf_i+0x1be>
 8003646:	6019      	str	r1, [r3, #0]
 8003648:	e002      	b.n	8003650 <_printf_i+0x1c4>
 800364a:	0668      	lsls	r0, r5, #25
 800364c:	d5fb      	bpl.n	8003646 <_printf_i+0x1ba>
 800364e:	8019      	strh	r1, [r3, #0]
 8003650:	2300      	movs	r3, #0
 8003652:	6123      	str	r3, [r4, #16]
 8003654:	4616      	mov	r6, r2
 8003656:	e7bc      	b.n	80035d2 <_printf_i+0x146>
 8003658:	6833      	ldr	r3, [r6, #0]
 800365a:	1d1a      	adds	r2, r3, #4
 800365c:	6032      	str	r2, [r6, #0]
 800365e:	681e      	ldr	r6, [r3, #0]
 8003660:	6862      	ldr	r2, [r4, #4]
 8003662:	2100      	movs	r1, #0
 8003664:	4630      	mov	r0, r6
 8003666:	f7fc fdc3 	bl	80001f0 <memchr>
 800366a:	b108      	cbz	r0, 8003670 <_printf_i+0x1e4>
 800366c:	1b80      	subs	r0, r0, r6
 800366e:	6060      	str	r0, [r4, #4]
 8003670:	6863      	ldr	r3, [r4, #4]
 8003672:	6123      	str	r3, [r4, #16]
 8003674:	2300      	movs	r3, #0
 8003676:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800367a:	e7aa      	b.n	80035d2 <_printf_i+0x146>
 800367c:	6923      	ldr	r3, [r4, #16]
 800367e:	4632      	mov	r2, r6
 8003680:	4649      	mov	r1, r9
 8003682:	4640      	mov	r0, r8
 8003684:	47d0      	blx	sl
 8003686:	3001      	adds	r0, #1
 8003688:	d0ad      	beq.n	80035e6 <_printf_i+0x15a>
 800368a:	6823      	ldr	r3, [r4, #0]
 800368c:	079b      	lsls	r3, r3, #30
 800368e:	d413      	bmi.n	80036b8 <_printf_i+0x22c>
 8003690:	68e0      	ldr	r0, [r4, #12]
 8003692:	9b03      	ldr	r3, [sp, #12]
 8003694:	4298      	cmp	r0, r3
 8003696:	bfb8      	it	lt
 8003698:	4618      	movlt	r0, r3
 800369a:	e7a6      	b.n	80035ea <_printf_i+0x15e>
 800369c:	2301      	movs	r3, #1
 800369e:	4632      	mov	r2, r6
 80036a0:	4649      	mov	r1, r9
 80036a2:	4640      	mov	r0, r8
 80036a4:	47d0      	blx	sl
 80036a6:	3001      	adds	r0, #1
 80036a8:	d09d      	beq.n	80035e6 <_printf_i+0x15a>
 80036aa:	3501      	adds	r5, #1
 80036ac:	68e3      	ldr	r3, [r4, #12]
 80036ae:	9903      	ldr	r1, [sp, #12]
 80036b0:	1a5b      	subs	r3, r3, r1
 80036b2:	42ab      	cmp	r3, r5
 80036b4:	dcf2      	bgt.n	800369c <_printf_i+0x210>
 80036b6:	e7eb      	b.n	8003690 <_printf_i+0x204>
 80036b8:	2500      	movs	r5, #0
 80036ba:	f104 0619 	add.w	r6, r4, #25
 80036be:	e7f5      	b.n	80036ac <_printf_i+0x220>
 80036c0:	08003865 	.word	0x08003865
 80036c4:	08003876 	.word	0x08003876

080036c8 <memmove>:
 80036c8:	4288      	cmp	r0, r1
 80036ca:	b510      	push	{r4, lr}
 80036cc:	eb01 0402 	add.w	r4, r1, r2
 80036d0:	d902      	bls.n	80036d8 <memmove+0x10>
 80036d2:	4284      	cmp	r4, r0
 80036d4:	4623      	mov	r3, r4
 80036d6:	d807      	bhi.n	80036e8 <memmove+0x20>
 80036d8:	1e43      	subs	r3, r0, #1
 80036da:	42a1      	cmp	r1, r4
 80036dc:	d008      	beq.n	80036f0 <memmove+0x28>
 80036de:	f811 2b01 	ldrb.w	r2, [r1], #1
 80036e2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80036e6:	e7f8      	b.n	80036da <memmove+0x12>
 80036e8:	4402      	add	r2, r0
 80036ea:	4601      	mov	r1, r0
 80036ec:	428a      	cmp	r2, r1
 80036ee:	d100      	bne.n	80036f2 <memmove+0x2a>
 80036f0:	bd10      	pop	{r4, pc}
 80036f2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80036f6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80036fa:	e7f7      	b.n	80036ec <memmove+0x24>

080036fc <_sbrk_r>:
 80036fc:	b538      	push	{r3, r4, r5, lr}
 80036fe:	4d06      	ldr	r5, [pc, #24]	@ (8003718 <_sbrk_r+0x1c>)
 8003700:	2300      	movs	r3, #0
 8003702:	4604      	mov	r4, r0
 8003704:	4608      	mov	r0, r1
 8003706:	602b      	str	r3, [r5, #0]
 8003708:	f7fd fa2a 	bl	8000b60 <_sbrk>
 800370c:	1c43      	adds	r3, r0, #1
 800370e:	d102      	bne.n	8003716 <_sbrk_r+0x1a>
 8003710:	682b      	ldr	r3, [r5, #0]
 8003712:	b103      	cbz	r3, 8003716 <_sbrk_r+0x1a>
 8003714:	6023      	str	r3, [r4, #0]
 8003716:	bd38      	pop	{r3, r4, r5, pc}
 8003718:	20000284 	.word	0x20000284

0800371c <memcpy>:
 800371c:	440a      	add	r2, r1
 800371e:	4291      	cmp	r1, r2
 8003720:	f100 33ff 	add.w	r3, r0, #4294967295
 8003724:	d100      	bne.n	8003728 <memcpy+0xc>
 8003726:	4770      	bx	lr
 8003728:	b510      	push	{r4, lr}
 800372a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800372e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003732:	4291      	cmp	r1, r2
 8003734:	d1f9      	bne.n	800372a <memcpy+0xe>
 8003736:	bd10      	pop	{r4, pc}

08003738 <_realloc_r>:
 8003738:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800373c:	4607      	mov	r7, r0
 800373e:	4614      	mov	r4, r2
 8003740:	460d      	mov	r5, r1
 8003742:	b921      	cbnz	r1, 800374e <_realloc_r+0x16>
 8003744:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003748:	4611      	mov	r1, r2
 800374a:	f7ff bc4d 	b.w	8002fe8 <_malloc_r>
 800374e:	b92a      	cbnz	r2, 800375c <_realloc_r+0x24>
 8003750:	f7ff fbde 	bl	8002f10 <_free_r>
 8003754:	4625      	mov	r5, r4
 8003756:	4628      	mov	r0, r5
 8003758:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800375c:	f000 f81a 	bl	8003794 <_malloc_usable_size_r>
 8003760:	4284      	cmp	r4, r0
 8003762:	4606      	mov	r6, r0
 8003764:	d802      	bhi.n	800376c <_realloc_r+0x34>
 8003766:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800376a:	d8f4      	bhi.n	8003756 <_realloc_r+0x1e>
 800376c:	4621      	mov	r1, r4
 800376e:	4638      	mov	r0, r7
 8003770:	f7ff fc3a 	bl	8002fe8 <_malloc_r>
 8003774:	4680      	mov	r8, r0
 8003776:	b908      	cbnz	r0, 800377c <_realloc_r+0x44>
 8003778:	4645      	mov	r5, r8
 800377a:	e7ec      	b.n	8003756 <_realloc_r+0x1e>
 800377c:	42b4      	cmp	r4, r6
 800377e:	4622      	mov	r2, r4
 8003780:	4629      	mov	r1, r5
 8003782:	bf28      	it	cs
 8003784:	4632      	movcs	r2, r6
 8003786:	f7ff ffc9 	bl	800371c <memcpy>
 800378a:	4629      	mov	r1, r5
 800378c:	4638      	mov	r0, r7
 800378e:	f7ff fbbf 	bl	8002f10 <_free_r>
 8003792:	e7f1      	b.n	8003778 <_realloc_r+0x40>

08003794 <_malloc_usable_size_r>:
 8003794:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003798:	1f18      	subs	r0, r3, #4
 800379a:	2b00      	cmp	r3, #0
 800379c:	bfbc      	itt	lt
 800379e:	580b      	ldrlt	r3, [r1, r0]
 80037a0:	18c0      	addlt	r0, r0, r3
 80037a2:	4770      	bx	lr

080037a4 <_init>:
 80037a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80037a6:	bf00      	nop
 80037a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80037aa:	bc08      	pop	{r3}
 80037ac:	469e      	mov	lr, r3
 80037ae:	4770      	bx	lr

080037b0 <_fini>:
 80037b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80037b2:	bf00      	nop
 80037b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80037b6:	bc08      	pop	{r3}
 80037b8:	469e      	mov	lr, r3
 80037ba:	4770      	bx	lr
